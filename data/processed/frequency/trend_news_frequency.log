31/05/2021 ['DHL'] 03/06/2021 Paketboten;klingeln 0 1
31/05/2021 ['DHL'] 03/06/2021 Kontaktlose;Zustellung;Variante;verärgern;DHL;Bote 1 1
31/05/2021 ['DHL'] 13/06/2021 DHL;Partner;missachtet;Sanktion;Belarus 1 1
31/05/2021 ['Commerzbank'] 01/06/2021 Schmerz;Top;Ökonom;düster;Inflations;Prognose 0 1
31/05/2021 ['Commerzbank'] 09/06/2021 Wirecard;Mastercard;Commerzbank 1 1
31/05/2021 ['DAX'] 01/06/2021 Anleger;bleiben;Warteschleife 0 1
31/05/2021 ['DAX'] 01/06/2021 DAX;Rekordkurs 1 1
31/05/2021 ['DAX'] 02/06/2021 US-amerikanischen;Börse;verlieren;Schwung 0 1
31/05/2021 ['DAX'] 02/06/2021 Zurückhaltung;Gebot;Stunde 0 1
31/05/2021 ['DAX'] 03/06/2021 DAX;Verlust;wett 1 0
31/05/2021 ['DAX'] 04/06/2021 Jobdaten;lassen;Anleger;relativ;kalt 0 1
31/05/2021 ['DAX'] 07/06/2021 Anleger;bleiben;Rekordlaune 0 1
31/05/2021 ['DAX'] 08/06/2021 Grundgehalt;liegen;9;500;Euro;Monat 0 1
31/05/2021 ['DAX'] 08/06/2021 Anleger;lähmen 0 1
31/05/2021 ['DAX'] 09/06/2021 Vorsicht;lauten;Devise 0 1
31/05/2021 ['DAX'] 11/06/2021 Inflationsängste;lassen 0 1
31/05/2021 ['Fronleichnam'] 02/06/2021 feiern;Fronleichnam;Einfach;erklären 1 0
31/05/2021 ['Bank' 'deutschen'] 02/06/2021 Postbank;verhängen;Strafzinsen;25;000;Euro 0 2
31/05/2021 ['Rentenbesteuerung'] 01/06/2021 Urteil;bringen;künftig;Rentner;Geld;fürs;alt 0 1
31/05/2021 ['Rentenbesteuerung'] 01/06/2021 Ministerium;kündigen;Rentenbesteuerung 1 0
31/05/2021 ['Explosion' 'Hamburg'] 01/06/2021 Explosion;zerstören;Büro;Gebäude;Hamburg 2 0
31/05/2021 ['Explosion' 'Hamburg'] 01/06/2021 Schwere;Explosion;erschüttern;Hamburg 2 0
31/05/2021 ['Explosion' 'Hamburg'] 02/06/2021 Explosion;zerstören;Büro;Gebäude;Hamburg 2 0
31/05/2021 ['Sparkasse'] 09/06/2021 5;Milliarde;Euro;benötigen;Wagemut;Landesbanken;Sparkasse;Kunde;teuer 1 1
31/05/2021 ['Sparkasse'] 13/06/2021 Polizei;räumen;besetzt;Haus;Unbekannte;werfen;Pflastersteine;Sparkasse 1 0
31/05/2021 ['Österreich'] 01/06/2021 Österreich;Kanzler;fordern;starke;europäische;Reaktion 1 0
31/05/2021 ['Österreich'] 01/06/2021 Anti;Islamismus;Labor 0 1
31/05/2021 ['Österreich'] 01/06/2021 Österreich;Integrationsministerin;verteidigen;Islam;Landkarte 1 0
31/05/2021 ['Österreich'] 01/06/2021 Unterwäsche;Sisi;versteigern 0 1
31/05/2021 ['Österreich'] 01/06/2021 Hüttentouren;Bayer;komplizieren 0 1
31/05/2021 ['Österreich'] 02/06/2021 Hofer;tritt;FPÖ;Chef 0 1
31/05/2021 ['Österreich'] 02/06/2021 Islam;Landkarte;gefährlich 0 1
31/05/2021 ['Österreich'] 02/06/2021 weg 0 1
31/05/2021 ['Österreich'] 02/06/2021 Österreich 1 0
31/05/2021 ['Österreich'] 03/06/2021 Österreich;Land;Rücktrittskultur 1 1
31/05/2021 ['Österreich'] 02/06/2021 DFB;Team;Berg;Kraft 0 1
31/05/2021 ['Österreich'] 03/06/2021 Grün;gerecht 0 1
31/05/2021 ['Österreich'] 03/06/2021 Warnung;muslimisch;Einrichtung;Österreich 1 0
31/05/2021 ['Österreich'] 04/06/2021 Friederike;Mayröcker;tot 0 1
31/05/2021 ['Österreich'] 04/06/2021 Verirren;Landkarte 0 1
31/05/2021 ['Österreich'] 05/06/2021 Herd;Österreich;immun 1 1
31/05/2021 ['Österreich'] 05/06/2021 Ausmister;Werk 0 1
31/05/2021 ['Österreich'] 05/06/2021 04;06;2021 0 1
31/05/2021 ['Österreich'] 07/06/2021 Moderna;beantragen;EU;Impfstoffzulassung;Jugendliche 0 1
31/05/2021 ['Österreich'] 07/06/2021 Justizministerin;bitten;Verfolgung;Homosexueller;Verzeihung 0 1
31/05/2021 ['Österreich'] 06/06/2021 Alpe;Wanderer;stürzen;400;Meter;Tod 0 1
31/05/2021 ['Österreich'] 12/06/2021 Bozen;Brenner;Bombe;explodieren 0 1
31/05/2021 ['Österreich'] 13/06/2021 österreichisch;Fußballer;unfassbar 0 1
31/05/2021 ['Österreich'] 09/06/2021 Test 0 1
31/05/2021 ['Österreich'] 10/06/2021 Passfälscher;Tirol 0 1
31/05/2021 ['Österreich'] 10/06/2021 Obacht;Guardiola;Klopp;Osten 0 1
31/05/2021 ['Österreich'] 11/06/2021 Bundesregierung;heben;Reisewarnung;Risikogebiete 0 1
31/05/2021 ['Österreich'] 11/06/2021 Österreich;Reise;leicht 1 1
31/05/2021 ['Österreich'] 13/06/2021 Land;Risikogebiet 0 1
31/05/2021 ['Österreich'] 13/06/2021 Österreich;Urlaubsländer;Risikogebiete 1 0
31/05/2021 ['Österreich'] 13/06/2021 Österreich;starten;Bundesliga;Profi 1 1
31/05/2021 ['Österreich'] 13/06/2021 DFB;kassieren;Blamage;Nordmazedonien;nächst;Sensation;Österreich 1 1
31/05/2021 ['Österreich'] 14/06/2021 Österreich;erst;EM;Sieg;brechen;Gregoritsch;Träne 1 1
31/05/2021 ['Österreich'] 14/06/2021 Goran;Grillmeister 0 1
31/05/2021 ['Österreich'] 14/06/2021 Österreich;gewinnen;Nordmazedonien 1 0
31/05/2021 ['Österreich'] 14/06/2021 Österreich;feiern;Auftakt;EM;Premiere 1 1
31/05/2021 ['Österreich'] 14/06/2021 Schmeichelhaft;Goran 0 1
31/05/2021 ['Österreich'] 14/06/2021 Niederlande;spät;Siegtor 0 1
31/05/2021 ['Österreich'] 14/06/2021 Joker;stechen;Doppelpack;retten;Österreich;Sieg;Nordmazedonien 1 0
31/05/2021 ['Linz'] 09/06/2021 Linz;Oberösterreich;Grenze;Überwinden 1 1
31/05/2021 ['Cover' 'Me' 'Sunshine'] 03/06/2021 Pink;gratulieren;Tochter;Geburtstag 0 3
31/05/2021 ['Federer' 'Roger'] 01/06/2021 Maestro;versuchen 0 2
31/05/2021 ['Federer' 'Roger'] 05/06/2021 Schweden;stoischer;Tennislegende 0 2
31/05/2021 ['Federer' 'Roger'] 06/06/2021 Federer;ziehen;French;Open 1 2
31/05/2021 ['Federer' 'Roger'] 06/06/2021 Roger;Federer;rätseln 2 2
31/05/2021 ['Federer' 'Roger'] 06/06/2021 Koepfer;Federer;vorbei 1 2
31/05/2021 ['Federer' 'Roger'] 06/06/2021 Einzug;Achtelfinale;Tennis;Star;Federer;steigen;French;Open 1 2
31/05/2021 ['Federer' 'Roger'] 06/06/2021 Struff;zähmen;Gegner 0 2
31/05/2021 ['Federer' 'Roger'] 07/06/2021 Zverev;mühelos;Viertelfinale;Paris 0 2
01/06/2021 ['Rummenigge'] 01/06/2021 abrupt;Ära;Rummenigge;FC;Bayer 1 1
01/06/2021 ['Rummenigge'] 01/06/2021 Rummenigge;hören;vorzeitig 1 1
01/06/2021 ['Rummenigge'] 02/06/2021 Rummenigge;Abschied;letzt;Wunsch 1 1
01/06/2021 ['Rummenigge'] 01/06/2021 Bayernboss;übergeben 0 1
01/06/2021 ['Rummenigge'] 01/06/2021 Rummenigges;Abgang;FC;Bayer;hart;treffen;Hoeneß 1 1
01/06/2021 ['Rummenigge'] 02/06/2021 ziehen;mein;Hut;sagen;Champs;Élysées 0 1
01/06/2021 ['Rummenigge'] 02/06/2021 bieder;Gegenentwurf;Uli;Hoeneß 0 1
01/06/2021 ['Rummenigge'] 02/06/2021 Rummenigge;verlässt;FC;Bayer;vorzeitig 1 0
01/06/2021 ['Rummenigge'] 03/06/2021 Abschied;kritisieren;Rummenigge;Alaba 1 1
01/06/2021 ['Rummenigge'] 03/06/2021 Zuschauerpläne;irritieren;Rummenigge;arg 1 1
01/06/2021 ['Johannes' 'Oerding'] 02/06/2021 Hackbrett;Bier;Bogart;Mantel 0 2
01/06/2021 ['Johnson'] 01/06/2021 Erstimpfung;Impfwilligen;12;Mitte;Juli;machbar 0 1
01/06/2021 ['Johnson'] 01/06/2021 Experte;sehen;Großbritannien;Welle 0 1
01/06/2021 ['Johnson'] 01/06/2021 Nimm;Dominic 0 1
01/06/2021 ['Johnson'] 02/06/2021 verschmähen;Vakzin;Impfstoff;Johnson;Johnson;ignorieren 1 1
01/06/2021 ['Johnson'] 01/06/2021 First;Lady;Johnson;Grüne 1 0
01/06/2021 ['Johnson'] 02/06/2021 Johnson;Johnson;Problem;Impfstoff;Qualität 1 1
01/06/2021 ['Johnson'] 04/06/2021 Lauterbach;glauben;Lockdown 0 1
01/06/2021 ['Johnson'] 04/06/2021 geheim;zufällig;inszenieren 0 1
01/06/2021 ['Johnson'] 04/06/2021 Überholspur;Boris;Johnson;Brite;wirtschaftlich;abhängen 1 1
01/06/2021 ['Johnson'] 06/06/2021 Wilder;Schlägerei;Kampf;Magdeburg 0 1
01/06/2021 ['Johnson'] 06/06/2021 Boris;Johnson;Gesamte;Weltbevölkerung;2022;impfen 1 0
01/06/2021 ['Johnson'] 06/06/2021 RKI;melden;2440;Neuinfektionen 0 1
01/06/2021 ['Johnson'] 06/06/2021 Boris;Johnson;fordern;Impfung;Weltbevölkerung;2022 1 0
01/06/2021 ['Johnson'] 09/06/2021 Vernarrt 0 1
01/06/2021 ['Johnson'] 06/06/2021 Johnson;fordern;Impfung;Weltbevölkerung;2022 1 0
01/06/2021 ['Johnson'] 06/06/2021 Johnson;fordern;Corona;Impfung 1 1
01/06/2021 ['Johnson'] 12/06/2021 Mallorca;Diskothek;Mitte;Juli;öffnen 0 1
01/06/2021 ['Johnson'] 10/06/2021 Impfstoff;Klimaversprechen;Boris;Johnson;Deal;Afrika 1 1
01/06/2021 ['Johnson'] 08/06/2021 Johnson;Johnson;Ladenhüter;Liebling 1 0
01/06/2021 ['Johnson'] 08/06/2021 27;000;britische;Urlauber;verlassen;Portugal 0 1
01/06/2021 ['Johnson'] 12/06/2021 Lockerung;England 0 1
01/06/2021 ['Johnson'] 10/06/2021 Johnson;treffen;erstmals;Staatschef;Biden 1 0
01/06/2021 ['Johnson'] 09/06/2021 Superjacht;zeigen;Johnson;Widersprüchlichkeit 1 0
01/06/2021 ['Johnson'] 09/06/2021 Zikaden;bremsen;Tross;Bidens;Europa;Tour 0 1
01/06/2021 ['Johnson'] 12/06/2021 Europäer;setzen;Boris;Johnson;Streit;Handelsdeal;Druck 1 0
01/06/2021 ['Johnson'] 09/06/2021 verschmähen;Vakzin;Johnson;Johnson;Impfstoff;Liebling 1 1
01/06/2021 ['Johnson'] 12/06/2021 Boris;Johnson;zweifeln;komplett;Lockerung;21;Juni 1 0
01/06/2021 ['Johnson'] 11/06/2021 freuen;wahnsinnig;sehen 0 1
01/06/2021 ['Johnson'] 11/06/2021 Biden;Johnson;betonen;gegenseitig;Beistand 1 1
01/06/2021 ['Johnson'] 10/06/2021 verschmähen;Grund;Johnson;Johnson;Wunsch;Vakzin 1 1
01/06/2021 ['Johnson'] 11/06/2021 G;7;Staat;Milliarde;Impfdosen;Verfügung;stellen 0 1
01/06/2021 ['Johnson'] 11/06/2021 Gastgeber;unbeirrbar 0 1
01/06/2021 ['Johnson'] 12/06/2021 Johnson;Johnson;Impfdosen;unbrauchbar 1 0
01/06/2021 ['Johnson'] 11/06/2021 Lehre;Pandemie;ziehen 0 1
01/06/2021 ['Johnson'] 11/06/2021 G7;Land;Milliarde;Corona;Impfdosen;spenden 0 1
01/06/2021 ['Johnson'] 12/06/2021 Million;Impfdosen;Johnson;Johnson;unbrauchbar 1 0
01/06/2021 ['Johnson'] 12/06/2021 Großbritannien;Warnung;Massiver;Anstieg;Infektion;obwohl;77;Prozent;impfen 0 1
01/06/2021 ['Johnson'] 13/06/2021 J;J;liefern;6;5;Million;Impfdosen 0 1
01/06/2021 ['Johnson'] 12/06/2021 J;J;60;Million;Impfdosen;entsorgen 0 1
01/06/2021 ['Johnson'] 13/06/2021 17;48;Johnson;lehnen;Patentaufhebung;Impfstoff 1 0
01/06/2021 ['Johnson'] 14/06/2021 Plötzlich;Macron;Johnson;Wortgefecht;Würstchen 1 0
01/06/2021 ['Charlotte' 'Würdig'] 01/06/2021 Ehe;Soyeon;Schröder;Kim;Kostet;22;000;Euro 0 2
01/06/2021 ['Apotheke'] 04/06/2021 CDU;Abgeordneter;Wahlkampf;Corona;Test;Senatorin;entziehen;Genehmigung 0 1
01/06/2021 ['Apotheke'] 04/06/2021 Erhalt;Impfbescheinigung;Wahlhelfer;Berlin;sagen;reihenweise 0 1
01/06/2021 ['Apotheke'] 10/06/2021 Apotheke;erhalten;18;Euro;Honorar;Code;größtenteils;per;Post 1 1
01/06/2021 ['Apotheke'] 10/06/2021 Digitaler;Impfpass;starten;Montag;Apotheke 1 0
01/06/2021 ['Apotheke'] 10/06/2021 Rechnungshof;vermisst;bezahlen;Intensivbetten 0 1
01/06/2021 ['Apotheke'] 08/06/2021 Digi;Impfpass;s;Apotheker 1 1
01/06/2021 ['Apotheke'] 10/06/2021 Apotheker;freuen;Rekordumsatz 1 1
01/06/2021 ['Apotheke'] 09/06/2021 Digitaler;Impfpass;starten;Montag;Apotheke 1 0
01/06/2021 ['Apotheke'] 09/06/2021 Digi;Impfpass;gibts;Apotheker 1 0
01/06/2021 ['Apotheke'] 10/06/2021 Digitaler;Impfausweis;Bitte;warten 0 1
01/06/2021 ['Apotheke'] 09/06/2021 Frage;Apotheker 1 1
01/06/2021 ['Apotheke'] 09/06/2021 digital;Impfpasses;Apotheke 1 1
01/06/2021 ['Apotheke'] 10/06/2021 Kritik;Spahns;Geldverschwendung 0 1
01/06/2021 ['Apotheke'] 12/06/2021 kombinieren;kombinieren 0 1
01/06/2021 ['Apotheke'] 12/06/2021 Holetschek;fürchten;holprig;Start;digital;Impfpass 0 1
01/06/2021 ['Apotheke'] 11/06/2021 digital;Impfpass;fragen;lesen;Apothekerin;Fax;Anleitung 1 0
01/06/2021 ['Apotheke'] 11/06/2021 Nebenwirkung 0 1
01/06/2021 ['Apotheke'] 11/06/2021 Jens;Spahn;Maske;Intensivbetten;Vorwurf;stecken 0 1
01/06/2021 ['Apotheke'] 13/06/2021 Apotheke;geben;Montag;digital;Impfausweis 1 0
01/06/2021 ['Apotheke'] 14/06/2021 Apotheke;stellen;CovPass 1 1
01/06/2021 ['Vogelgrippe'] 01/06/2021 China;weisen;erstmals;Infektion;Vogelgrippe;Variante;Mensch 1 0
01/06/2021 ['Vogelgrippe'] 01/06/2021 Vogelgrippe;Mensch;nachweisen 1 1
01/06/2021 ['Vogelgrippe'] 01/06/2021 Mensch;Vogelgrippe;H10N3;infizieren 1 1
01/06/2021 ['Vogelgrippe'] 01/06/2021 Neuer;Vogelgrippe;Virus;infizieren;Mensch 1 1
01/06/2021 ['Vogelgrippe'] 02/06/2021 Frage;Antwort;Vogelgrippe 1 1
01/06/2021 ['2021' 'Wacken'] 01/06/2021 Wacken;Open;Air;absagen 1 2
01/06/2021 ['Ancelotti' 'Carlo'] 02/06/2021 Ausschluss;Weltklubs;Champions;League;Woche 0 2
01/06/2021 ['Ancelotti' 'Carlo'] 02/06/2021 Trainer;Sensation;Real;Madrid 0 2
01/06/2021 ['Ancelotti' 'Carlo'] 02/06/2021 alt;bekennen;kehren 0 2
01/06/2021 ['Ancelotti' 'Carlo'] 03/06/2021 bisschen;Personal;reduzieren 0 2
01/06/2021 ['Gerhard' 'Schröder'] 01/06/2021 Frau;ausspannen;Gerhard;Schröder;Ex;Ehefrau;Entschädigung;zahlen 2 2
01/06/2021 ['Deutschland' 'Lettland'] 01/06/2021 Deutschland;erwarten;WM;Endspiel;Gastgeber;Lettland 2 1
01/06/2021 ['Deutschland' 'Lettland'] 02/06/2021 Deutschland;hoffen;Sieg;Gastgeber;Lettland;WM;Coup 2 0
01/06/2021 ['Deutschland' 'Lettland'] 02/06/2021 Deutschland;stehen;WM;Viertelfinale 1 2
01/06/2021 ['Deutschland' 'Lettland'] 02/06/2021 Irre;Nervenschlacht;Deutschland;zittern;Viertelfinale;WM 1 2
01/06/2021 ['Deutschland' 'Lettland'] 07/06/2021 Positiver;Corona;Test;Deutschland;Gegner;Lettland 2 0
01/06/2021 ['Deutschland' 'Lettland'] 05/06/2021 geheimnisvolle;Finne;deutsch;wund 0 2
01/06/2021 ['Deutschland' 'Lettland'] 08/06/2021 Deutschland;schlagen;Lettland;7;1 2 1
01/06/2021 ['Rebel' 'Wilson'] 01/06/2021 Rebel;Wilson;zeigen;Figur 2 2
01/06/2021 ['Sahra' 'Wagenknecht'] 01/06/2021 nerven;Wagenknecht;schießen;Grüne;Überheblichkeit 1 2
01/06/2021 ['Sahra' 'Wagenknecht'] 02/06/2021 Wagenknecht;sprechen;Lafontaine;lieben;Oskar;Kind 1 2
01/06/2021 ['Sahra' 'Wagenknecht'] 10/06/2021 Parteikollegen;beantragen;Sahra;Wagenknechts;Ausschluss 2 2
01/06/2021 ['Sahra' 'Wagenknecht'] 12/06/2021 Bartsch;warnen;eindringlich;Wagenknecht;Parteiausschluss 1 2
01/06/2021 ['Sahra' 'Wagenknecht'] 07/06/2021 sozial;Frage;Totalausfall;Wagenknecht;entlarven;AfD;Gerede;bürgerliche;Opposition 1 2
01/06/2021 ['Sahra' 'Wagenknecht'] 07/06/2021 gerne;mal;Sachsen;Anhalt;hören 0 2
01/06/2021 ['Sahra' 'Wagenknecht'] 08/06/2021 Sahra;Wagenknecht 2 0
01/06/2021 ['Sahra' 'Wagenknecht'] 10/06/2021 Linke;Wagenknechts;Parteiausschluss 1 2
01/06/2021 ['Sahra' 'Wagenknecht'] 11/06/2021 Linke;spitzen;Wagenknechts;Seite 1 2
01/06/2021 ['Sahra' 'Wagenknecht'] 13/06/2021 Sahra;Wagenknecht;warnen;Linke;drohend;Wahlniederlage 2 0
01/06/2021 ['Sahra' 'Wagenknecht'] 12/06/2021 Cancel;Culture;Wagenknecht;sehen;Ausschlussantrag;bestätigen 1 2
01/06/2021 ['Matthias' 'Steiner'] 02/06/2021 Matthias;Steiner;sprechen;Doku;Träne;Foto;Welt 2 0
01/06/2021 ['Pride'] 02/06/2021 Bild;Tag;bunt;lieben;Hass 0 1
01/06/2021 ['Pride'] 10/06/2021 Doppelmoral;tappen;Daimler;BMW;Pinkwashing;Falle 0 1
02/06/2021 ['Fronleichnam'] 02/06/2021 feiern;Fronleichnam;Einfach;erklären 1 0
02/06/2021 ['AMC' 'Aktie'] 03/06/2021 AMC;Aktie;steigen;100;Prozent;Handel;mehrfach;aussetzen 2 2
02/06/2021 ['AMC' 'Aktie'] 04/06/2021 Halloren;to;the;Moon;Gretchenfrage;Basis;ETFs 0 2
02/06/2021 ['AMC' 'Aktie'] 05/06/2021 Halloren;to;the;Moon;Gretchenfrage;Basis;ETFs 0 2
02/06/2021 ['AMC' 'Aktie'] 07/06/2021 3;Million;Halloren;Satire;Chance;Alzheimer;Hoffnung 0 2
02/06/2021 ['RTL'] 02/06/2021 Umfrage;sehen;Union;erstmals;Woche;Grüne;FDP;holen;SPD 0 1
02/06/2021 ['RTL'] 03/06/2021 Millionär;legendär 0 1
02/06/2021 ['RTL'] 03/06/2021 Svenja;Steiner;bringen;GZSZ;Kochen 0 1
02/06/2021 ['RTL'] 03/06/2021 Katze;Haar;schön 0 1
02/06/2021 ['RTL'] 04/06/2021 legendär;Millionär 0 1
02/06/2021 ['RTL'] 04/06/2021 RTL;Kult;Star;packen;Bauer;suchen;Frau;Dreh;nerven 1 1
02/06/2021 ['RTL'] 09/06/2021 ARD;laufen;Moderator;Senderwechsel;stecken;Geld 0 1
02/06/2021 ['RTL'] 09/06/2021 Sommerhaus;Star;mangeln;Star;RTL;Kandidat 1 0
02/06/2021 ['RTL'] 08/06/2021 RTL;holen;Pinar;Atalay;Tagesthemen 1 1
02/06/2021 ['RTL'] 08/06/2021 Moderatorin;Pinar;Atalay;RTL 1 1
02/06/2021 ['RTL'] 08/06/2021 Niko;Griesert;ziehen;Sommerhaus 0 1
02/06/2021 ['RTL'] 10/06/2021 alt;weiß;Mann;Fleischhauer;halten;Steinmeier;nichtig;teuer 0 1
02/06/2021 ['RTL'] 09/06/2021 Union;bauen;Vorsprung;Grüner;Baerbock;verlieren;kontinuierlich;Zuspruch 0 1
02/06/2021 ['RTL'] 14/06/2021 Pop;Titan;Dieter;Bohle;Daniel;Hartwich;Supertalent 0 1
02/06/2021 ['Lothar' 'Matthäus'] 03/06/2021 Matthäus;erklären;Problem;Boateng 1 2
02/06/2021 ['Lothar' 'Matthäus'] 08/06/2021 Suff;Mallorca;Revolution;scheitern 0 2
02/06/2021 ['KFC' 'Uerdingen'] 03/06/2021 Traditionsklub;abwickeln;auflösen 0 2
02/06/2021 ['KFC' 'Uerdingen'] 04/06/2021 Bestraft;retten;scheitern 0 2
02/06/2021 ['Alexander' 'Zverev'] 01/06/2021 100;Prozent;deutschen 0 2
02/06/2021 ['Alexander' 'Zverev'] 01/06/2021 Tennis;Dame;drohen;historische;Tristesse 0 2
02/06/2021 ['Alexander' 'Zverev'] 01/06/2021 Kriminelles;Meinung;sagen 0 2
02/06/2021 ['Alexander' 'Zverev'] 02/06/2021 Ehrgeiz;Etappe 0 2
02/06/2021 ['Alexander' 'Zverev'] 04/06/2021 Zverev;marschieren;lockern;Achtelfinale 1 2
02/06/2021 ['Alexander' 'Zverev'] 03/06/2021 Zverevs;Sieg;perfekt;deutsch 1 2
02/06/2021 ['Alexander' 'Zverev'] 04/06/2021 Zverev;Ziel;Titel;nähern 1 2
02/06/2021 ['Alexander' 'Zverev'] 09/06/2021 Alexander;Zverev;erstmals;Paris;Halbfinale 2 0
02/06/2021 ['Alexander' 'Zverev'] 06/06/2021 Koepfer;Federer;vorbei 0 2
02/06/2021 ['Alexander' 'Zverev'] 09/06/2021 Zverev;erreichen;Halbfinale 1 2
02/06/2021 ['Alexander' 'Zverev'] 07/06/2021 Zverev;mühelos;Viertelfinale;Paris 1 2
02/06/2021 ['Alexander' 'Zverev'] 09/06/2021 verrückt;stoppen;Zverev 1 2
02/06/2021 ['Alexander' 'Zverev'] 08/06/2021 müssten;Angst;Zverev 1 2
02/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Djokovic;triumphieren;Nadal 0 2
02/06/2021 ['Alexander' 'Zverev'] 09/06/2021 Zverevs;Kampf;doppeln;Horror;Bilanz 1 2
02/06/2021 ['Alexander' 'Zverev'] 09/06/2021 Weg;Ziegelsteinen 0 2
02/06/2021 ['Alexander' 'Zverev'] 11/06/2021 Tennisprofi;Alexander;Zverev;Unvollendete 2 0
02/06/2021 ['Alexander' 'Zverev'] 11/06/2021 Zverev;zwingen;Tsitsipas;Halbfinale;entscheidend;Satz 1 2
02/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Zverev;verpasst;Endspiel;Träne;Sieger 1 2
02/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Alexander;Zverev;verpasst;Finaleinzug 2 0
02/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Zverev;verpasst;Finale;Tennis;Drama 1 2
02/06/2021 ['Alexander' 'Zverev'] 12/06/2021 völlig;unerwartet;hinterhältig;Pointe 0 2
02/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Alexander;Zverev;Unvollendete 2 0
02/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Tennisprofi;Alexander;Zverev;bleiben;Unvollendete 2 0
02/06/2021 ['Alexander' 'Zverev'] 14/06/2021 Djokovic;gewinnen;Thriller;Mega;Comeback 0 2
02/06/2021 ['Florian' 'Neuhaus'] 03/06/2021 DFB;Remis;Dänemark;Löw;sehen;Licht;Schatten;Rüffel;Abwehr 0 2
02/06/2021 ['Bommel' 'Mark' 'van'] 02/06/2021 Van;Bommel;Trainer;Wolfsburg 1 3
02/06/2021 ['Bommel' 'Mark' 'van'] 02/06/2021 Mark;van;Bommel;neu;Trainer;VfL;Wolfsburg 3 2
02/06/2021 ['Bommel' 'Mark' 'van'] 02/06/2021 Mark;van;Bommel;Trainer;Wolfsburg 3 0
02/06/2021 ['Bommel' 'Mark' 'van'] 02/06/2021 Van;Bommel;neu;Wolfsburg;Trainer 1 3
02/06/2021 ['Bommel' 'Mark' 'van'] 03/06/2021 Alphatier;Autostadt 0 3
02/06/2021 ['Kate' 'Winslet'] 02/06/2021 Retusche;Photoshop;Wage;Kate;Winslet;stehen;Falte;Bauch 2 2
02/06/2021 ['Kate' 'Winslet'] 02/06/2021 Kate;Winslet;lässt;Bauch 2 2
02/06/2021 ['Kate' 'Winslet'] 02/06/2021 Tristesse;Wollsocken 0 2
02/06/2021 ['Kate' 'Winslet'] 09/06/2021 schön;Abbild;Realität 0 2
02/06/2021 ['Romy' 'Walthall'] 02/06/2021 Hollywood;Star;Romy;Walthall;57;sterben 2 0
02/06/2021 ['Jogi' 'Löw'] 12/06/2021 Löw;voll;Evolution;Fußballs;eintauchen 1 2
02/06/2021 ['Jogi' 'Löw'] 12/06/2021 Pandemie;EM;Absurdität 0 2
02/06/2021 ['Celonis'] 02/06/2021 deutschen;KI;Firma;Milliarde;Dollar;wert 0 1
02/06/2021 ['Celonis'] 02/06/2021 IT;Firma;Celonis;sammeln;Milliarde;Euro;Investition 1 1
02/06/2021 ['Celonis'] 02/06/2021 Celonis;SAP;Deutschland;suchen 1 1
02/06/2021 ['Celonis'] 03/06/2021 Siemens;BMW;Allianz;Lufthansa;reißen;Dienst;Firma 0 1
02/06/2021 ['Celonis'] 02/06/2021 langfristig;Ambition 0 1
02/06/2021 ['Celonis'] 02/06/2021 Münchner;Startup;sammeln;Milliarde 0 1
02/06/2021 ['Celonis'] 03/06/2021 Celonis;Vize;deutsch;Gründer;inspirieren 1 0
02/06/2021 ['Länderspiel'] 03/06/2021 926;laufen;Länderspiel;Müller;Hummels 1 0
02/06/2021 ['Länderspiel'] 03/06/2021 Deutschland;schaffen;Unentschieden;Dänemark 0 1
02/06/2021 ['Länderspiel'] 09/06/2021 gefährlich;Déjà;vu;England 0 1
02/06/2021 ['Länderspiel'] 08/06/2021 Manuel;Neuer;knacken;100;Länderspiele 1 0
02/06/2021 ['Länderspiel'] 08/06/2021 DFB;präsentieren;Torlaune 0 1
02/06/2021 ['Länderspiel'] 08/06/2021 DFB;Team;fahren;Torfestival;EM 0 1
02/06/2021 ['Länderspiel'] 08/06/2021 Abenteurer;Helfersyndrom 0 1
02/06/2021 ['Länderspiel'] 13/06/2021 Mensch;Türkei;schweigen;drohen;Tod 0 1
02/06/2021 ['Herzmuskelentzündung'] 03/06/2021 Rätsel;Herzmuskelentzündungen;Impfung 1 0
02/06/2021 ['Herzmuskelentzündung'] 04/06/2021 Herzmuskelentzündungen;Impfung;stecken 1 0
02/06/2021 ['Herzmuskelentzündung'] 02/06/2021 Studie;halten;Herzmuskelentzündung;Impffolge 1 0
02/06/2021 ['Herzmuskelentzündung'] 02/06/2021 Israel;vermuten;Bezug;Corona;Impfung 0 1
02/06/2021 ['Herzmuskelentzündung'] 04/06/2021 USA;untersuchen;Herzmuskelentzündung;Impfung;Junge 1 0
02/06/2021 ['Herzmuskelentzündung'] 02/06/2021 Erhöhtes;Risiko;junge;Mann;Biontech;Impfung 0 1
02/06/2021 ['Herzmuskelentzündung'] 03/06/2021 Israel;untersuchen;Herzmuskelentzündungen;Biontech 1 0
02/06/2021 ['Herzmuskelentzündung'] 04/06/2021 Myokarditis;Fall;Impfungen 0 1
02/06/2021 ['Herzmuskelentzündung'] 05/06/2021 Kardiologe;sehen;Grund;Sorge 0 1
02/06/2021 ['Herzmuskelentzündung'] 05/06/2021 jung;Mann;Biontech;Impfung;Herzmuskelentzündung;auslösen 1 1
02/06/2021 ['Herzmuskelentzündung'] 11/06/2021 fehlen;gesichert;Datum 0 1
02/06/2021 ['Manuel' 'Neuer'] 01/06/2021 Deutschland;Torhüter;alt 0 2
02/06/2021 ['Manuel' 'Neuer'] 02/06/2021 Manuel;Neuer;fragen 2 0
02/06/2021 ['Manuel' 'Neuer'] 07/06/2021 Geist;Blase 0 2
02/06/2021 ['Manuel' 'Neuer'] 08/06/2021 Manuel;Neuer;knacken;100;Länderspiele 2 0
02/06/2021 ['Manuel' 'Neuer'] 08/06/2021 DFB;Team;fahren;Torfestival;EM 0 2
02/06/2021 ['Manuel' 'Neuer'] 08/06/2021 Abenteurer;Helfersyndrom 0 2
02/06/2021 ['Charlie' 'Watt'] 02/06/2021 Charlie;Watt;spielen 2 2
02/06/2021 ['Charlie' 'Watt'] 02/06/2021 Charlie;Watt;Rolling;Stones;Drummer;80 2 0
02/06/2021 ['Deutschland' 'Dänemark'] 01/06/2021 Deutschland;besiegen;Dänemark;Elfmeter;Krimi 2 2
02/06/2021 ['Deutschland' 'Dänemark'] 01/06/2021 Deutschland;schlagen;Dänemark;Elfmeterschießen 2 1
02/06/2021 ['Deutschland' 'Dänemark'] 01/06/2021 Deutschland;gewinnen;Elfmeterkrimi;Dänemark;ziehen;Halbfinale 2 2
02/06/2021 ['Deutschland' 'Dänemark'] 03/06/2021 Starker;Auftritt;Deutschland;erst;EM;Gegner 1 2
02/06/2021 ['Deutschland' 'Dänemark'] 03/06/2021 meist;Hoffnung;Müller;Interview;Spiel 0 2
02/06/2021 ['Deutschland' 'Dänemark'] 03/06/2021 Deutschland;Dänemark;Remis 2 1
02/06/2021 ['Deutschland' 'Dänemark'] 03/06/2021 926;laufen;Länderspiel;Müller;Hummels 0 2
02/06/2021 ['Deutschland' 'Dänemark'] 03/06/2021 Deutschland;schaffen;Unentschieden;Dänemark 2 1
02/06/2021 ['Deutschland' 'Dänemark'] 10/06/2021 Dänemark;schaffen;Maskenpflicht;weitgehend 1 2
02/06/2021 ['Deutschland' 'Dänemark'] 14/06/2021 Deutschland;Dänemark;feiern;Grenzziehung 2 2
03/06/2021 ['Eishockey' 'WM'] 01/06/2021 Deutschland;verlieren;USA 0 2
03/06/2021 ['Eishockey' 'WM'] 01/06/2021 DEB;Team;Spiel 0 2
03/06/2021 ['Eishockey' 'WM'] 02/06/2021 DEB;Team;zittern;kampfstark;Viertelfinale 0 2
03/06/2021 ['Eishockey' 'WM'] 02/06/2021 groß;Herz 0 2
03/06/2021 ['Eishockey' 'WM'] 04/06/2021 Deutschland;stolz 0 2
03/06/2021 ['Eishockey' 'WM'] 02/06/2021 Irre;Nervenschlacht;Deutschland;zittern;Viertelfinale;WM 1 2
03/06/2021 ['Eishockey' 'WM'] 05/06/2021 Deutschland;lässt;Chance;Finnland;treffen;erneut 0 2
03/06/2021 ['Eishockey' 'WM'] 02/06/2021 hitzig;Spiel 0 2
03/06/2021 ['Eishockey' 'WM'] 03/06/2021 Deutschland;stehen;Eishockey;Drama;WM;Halbfinale 2 0
03/06/2021 ['Eishockey' 'WM'] 03/06/2021 Deutsches;Eishockey;Nationalteam;erreichen;WM;Halbfinale 2 0
03/06/2021 ['Eishockey' 'WM'] 03/06/2021 epischem;Kampf;DEL;Team;Halbfinale 0 2
03/06/2021 ['Eishockey' 'WM'] 03/06/2021 Deutschland;besiegen;Schweiz;Penaltyschießen 0 2
03/06/2021 ['Eishockey' 'WM'] 03/06/2021 Halbfinale;Deutschland;werfen;Schweiz;unglaublich;Eishockey;Drama;raus 1 2
03/06/2021 ['Eishockey' 'WM'] 04/06/2021 Deutschland;ziehen;Halbfinale 0 2
03/06/2021 ['Eishockey' 'WM'] 04/06/2021 deutsch;Eishockey 1 2
03/06/2021 ['Eishockey' 'WM'] 04/06/2021 DEB;Team;epischem;Kampf;WM;Halbfinale 1 2
03/06/2021 ['Eishockey' 'WM'] 04/06/2021 Moment;fürs;Briefmarkenalbum 0 2
03/06/2021 ['Eishockey' 'WM'] 04/06/2021 WM;Halbfinale;deutsch;Eishockey;wund 2 0
03/06/2021 ['Eishockey' 'WM'] 05/06/2021 deutschen;Mannschaft;erreichen;WM;Halbfinale 1 2
03/06/2021 ['Eishockey' 'WM'] 05/06/2021 geheimnisvolle;Finne;deutsch;wund 0 2
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 Deutschland;verpasst;Bronze;deutlich 0 2
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 deutschen;Eishockey;Auswahl;erleben;Demütigung 1 2
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 deutsch;Final;Traum;platzen 0 2
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 deutschen;Mannschaft;verpasst;Einzug;Finale 0 2
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 DEB;Team;vergeben;Chance;aufs;WM;Finale 1 2
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 Eishockey;WM;USA;stark;DEB;Team 2 2
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 Eishockey;WM;USA;zeigen;DEB;Team;Grenze 2 0
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 tun;brutal;weh;Deutscher;Traum;historisch;WM;Medaille;platzen 1 2
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 Ausgeschieden;fertigen 0 2
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 Eishockey;WM;Deutschland;verlieren;Halbfinale;Finnland 2 0
03/06/2021 ['Eishockey' 'WM'] 06/06/2021 Final;Traum;platzen;Deutschland;verlieren;sensationell;Leistung;Finnland 0 2
03/06/2021 ['Eishockey' 'WM'] 07/06/2021 Kanada;27;Mal;Weltmeister 0 2
03/06/2021 ['Eishockey' 'WM'] 07/06/2021 Kanada;siegen;sensationell;Eishockey;WM 2 2
03/06/2021 ['Eishockey' 'WM'] 08/06/2021 Experte;glauben;trotzen;bitter;Pleite;deutsch;Eishockey;Geschichte 1 2
03/06/2021 ['Burdecki' 'Evelyn'] 04/06/2021 Evelyn;Burdecki;treiben;Jauch;Wahnsinn 2 2
03/06/2021 ['Hannover'] 01/06/2021 Hannover;36;Jähriger;Streit;Lebensgefahr 1 0
03/06/2021 ['Hannover'] 02/06/2021 Gesandte;Konfuzius 0 1
03/06/2021 ['Hannover'] 03/06/2021 Mitte;Hannover;Mann;Porsche;fahrend;Auto;heraus;erschießen 1 1
03/06/2021 ['Hannover'] 04/06/2021 SEK;stürmen;Wohnung;nahe;Hannover 1 0
03/06/2021 ['Hannover'] 04/06/2021 SEK;stürmen;Wohnung;nahe;Hannover 1 0
03/06/2021 ['Hannover'] 04/06/2021 Ermittlung;tödlich;Schuß;Hannover;Celle 1 0
03/06/2021 ['Hannover'] 04/06/2021 Mann;fahrend;Auto;erschießen 0 1
03/06/2021 ['Hannover'] 05/06/2021 Mann;Porsche;mitten;Hannover;erschießen;Verdächtiger;Polizei;stellen 1 1
03/06/2021 ['Hannover'] 05/06/2021 E;Bus;Depot;Hannover;brennen;Feuerwehr;Großeinsatz;Millionenschaden 1 1
03/06/2021 ['Hannover'] 06/06/2021 Elektrobus;Depot;brennen;komplett 0 1
03/06/2021 ['Hannover'] 08/06/2021 Mutmaßlicher;Schütze;Hannover;stellen 1 1
03/06/2021 ['Hannover'] 08/06/2021 Mann;Porsche;mitten;Hannover;erschießen;mutmaßlich;Todesschütze;stellen;Polizei 1 0
03/06/2021 ['Brandenburg'] 01/06/2021 Tote;Brandenburg;entdecken;Mordkommission;ermitteln 1 0
03/06/2021 ['Brandenburg'] 02/06/2021 lässt;Prozess;Wiedervereinigung;vorantreiben 0 1
03/06/2021 ['Brandenburg'] 03/06/2021 Ost;Regierungschefs;nehmen;Abschied;Angela;Merkel 0 1
03/06/2021 ['Brandenburg'] 08/06/2021 Pandemie;Sport 0 1
03/06/2021 ['Brandenburg'] 13/06/2021 Schweiz;Unentschieden 0 1
03/06/2021 ['Welt'] 01/06/2021 WHO;benennen;Virusvarianten;Diskriminierung;verhindern 0 1
03/06/2021 ['Welt'] 01/06/2021 Frau;Kind;Geschichte 0 1
03/06/2021 ['Welt'] 01/06/2021 Gefangene;suchen;zielen;Frau;einsam 0 1
03/06/2021 ['Welt'] 01/06/2021 Fond;Welt;lukrativ;Sparidee;fürs;Leben 1 0
03/06/2021 ['Welt'] 01/06/2021 Waffe;mindestens;Krieg 0 1
03/06/2021 ['Welt'] 01/06/2021 lärmend;Schweigen;Nummer;Welt 1 0
03/06/2021 ['Welt'] 01/06/2021 fantastische;Welt;Fledermäuse 1 0
03/06/2021 ['Welt'] 01/06/2021 ARD;ZDF;berichten;Mensch;erziehen 0 1
03/06/2021 ['Welt'] 01/06/2021 WHO;führen;griechische;Name;Virusmutanten 0 1
03/06/2021 ['Welt'] 01/06/2021 Coronavirus;Europa;Welt;Zahl;Überblick 1 0
03/06/2021 ['Welt'] 01/06/2021 Sudoku;Einsteiger 0 1
03/06/2021 ['Welt'] 01/06/2021 Flick;Weltmeister;Macher 1 0
03/06/2021 ['Welt'] 01/06/2021 Osakas;Presse;Boykott;eskalieren;Rückzug 0 1
03/06/2021 ['Welt'] 01/06/2021 wichtig;Datum;Corona;Lage 0 1
03/06/2021 ['Welt'] 01/06/2021 muslimische;Welt;feiern;Erfolg 1 0
03/06/2021 ['Welt'] 01/06/2021 Geschäft;Tod 0 1
03/06/2021 ['Welt'] 01/06/2021 Sache;Alarmglocken;schrill;lassen 0 1
03/06/2021 ['Welt'] 01/06/2021 Körpersprache;Gymnastik;Ausdruck;Gefühl 0 1
03/06/2021 ['Welt'] 01/06/2021 WHO;taufen;Coronavirus;Variante 0 1
03/06/2021 ['Welt'] 01/06/2021 Autoindustrie;Coronakrise;überwinden 0 1
03/06/2021 ['Welt'] 01/06/2021 OECD;heben;Prognose;Weltwirtschaft 1 0
03/06/2021 ['Welt'] 01/06/2021 interaktiv;Weltkarte;sehen;Lage;derzeit;Reiseländern 1 0
03/06/2021 ['Welt'] 01/06/2021 Fernsehen;leiden;tot 0 1
03/06/2021 ['Welt'] 01/06/2021 Weltreich;Verhältnis;leben 1 1
03/06/2021 ['Welt'] 01/06/2021 treffen;Mensch;Rollstuhl;Dennoch;5000;Dollar 0 1
03/06/2021 ['Welt'] 01/06/2021 Sinovac;Impfstoff;erhalten;WHO;Zulassung 0 1
03/06/2021 ['Welt'] 01/06/2021 bewundern;Verwundbarkeit 0 1
03/06/2021 ['Welt'] 01/06/2021 Manchmal;liegen;nachts;wach;Mensch 0 1
03/06/2021 ['Welt'] 01/06/2021 erkennen;wichtig 0 1
03/06/2021 ['Welt'] 01/06/2021 Pol;beginnen;7;Juni;Impfungen;Kind 0 1
03/06/2021 ['Welt'] 01/06/2021 Osaka;erhalten;Zuspruch;Rückzug;Eklat 0 1
03/06/2021 ['Welt'] 01/06/2021 Südkorea;präsentieren;Weltraumrakete 1 1
03/06/2021 ['Welt'] 02/06/2021 Ausschluss;Weltklubs;Champions;League;Woche 1 0
03/06/2021 ['Welt'] 01/06/2021 70;Geländewagen;Welt 1 1
03/06/2021 ['Welt'] 01/06/2021 Welt;retten 1 0
03/06/2021 ['Welt'] 01/06/2021 nan 0 1
03/06/2021 ['Welt'] 01/06/2021 Island;CO₂;Müllkippe 0 1
03/06/2021 ['Welt'] 02/06/2021 Deutschland;stehen;WM;Viertelfinale 0 1
03/06/2021 ['Welt'] 01/06/2021 Neuer;Vogelgrippe;Virus;infizieren;Mensch 0 1
03/06/2021 ['Welt'] 01/06/2021 bizarr;Lagune;trocken;Wüste;Welt;Video 1 1
03/06/2021 ['Welt'] 02/06/2021 Weltgrößter;Fleischkonzern;JBS;Hackern;lahmlegen 1 0
03/06/2021 ['Welt'] 02/06/2021 Jair;Bolsonaro;holen;Fußballturnier;trotzen;Kritik;Brasilien 0 1
03/06/2021 ['Welt'] 02/06/2021 wandernd;Clown 0 1
03/06/2021 ['Welt'] 02/06/2021 Krise;kosten;126;Million;Job;weltweit 0 1
03/06/2021 ['Welt'] 02/06/2021 Sarafina;Wollny;verraten;Name;Zwilling 0 1
03/06/2021 ['Welt'] 03/06/2021 W;H;Auden;Kriegstourist;China 0 1
03/06/2021 ['Welt'] 02/06/2021 Norwegen;spenden;Million;Impfdosen;arm;Land 0 1
03/06/2021 ['Welt'] 02/06/2021 Bündnis;Druck;reichen;Land 0 1
03/06/2021 ['Welt'] 02/06/2021 Hört 0 1
03/06/2021 ['Welt'] 02/06/2021 Tschechien;Herz;EU;Raumfahrtindustrie 0 1
03/06/2021 ['Welt'] 02/06/2021 Naomi;Osaka;täglich;Kampf 0 1
03/06/2021 ['Welt'] 02/06/2021 Wirbel;nächst;DEB;Schlacht 0 1
03/06/2021 ['Welt'] 04/06/2021 hässlichste;Hose;Welt;gleichzeitig;beliebt 1 0
03/06/2021 ['Welt'] 02/06/2021 Stunde;Ufologen;kommen;denken;verlieren;Verstand 0 1
03/06/2021 ['Welt'] 03/06/2021 Boateng;Verteidiger;EM;Aufgebot;stehen 0 1
03/06/2021 ['Welt'] 03/06/2021 meist;Hoffnung;Müller;Interview;Spiel 0 1
03/06/2021 ['Welt'] 02/06/2021 hart;Duell;Naomi;Osaka 0 1
03/06/2021 ['Welt'] 04/06/2021 Tod;nennen;Tyrannchen 0 1
03/06/2021 ['Welt'] 05/06/2021 Deutschland;lässt;Chance;Finnland;treffen;erneut 0 1
03/06/2021 ['Welt'] 02/06/2021 Mark;van;Bommel;Trainer;Wolfsburg 0 1
03/06/2021 ['Welt'] 02/06/2021 Corona;vernichten;100;Million;Job 0 1
03/06/2021 ['Welt'] 02/06/2021 Harte;Zeit;Wanderarbeiter 0 1
03/06/2021 ['Welt'] 02/06/2021 Matthias;Steiner;sprechen;Doku;Träne;Foto;Welt 1 0
03/06/2021 ['Welt'] 03/06/2021 Hälfte;erwachsen;Brite;vollständig;impfen 0 1
03/06/2021 ['Welt'] 03/06/2021 926;laufen;Länderspiel;Müller;Hummels 0 1
03/06/2021 ['Welt'] 04/06/2021 Unwürdig;billigen;Lukas;Podolski;Ärger;Luft 0 1
03/06/2021 ['Welt'] 03/06/2021 Abschied;kritisieren;Rummenigge;Alaba 0 1
03/06/2021 ['Welt'] 03/06/2021 Westdeutschland;Welt;Ordnung 1 0
03/06/2021 ['Welt'] 03/06/2021 NASA;planen;Venus;Mission 0 1
03/06/2021 ['Welt'] 03/06/2021 Fluggesellschaften;fordern;internationale;Reise;Ungeimpfte 0 1
03/06/2021 ['Welt'] 03/06/2021 Ältestes;Model;Welt;denken;Rente 1 1
03/06/2021 ['Welt'] 06/06/2021 brauchen;groß;Genie;Welt 1 0
03/06/2021 ['Welt'] 03/06/2021 Weltmeister;nehmen;DFB;Team;Sorge 1 1
03/06/2021 ['Welt'] 03/06/2021 Orsted;groß;grün;Energiekonzern 0 1
03/06/2021 ['Welt'] 03/06/2021 Livestream;Weltfrieden 1 0
03/06/2021 ['Welt'] 03/06/2021 NASA;wenden;Venus 0 1
03/06/2021 ['Welt'] 04/06/2021 Projekt;Sohn 0 1
03/06/2021 ['Welt'] 03/06/2021 COVID;19;Spezial;03;06;2021 0 1
03/06/2021 ['Welt'] 03/06/2021 Bild;Tag;Fußball;Gewalt 0 1
03/06/2021 ['Welt'] 04/06/2021 Russlands;Präsident;Sputnik;V;Impftourismus;frei 0 1
03/06/2021 ['Welt'] 04/06/2021 rastlos;Virtuosin 0 1
03/06/2021 ['Welt'] 03/06/2021 Europa;Welt;erzählen 1 0
03/06/2021 ['Welt'] 06/06/2021 400;Prozent;Trinkgeld;New;York;kurze;Ära;Großzügigkeit 0 1
03/06/2021 ['Welt'] 04/06/2021 Liebes;Comeback;Plagiatsvorwürfe 0 1
03/06/2021 ['Welt'] 04/06/2021 Arktis;drohen;dramatische;Eisschmelze 0 1
03/06/2021 ['Welt'] 04/06/2021 Schaulust;Respekt;Bild;Amazonas 0 1
03/06/2021 ['Welt'] 04/06/2021 Verlogenheit;Influencer;stören;Follower 0 1
03/06/2021 ['Welt'] 07/06/2021 Leyens;Klimafestung;Provokation;Putin;Erdogan 0 1
03/06/2021 ['Welt'] 04/06/2021 WHO;warnen;Pandemie;Welle;Afrika 0 1
03/06/2021 ['Welt'] 04/06/2021 Unternehmen;Preis;erhöhen 0 1
03/06/2021 ['Welt'] 04/06/2021 Zwergtintenfische;fliegen;All 0 1
03/06/2021 ['Welt'] 04/06/2021 unvergleichlich;Weg;Muhammad;Ali 0 1
03/06/2021 ['Welt'] 05/06/2021 Merkel;dringen;Klimaschutz 0 1
03/06/2021 ['Welt'] 04/06/2021 Moment;fürs;Briefmarkenalbum 0 1
03/06/2021 ['Welt'] 04/06/2021 bisschen;Lava 0 1
03/06/2021 ['Welt'] 04/06/2021 Milliardär;neu;FIS;Präsident 0 1
03/06/2021 ['Welt'] 05/06/2021 Indien;stehen;Lockerungen;Hotspot;Region 0 1
03/06/2021 ['Welt'] 04/06/2021 deutsch;Eishockey;wund 0 1
03/06/2021 ['Welt'] 04/06/2021 Johan;Eliasch;neu;Präsident;Ski;Weltverbands;FIS 1 0
03/06/2021 ['Welt'] 04/06/2021 Jakobswege;Deutschland 0 1
03/06/2021 ['Welt'] 04/06/2021 Strängen;fertigen;Putin;keilen;Nord;Stream;2;Rede;USA 0 1
03/06/2021 ['Welt'] 04/06/2021 Fitness;Star;Stephania;Gómez;29;Corona;sterben 0 1
03/06/2021 ['Welt'] 07/06/2021 Centre;Pompidou;ökologisch;Skandal 0 1
03/06/2021 ['Welt'] 05/06/2021 Microsoft;blenden;Tank 0 1
03/06/2021 ['Welt'] 09/06/2021 180;000;Dollar;verraten;Hacker;Leute 0 1
03/06/2021 ['Welt'] 06/06/2021 Weitsprung;Weltmeisterin;Mihambo;verlängern;Siegesserie 1 0
03/06/2021 ['Welt'] 05/06/2021 Welt;schimmernd;Stadt 1 0
03/06/2021 ['Welt'] 05/06/2021 Merkel;2021;bedeutsam;Klimaschutz 0 1
03/06/2021 ['Welt'] 05/06/2021 Mensch;Pandemie;brechen 0 1
03/06/2021 ['Welt'] 05/06/2021 Erde;ex 0 1
03/06/2021 ['Welt'] 05/06/2021 Hamilton;Zuschauer;Perez;Show 0 1
03/06/2021 ['Welt'] 05/06/2021 geworden;Traum 0 1
03/06/2021 ['Welt'] 06/06/2021 Israel;beginnen;Impfung;Zwölf;15;Jährige 0 1
03/06/2021 ['Welt'] 06/06/2021 10;Milliarde;Dollar;Experiment 0 1
03/06/2021 ['Welt'] 05/06/2021 Ziemlich;verrücken;Fisch 0 1
03/06/2021 ['Welt'] 05/06/2021 Handy;Geld;Welt 1 0
03/06/2021 ['Welt'] 06/06/2021 Mensch;impfen 0 1
03/06/2021 ['Welt'] 07/06/2021 zerstören 0 1
03/06/2021 ['Welt'] 10/06/2021 Doppelmoral;tappen;Daimler;BMW;Pinkwashing;Falle 0 1
03/06/2021 ['Welt'] 07/06/2021 vertrieb;blond;Mätresse;teilen;Welt 1 1
03/06/2021 ['Welt'] 05/06/2021 Löwin;Klavier;Martha;Argerich;80 0 1
03/06/2021 ['Welt'] 05/06/2021 Rekord;Kahlschlag;Amazonas 0 1
03/06/2021 ['Welt'] 05/06/2021 produzieren;tonnenweise;CO2;Klima;Killer;einfach;reduzieren 0 1
03/06/2021 ['Welt'] 06/06/2021 Funktioniert;berühmte;Neutralität;Wissenschaft 0 1
03/06/2021 ['Welt'] 06/06/2021 Deutschland;scheitern;unglücklich;Weltmeister;Finnland 1 0
03/06/2021 ['Welt'] 10/06/2021 Eindeutig;Wetteranomalien;echte;Objekt 0 1
03/06/2021 ['Welt'] 07/06/2021 Erneut;Weltkriegsbombe;Baustelle;Halle;finden 1 0
03/06/2021 ['Welt'] 07/06/2021 Weltweiter;Schlag;Drogenhändler 1 0
03/06/2021 ['Welt'] 07/06/2021 Amazon;Gründer;fliegen;All 0 1
03/06/2021 ['Welt'] 10/06/2021 bereiten;einsetzen 0 1
03/06/2021 ['Welt'] 10/06/2021 schnellen;gut;Stand;up;Paddler 0 1
03/06/2021 ['Welt'] 06/06/2021 Boris;Johnson;Gesamte;Weltbevölkerung;2022;impfen 1 0
03/06/2021 ['Welt'] 06/06/2021 RKI;melden;2440;Neuinfektionen 0 1
03/06/2021 ['Welt'] 06/06/2021 El;Salvador;Bitcoin;Zahlungsmittel 0 1
03/06/2021 ['Welt'] 07/06/2021 Moderna;beantragen;EU;Impfstoffzulassung;Jugendliche 0 1
03/06/2021 ['Welt'] 06/06/2021 Boris;Johnson;fordern;Impfung;Weltbevölkerung;2022 1 1
03/06/2021 ['Welt'] 06/06/2021 14;Zivilist;Huthi;Luftangriff;töten 0 1
03/06/2021 ['Welt'] 06/06/2021 Federer;verzichten;French;Open;Achtelfinale 0 1
03/06/2021 ['Welt'] 07/06/2021 nan 0 1
03/06/2021 ['Welt'] 07/06/2021 Chipmangel;treffen;Weltmarktführer 1 0
03/06/2021 ['Welt'] 06/06/2021 Johnson;fordern;Impfung;Weltbevölkerung;2022 1 0
03/06/2021 ['Welt'] 06/06/2021 Welt;brauchen;Kleid 1 0
03/06/2021 ['Welt'] 07/06/2021 rätselhaft;Fall;Christoph;Harting 0 1
03/06/2021 ['Welt'] 06/06/2021 Johnson;fordern;Corona;Impfung 0 1
03/06/2021 ['Welt'] 06/06/2021 Welt;Corona 1 0
03/06/2021 ['Welt'] 06/06/2021 DEB;Team;verlieren;Halbfinale;Finnland 0 1
03/06/2021 ['Welt'] 07/06/2021 Bezos;Bruder;All;fliegen 0 1
03/06/2021 ['Welt'] 07/06/2021 Geld;Welt 1 0
03/06/2021 ['Welt'] 10/06/2021 Impfstoff;Klimaversprechen;Boris;Johnson;Deal;Afrika 0 1
03/06/2021 ['Welt'] 07/06/2021 China;melden;deutlich;Handelswachstum 0 1
03/06/2021 ['Welt'] 09/06/2021 Notzustand 0 1
03/06/2021 ['Welt'] 07/06/2021 Nachwuchs;Meghan;Harry 0 1
03/06/2021 ['Welt'] 07/06/2021 Großbritannien;prüfen;Hersteller;Mix;Impfen 0 1
03/06/2021 ['Welt'] 07/06/2021 Kanada;27;Mal;Weltmeister 1 0
03/06/2021 ['Welt'] 07/06/2021 Umstrittener;Patentschutz 0 1
03/06/2021 ['Welt'] 07/06/2021 Harry;Meghans;Tochter;Lilibet;Diana 0 1
03/06/2021 ['Welt'] 07/06/2021 Deutschland;warnen;KI;Wettrüsten 0 1
03/06/2021 ['Welt'] 09/06/2021 Kind;vertragen;Partnerschaft 0 1
03/06/2021 ['Welt'] 09/06/2021 USA;lockern;Reisewarnung;Deutschland;Einreiseverbot;bleiben 0 1
03/06/2021 ['Welt'] 07/06/2021 Meinung;Welt;Corona 1 0
03/06/2021 ['Welt'] 07/06/2021 Amazon;Gründer;Bezos;20;Juli;Weltall;fliegen;versteigern;Ticket 1 1
03/06/2021 ['Welt'] 07/06/2021 Tochter;Prinz;Harry;Herzogin;Meghan;gebären 0 1
03/06/2021 ['Welt'] 07/06/2021 Kanada;Eishockey;Weltmeister 1 0
03/06/2021 ['Welt'] 07/06/2021 Harry;Meghan;verkünden;Geburt;Tochter;Queen;hocherfreut 0 1
03/06/2021 ['Welt'] 08/06/2021 Silicon;Saxony;Fabrik;Europa;Antwort;Abhängigkeit 0 1
03/06/2021 ['Welt'] 07/06/2021 Sieg;Overtime;Kanada;packend;Finale;Finnland;Eishockey;Weltmeister 1 0
03/06/2021 ['Welt'] 09/06/2021 Goldmünze;Millionensumme;versteigern 0 1
03/06/2021 ['Welt'] 08/06/2021 US-amerikanischen;Staat;Washington;verschenken;Marihuana;Geimpfte 0 1
03/06/2021 ['Welt'] 08/06/2021 Deutschland;schlagen;Lettland;7;1 0 1
03/06/2021 ['Welt'] 10/06/2021 sicher;Verbrechen;Welt 1 0
03/06/2021 ['Welt'] 10/06/2021 Moderna;beantragen;US-amerikanischen;Zulassung;Kind;Jugendliche 0 1
03/06/2021 ['Welt'] 09/06/2021 Tammam;Azzams;Collage;Exil 0 1
03/06/2021 ['Welt'] 10/06/2021 Partisanenjagd;Toskana 0 1
03/06/2021 ['Welt'] 10/06/2021 Deutschland;Krise 0 1
03/06/2021 ['Welt'] 12/06/2021 bitter;Niederlage;Westen 0 1
03/06/2021 ['Welt'] 09/06/2021 Cyber;Armee;Nahost;Diffamierung;Waffe 0 1
03/06/2021 ['Welt'] 09/06/2021 08;06;2021 0 1
03/06/2021 ['Welt'] 08/06/2021 Fifa;ziehen;s;Paris 0 1
03/06/2021 ['Welt'] 08/06/2021 Mensch;Schleimpilz;lernen 0 1
03/06/2021 ['Welt'] 09/06/2021 Shift;Leben;digital;Welt 1 0
03/06/2021 ['Welt'] 09/06/2021 Türkei;leiden;Meeresrotz 0 1
03/06/2021 ['Welt'] 08/06/2021 Hamiltons;magisch;Fehlgriff 0 1
03/06/2021 ['Welt'] 12/06/2021 EM;versetzen;feindlich;Umgebung 0 1
03/06/2021 ['Welt'] 08/06/2021 blau;wund;Ozean;Erde 0 1
03/06/2021 ['Welt'] 08/06/2021 Brücke;bauen;islamisch;Welt 1 0
03/06/2021 ['Welt'] 08/06/2021 Einwanderungskrise;USA;spitzen 0 1
03/06/2021 ['Welt'] 08/06/2021 Siebzig;geliftet;vierzig;Darling 0 1
03/06/2021 ['Welt'] 10/06/2021 Reichste;Reiche 0 1
03/06/2021 ['Welt'] 08/06/2021 17;Operation;retten 0 1
03/06/2021 ['Welt'] 08/06/2021 Kampf;dünn;Luft;Chimborazo 0 1
03/06/2021 ['Welt'] 08/06/2021 Weltweit;Webseiten;erreichbar 1 0
03/06/2021 ['Welt'] 09/06/2021 Grill;3000;Euro 0 1
03/06/2021 ['Welt'] 11/06/2021 verbal;Explosion;Seufzen 0 1
03/06/2021 ['Welt'] 08/06/2021 China;lässt;Land;Corona;Impfungen;Kind 0 1
03/06/2021 ['Welt'] 09/06/2021 18;9;Million;Dollar;Goldmünze 0 1
03/06/2021 ['Welt'] 08/06/2021 Gericht;bestätigen;lebenslang;Haft;Mladic 0 1
03/06/2021 ['Welt'] 08/06/2021 Bayern;Rekordmann;baggern;Mega;Star 0 1
03/06/2021 ['Welt'] 08/06/2021 Mega;Razzia;enden;800;Festnahme 0 1
03/06/2021 ['Welt'] 10/06/2021 Weltbevölkerung;wachsen;langsam 1 0
03/06/2021 ['Welt'] 08/06/2021 Dino;Art;Australien;bekommen;Name 0 1
03/06/2021 ['Welt'] 08/06/2021 Wiedergeburt;Welt 1 0
03/06/2021 ['Welt'] 08/06/2021 Klavier;reisen;Welt 1 0
03/06/2021 ['Welt'] 08/06/2021 Weltweit;Webseiten;zeitweise;erreichbar 1 0
03/06/2021 ['Welt'] 09/06/2021 Niederlande;heben;PCR;Testpflicht;Einreise;Deutschland 0 1
03/06/2021 ['Welt'] 09/06/2021 Weltweit;Websites;vorübergehen;erreichbar 1 0
03/06/2021 ['Welt'] 09/06/2021 Welle;Angstmache 0 1
03/06/2021 ['Welt'] 09/06/2021 Superjacht;zeigen;Johnson;Widersprüchlichkeit 0 1
03/06/2021 ['Welt'] 09/06/2021 Vettel;erklären;Form;Explosion 0 1
03/06/2021 ['Welt'] 09/06/2021 Stadt;leben 0 1
03/06/2021 ['Welt'] 12/06/2021 Djokovic;triumphieren;Nadal 0 1
03/06/2021 ['Welt'] 09/06/2021 Zehnlingsgeburt 0 1
03/06/2021 ['Welt'] 09/06/2021 Prinz;Charles;reagieren;Geburt;Lilibet 0 1
03/06/2021 ['Welt'] 10/06/2021 Stadt;Ranking;Pazifik;liegen;Paradies 0 1
03/06/2021 ['Welt'] 09/06/2021 Joe;Biden;Rohr;Welt 1 0
03/06/2021 ['Welt'] 09/06/2021 Pazifik;liegen;Paradies 0 1
03/06/2021 ['Welt'] 12/06/2021 Papier;Nummer;eins 0 1
03/06/2021 ['Welt'] 10/06/2021 Favorit;Geheimtipps;Fußball;EM;Corona;Verletzung;letzte;Chance 0 1
03/06/2021 ['Welt'] 12/06/2021 Boris;Johnson;zweifeln;komplett;Lockerung;21;Juni 0 1
03/06/2021 ['Welt'] 12/06/2021 Ungarn;Pol;offenbaren;Vorbild 0 1
03/06/2021 ['Welt'] 10/06/2021 Spieleplattform;4;Trend;Booster;Gefahr;Neobroker 0 1
03/06/2021 ['Welt'] 11/06/2021 Westen;retten;freie;Welt;Check 1 0
03/06/2021 ['Welt'] 11/06/2021 Russland;entziehen;ARD;Journalist;Akkreditierung 0 1
03/06/2021 ['Welt'] 11/06/2021 Hielten;mein;kontrollieren;Luftraum;identifizieren 0 1
03/06/2021 ['Welt'] 12/06/2021 entlegen;Urlaubsinsel;Welt 1 0
03/06/2021 ['Welt'] 10/06/2021 USA;500;Million;Impfdosen;Land;spenden 0 1
03/06/2021 ['Welt'] 12/06/2021 Djokovic;verneigen;Nadal 0 1
03/06/2021 ['Welt'] 10/06/2021 Nadals;unfassbare;Serie;enden;folgenlos 0 1
03/06/2021 ['Welt'] 11/06/2021 G7;Staat;planen;Spende;Milliarde;Impfdosen 0 1
03/06/2021 ['Welt'] 10/06/2021 Joe;Biden;bitten;Schwur 0 1
03/06/2021 ['Welt'] 12/06/2021 Gefrusteter;Zverev;hadern;Paris 0 1
03/06/2021 ['Welt'] 10/06/2021 Biden;sehen;Wendepunkt;Weltgeschichte 1 0
03/06/2021 ['Welt'] 10/06/2021 Akropolis;Beton;Promenade;sorgen;Ärger 0 1
03/06/2021 ['Welt'] 10/06/2021 wissenschaftlich;Sensation;Welt;Ozean 1 1
03/06/2021 ['Welt'] 10/06/2021 Mann;Leipzig;sterben;Impfung;Astrazeneca;Biden;kaufen;Impfstoff;Welt 1 0
03/06/2021 ['Welt'] 10/06/2021 Wolf;Kaschmirpelz;Französischer;Luxus;Unternehmer;reich;Mensch;Welt 1 1
03/06/2021 ['Welt'] 12/06/2021 Trump;Trauma;Zeitenwende;auslösen 0 1
03/06/2021 ['Welt'] 11/06/2021 umarmen;Freund 0 1
03/06/2021 ['Welt'] 12/06/2021 obwohl;fehlen;Trump;China;befeuern;Plan;alt;Industrie;Nation 0 1
03/06/2021 ['Welt'] 11/06/2021 verirrt;Bürger;versöhnen;Welt 1 1
03/06/2021 ['Welt'] 11/06/2021 Plötzlich;erfüllen;merkwürdig;Event;Sehnsucht 0 1
03/06/2021 ['Welt'] 13/06/2021 G;7;Staat;fordern;WHO;Untersuchung;Corona;Ursprung 0 1
03/06/2021 ['Welt'] 13/06/2021 ZDF;weisen;Kritik;Übertragung;Kollaps;Eriksen 0 1
03/06/2021 ['Welt'] 11/06/2021 Nato;Beistandspflicht;Weltraum;ausweiten 1 0
03/06/2021 ['Welt'] 11/06/2021 Neuinfektionen;Russland;steigen;deutlich 0 1
03/06/2021 ['Welt'] 11/06/2021 Echt 0 1
03/06/2021 ['Welt'] 11/06/2021 Reality;TV;dazulernen 0 1
03/06/2021 ['Welt'] 11/06/2021 Italien;Notenbank;erhöhen;Prognose 0 1
03/06/2021 ['Welt'] 11/06/2021 French;Open;Finalistin;51;Mal;probieren 0 1
03/06/2021 ['Welt'] 11/06/2021 Förderung;Norwegen;hässlicher;Kampf;Öl;entbrennen 0 1
03/06/2021 ['Welt'] 11/06/2021 talentiert;Türke;katapultieren;Ex;Freiburger;Wucht;Weltspitze 1 0
03/06/2021 ['Welt'] 12/06/2021 bitter;Niederlage;Westen 0 1
03/06/2021 ['Welt'] 12/06/2021 Merkel;Anführerin;frei;Welt 1 0
03/06/2021 ['Welt'] 13/06/2021 G7;halten;China;Seidenstraße 0 1
03/06/2021 ['Welt'] 12/06/2021 Million;Impfdosen;Johnson;Johnson;unbrauchbar 0 1
03/06/2021 ['Welt'] 12/06/2021 Industriestaaten;Milliarde;Impfdosen;spenden 0 1
03/06/2021 ['Welt'] 12/06/2021 Pandemie;EM;Absurdität 0 1
03/06/2021 ['Welt'] 12/06/2021 G7;kehren;Multilateralismus 0 1
03/06/2021 ['Welt'] 12/06/2021 Wagner;erkämpfen;historisch;WM;Gold 0 1
03/06/2021 ['Welt'] 13/06/2021 Allianz;China 0 1
03/06/2021 ['Welt'] 13/06/2021 Weltraumflug;Jeff;Bezos;28;Million;Dollar;versteigern 1 1
03/06/2021 ['Welt'] 13/06/2021 Frau;50;sexy 0 1
03/06/2021 ['Welt'] 12/06/2021 McDonald;s;Opfer;Hackerangriff 0 1
03/06/2021 ['Welt'] 13/06/2021 Alm;Welt 1 0
03/06/2021 ['Welt'] 12/06/2021 Steuer 0 1
03/06/2021 ['Welt'] 13/06/2021 Zinn;Welt;Umweltproblem;Ort 1 0
03/06/2021 ['Welt'] 13/06/2021 kranken;Welt;Empörung;TV;Bild;Zusammenbruch;Eriksen 1 0
03/06/2021 ['Welt'] 13/06/2021 Deutschland;Löw;Nation 0 1
03/06/2021 ['Welt'] 13/06/2021 Zementplatten;Parthenon 0 1
03/06/2021 ['Welt'] 13/06/2021 Sterling;bringen;England;Kurs;Kroatien;enttäuschen 0 1
03/06/2021 ['Welt'] 13/06/2021 Ema;Experte;sprechen;Zurückhaltung;AstraZeneca 0 1
03/06/2021 ['Welt'] 13/06/2021 Raubbau;Sumatra 0 1
03/06/2021 ['Welt'] 13/06/2021 China;zweifeln;Führungsrolle;G7;Staat 0 1
03/06/2021 ['Welt'] 13/06/2021 Kriegszeiten;Situation 0 1
03/06/2021 ['Welt'] 13/06/2021 Senator;Biden;scheitern 0 1
03/06/2021 ['Welt'] 13/06/2021 vergewaltigen 0 1
03/06/2021 ['Welt'] 13/06/2021 Gülcan;Kamp;erstmals;schwanger 0 1
03/06/2021 ['Welt'] 13/06/2021 männliche;Fruchtbarkeit;Gefahr 0 1
03/06/2021 ['Welt'] 13/06/2021 Lawine;stillen 0 1
03/06/2021 ['Welt'] 14/06/2021 Westen;China;ausstechen;schnell 0 1
03/06/2021 ['Welt'] 14/06/2021 Atomwaffen;einsatzbereit 0 1
03/06/2021 ['Welt'] 14/06/2021 Djokovic;gewinnen;Thriller;Mega;Comeback 0 1
03/06/2021 ['Welt'] 14/06/2021 Merkel;Klassentreffen;Mächtige 0 1
03/06/2021 ['Welt'] 14/06/2021 Barça;krönen;perfekte;Saison;Champions;League;Sieg 0 1
03/06/2021 ['Welt'] 14/06/2021 teuer;Straße;Welt;treiben;China;Land;Europa;Ruin 1 1
03/06/2021 ['Welt'] 14/06/2021 Apple;zeigen;Kritiker;innen;Gendern;normal;Sache;Welt 1 0
03/06/2021 ['Federer' 'Roger'] 01/06/2021 Maestro;versuchen 0 2
03/06/2021 ['Federer' 'Roger'] 05/06/2021 Schweden;stoischer;Tennislegende 0 2
03/06/2021 ['Federer' 'Roger'] 06/06/2021 Federer;ziehen;French;Open 1 2
03/06/2021 ['Federer' 'Roger'] 06/06/2021 Roger;Federer;rätseln 2 2
03/06/2021 ['Federer' 'Roger'] 06/06/2021 Koepfer;Federer;vorbei 1 2
03/06/2021 ['Federer' 'Roger'] 06/06/2021 Einzug;Achtelfinale;Tennis;Star;Federer;steigen;French;Open 1 2
03/06/2021 ['Federer' 'Roger'] 06/06/2021 Struff;zähmen;Gegner 0 2
03/06/2021 ['Federer' 'Roger'] 07/06/2021 Zverev;mühelos;Viertelfinale;Paris 0 2
03/06/2021 ['Bettina' 'Wulff'] 03/06/2021 Anlauf;Bettina;Christian;Wulff 2 0
03/06/2021 ['Bettina' 'Wulff'] 03/06/2021 Wulffs;mal 1 2
03/06/2021 ['Bettina' 'Wulff'] 03/06/2021 Freude;Studentenlebens 0 2
03/06/2021 ['Bettina' 'Wulff'] 04/06/2021 Christian;Bettina;Wulff;Mal;paaren 2 0
03/06/2021 ['24h' 'Nürburgring'] 07/06/2021 Highlights;24h;Rennen;Nürburgring 2 0
03/06/2021 ['Wahrheit'] 01/06/2021 Rentenpolitik;s;Ausrede 0 1
03/06/2021 ['Wahrheit'] 03/06/2021 Hoffnung;Tristesse 0 1
03/06/2021 ['Wahrheit'] 03/06/2021 Zahnarzt;warnen;Pflegetipps;Zahn;Wahrheit;schaden 1 0
03/06/2021 ['Wahrheit'] 05/06/2021 Lukaschenko;Fälschung;Wahrheit;feiern 1 0
03/06/2021 ['Wahrheit'] 05/06/2021 Wahrheit;irgendwo;draußen 1 0
03/06/2021 ['Wahrheit'] 05/06/2021 UFO;Bericht;USA;Wahrheit;irgendwo;draußen 1 0
03/06/2021 ['Wahrheit'] 10/06/2021 Mehrheit;Wahrheit 1 0
03/06/2021 ['Wahrheit'] 06/06/2021 UFO;Bericht;Wahrheit;draußen 1 0
03/06/2021 ['Wahrheit'] 06/06/2021 Vergessen;Wachs;Haushaltsmittel;halten;Fuge;sauber 0 1
03/06/2021 ['Wahrheit'] 08/06/2021 Bundesliga;Star;falsch;Identität 0 1
03/06/2021 ['Wahrheit'] 08/06/2021 17;Operation;retten 0 1
03/06/2021 ['Wahrheit'] 08/06/2021 wahr;Silas 0 1
03/06/2021 ['Wahrheit'] 09/06/2021 Dichtung;Wahrheit 1 0
03/06/2021 ['Wahrheit'] 11/06/2021 Prinz;Harry;prüfen;Klage;BBC 0 1
03/06/2021 ['Wahrheit'] 11/06/2021 Frau;Regel;helfen;Frau;steigern;Empörung;Mann 0 1
03/06/2021 ['24h' 'Rennen'] 07/06/2021 Highlights;24h;Rennen;Nürburgring 2 0
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Demutsmanöver 0 2
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Marx;setzen;Maßstab;Umgang;Missbrauchs;Affäre 1 2
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kardinal;Marx;bieten;Papst;Rücktritt 2 0
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Reaktion;Rücktrittsgesuch;Kardinal;Marx;Führt;hoffentlich;Beben 2 0
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Brief;Kardinal;Marx;Wortlaut 2 1
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kirche;Krise;lernen 0 2
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 amtsmüde;nerven 0 2
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kardinal;Marx;bieten;Rücktritt 2 2
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Reinhard;Marx;Kollege;Vorschrift 1 2
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Lese;Brief;Kardinal;Marx;Wortlaut 2 1
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Stress;16;Cent 0 2
04/06/2021 ['Kardinal' 'Marx'] 09/06/2021 Görlach;Global;Papst;Benedikt;Kardinal;Marx;Rücktritt;identisch;Motiv 2 0
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Marx;Amtsverzicht;Aufruf 1 2
04/06/2021 ['Kardinal' 'Marx'] 06/06/2021 bedeuten;Marx;persönlich;Rücktrittsangebot 1 2
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kardinal;Marx;bieten;Papst;Rücktritt 2 1
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Weg 0 2
04/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Meinung;Kardinal;Reinhard;Marx;Rücktritt;Symbol 2 0
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Schavan;hoffen;Marx;Rücktrittsgesuch;Beben;Kirche 1 2
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Aufruf;Umsturz 0 2
04/06/2021 ['Kardinal' 'Marx'] 06/06/2021 Kardinal;Woelki;denken;Rücktritt 1 2
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Kirche;groß;Bedrohung 0 2
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Alarmsignal;katholische;Kirche 0 2
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Vieldeutig;Abgang 0 2
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Kardinal;Marx;bieten;Papst;Rücktritt 2 2
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 04;06;2021 0 2
04/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Meinung;Rücktritt;Symbol 0 2
04/06/2021 ['Kardinal' 'Marx'] 06/06/2021 letzt;Volkskirche 0 2
04/06/2021 ['Kardinal' 'Marx'] 06/06/2021 Stein 0 2
04/06/2021 ['Kardinal' 'Marx'] 06/06/2021 Kardinal;Woelki;denken;ans;Aufhören 1 2
04/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Mach;Papst;lehnen;Rücktritt;Kardinal;Marx 2 1
04/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Marx;rechnen;Papst 1 2
04/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Geh;Reinhard 0 2
04/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Kardinal;Marx;fügen;Papst 2 2
04/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Papst;lehnen;Rücktritt;Kardinal;Marx 2 2
04/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Bruder;mach 0 2
04/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Franziskus;Brief;Marx;Wortlaut 1 2
04/06/2021 ['Kardinal' 'Marx'] 09/06/2021 stark 0 2
04/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Marx;Antwort;Papst;Franziskus;Wortlaut 1 2
04/06/2021 ['Kardinal' 'Marx'] 09/06/2021 Benedikt;Marx;Gleicher;Rücktrittsgrund 1 2
04/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Überraschender;Brief;Papst;lehnen;Rücktritt;Kardinal;Marx 2 0
04/06/2021 ['Kardinal' 'Marx'] 11/06/2021 weitermachen 0 2
04/06/2021 ['Kardinal' 'Marx'] 11/06/2021 Papst;stützen;Marx;Sinnsuche;gefährlich;Po;Vergrößerung 1 2
04/06/2021 ['Kardinal' 'Marx'] 11/06/2021 inszenieren 0 2
04/06/2021 ['Kardinal' 'Marx'] 11/06/2021 stehen;Rätsel 0 2
04/06/2021 ['Kardinal' 'Marx'] 11/06/2021 10;06;2021 0 2
04/06/2021 ['Kardinal' 'Marx'] 11/06/2021 Theologe;wünschen;deutlich;Papst 0 2
04/06/2021 ['Kardinal' 'Marx'] 13/06/2021 Gehirnwäsche;Name;Gott 0 2
04/06/2021 ['Kardinal' 'Marx'] 13/06/2021 Marx;Rücktrittsgesuch;Aufarbeitung;folgen 1 2
04/06/2021 ['Bayer' 'Corona' 'Regel'] 04/06/2021 Bayer 1 3
04/06/2021 ['Bayer' 'Corona' 'Regel'] 04/06/2021 Corona;Regel;aktuell;Bayer;gelten 3 1
04/06/2021 ['Beitsch' 'Robert'] 04/06/2021 Profitänzer;Robert;Beitsch;verlässt;Show 2 0
04/06/2021 ['Alexander' 'Zverev'] 01/06/2021 100;Prozent;deutschen 0 2
04/06/2021 ['Alexander' 'Zverev'] 01/06/2021 Tennis;Dame;drohen;historische;Tristesse 0 2
04/06/2021 ['Alexander' 'Zverev'] 01/06/2021 Kriminelles;Meinung;sagen 0 2
04/06/2021 ['Alexander' 'Zverev'] 02/06/2021 Ehrgeiz;Etappe 0 2
04/06/2021 ['Alexander' 'Zverev'] 04/06/2021 Zverev;marschieren;lockern;Achtelfinale 1 2
04/06/2021 ['Alexander' 'Zverev'] 03/06/2021 Zverevs;Sieg;perfekt;deutsch 1 2
04/06/2021 ['Alexander' 'Zverev'] 04/06/2021 Zverev;Ziel;Titel;nähern 1 2
04/06/2021 ['Alexander' 'Zverev'] 09/06/2021 Alexander;Zverev;erstmals;Paris;Halbfinale 2 0
04/06/2021 ['Alexander' 'Zverev'] 06/06/2021 Koepfer;Federer;vorbei 0 2
04/06/2021 ['Alexander' 'Zverev'] 09/06/2021 Zverev;erreichen;Halbfinale 1 2
04/06/2021 ['Alexander' 'Zverev'] 07/06/2021 Zverev;mühelos;Viertelfinale;Paris 1 2
04/06/2021 ['Alexander' 'Zverev'] 09/06/2021 verrückt;stoppen;Zverev 1 2
04/06/2021 ['Alexander' 'Zverev'] 08/06/2021 müssten;Angst;Zverev 1 2
04/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Djokovic;triumphieren;Nadal 0 2
04/06/2021 ['Alexander' 'Zverev'] 09/06/2021 Zverevs;Kampf;doppeln;Horror;Bilanz 1 2
04/06/2021 ['Alexander' 'Zverev'] 09/06/2021 Weg;Ziegelsteinen 0 2
04/06/2021 ['Alexander' 'Zverev'] 11/06/2021 Tennisprofi;Alexander;Zverev;Unvollendete 2 0
04/06/2021 ['Alexander' 'Zverev'] 11/06/2021 Zverev;zwingen;Tsitsipas;Halbfinale;entscheidend;Satz 1 2
04/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Zverev;verpasst;Endspiel;Träne;Sieger 1 2
04/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Alexander;Zverev;verpasst;Finaleinzug 2 0
04/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Zverev;verpasst;Finale;Tennis;Drama 1 2
04/06/2021 ['Alexander' 'Zverev'] 12/06/2021 völlig;unerwartet;hinterhältig;Pointe 0 2
04/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Alexander;Zverev;Unvollendete 2 0
04/06/2021 ['Alexander' 'Zverev'] 12/06/2021 Tennisprofi;Alexander;Zverev;bleiben;Unvollendete 2 0
04/06/2021 ['Alexander' 'Zverev'] 14/06/2021 Djokovic;gewinnen;Thriller;Mega;Comeback 0 2
04/06/2021 ['Unwetterwarnung'] 04/06/2021 Starkregen;reißen;Gerüst;Neckar;Arbeiter;sterben;39;Kreis;drohen;schwer;Unwetter 0 1
04/06/2021 ['Unwetterwarnung'] 05/06/2021 Gewitter;Chaos;Mädchen;Blitz;Einschlag;reanimiert;Mensch;NRW;Kiosk;einschließen 0 1
04/06/2021 ['Unwetterwarnung'] 05/06/2021 Alarmstufe;Rot;29;Kreis;drohen;schwer;Unwetter 0 1
04/06/2021 ['Unwetterwarnung'] 06/06/2021 Höchste;Alarmstufe;mehrer;Kreis;drohen;erneut;schwer;Unwetter 0 1
04/06/2021 ['Unwetterwarnung'] 09/06/2021 Höchste;Warnstufe;drohen;schwer;Gewitter;Nacht 0 1
04/06/2021 ['Lakers'] 02/06/2021 spielen;Herz;Stolz 0 1
04/06/2021 ['Lakers'] 04/06/2021 charakterlose;NBA;Champions 0 1
04/06/2021 ['F1'] 05/06/2021 reichen;schnellen 0 1
04/06/2021 ['NRW' 'Unwetter'] 04/06/2021 30;Minute;Regen;strömen;Wasser;Straße;Unwetter;fluten;NRW;Ort 2 1
04/06/2021 ['Friederike' 'Mayröcker'] 04/06/2021 Tod;nennen;Tyrannchen 0 2
04/06/2021 ['Friederike' 'Mayröcker'] 04/06/2021 Schreiben;Tod 0 2
04/06/2021 ['Friederike' 'Mayröcker'] 04/06/2021 rastlos;Virtuosin 0 2
04/06/2021 ['Friederike' 'Mayröcker'] 04/06/2021 Friederike;Mayröcker;tot 2 1
04/06/2021 ['Friederike' 'Mayröcker'] 05/06/2021 Grande;Dame;Literatur;Friederike;Mayröcker;tot 2 0
04/06/2021 ['Angels' 'No'] 04/06/2021 No;Angels;feiern;Comeback;exklusiv;Live;Konzert 2 0
04/06/2021 ['Angels' 'No'] 05/06/2021 Jubiläumsfeier;Comeback 0 2
04/06/2021 ['Angels' 'No'] 07/06/2021 Lucy;No;Angels;frischen;verlieben 2 2
05/06/2021 ['Federer' 'Roger'] 01/06/2021 Maestro;versuchen 0 2
05/06/2021 ['Federer' 'Roger'] 05/06/2021 Schweden;stoischer;Tennislegende 0 2
05/06/2021 ['Federer' 'Roger'] 06/06/2021 Federer;ziehen;French;Open 1 2
05/06/2021 ['Federer' 'Roger'] 06/06/2021 Roger;Federer;rätseln 2 2
05/06/2021 ['Federer' 'Roger'] 06/06/2021 Koepfer;Federer;vorbei 1 2
05/06/2021 ['Federer' 'Roger'] 06/06/2021 Einzug;Achtelfinale;Tennis;Star;Federer;steigen;French;Open 1 2
05/06/2021 ['Federer' 'Roger'] 06/06/2021 Struff;zähmen;Gegner 0 2
05/06/2021 ['Federer' 'Roger'] 07/06/2021 Zverev;mühelos;Viertelfinale;Paris 0 2
05/06/2021 ['Essen' 'Rot' 'Weiss'] 06/06/2021 Aufstieg;knapp;verpasst;greifen;RWE;Trainer;Megafon 0 3
05/06/2021 ['Essen' 'Rot' 'Weiss'] 06/06/2021 Aufstieg;knapp;verpasst;greifen;RWE;Trainer;Megaphon 0 3
05/06/2021 ['Jens' 'Spahn'] 02/06/2021 Jens;Spahn;starten;unseriöses;Erbenschutzprogramm 2 0
05/06/2021 ['Jens' 'Spahn'] 01/06/2021 Aha;Lindners;Provokation;reichen;Spahn 1 2
05/06/2021 ['Jens' 'Spahn'] 03/06/2021 Sommerferien;Märchen;Jens;Spahn 2 0
05/06/2021 ['Jens' 'Spahn'] 02/06/2021 Jens;Spahn;eröffnen;Haus;Zukunft 2 0
05/06/2021 ['Jens' 'Spahn'] 01/06/2021 teuer;gefährlich 0 2
05/06/2021 ['Jens' 'Spahn'] 01/06/2021 Erwachsene;Deutschland;impfen 0 2
05/06/2021 ['Jens' 'Spahn'] 01/06/2021 Jens;Spahn;Lothar;Wieler;Corona;Lage;Deutschland 2 2
05/06/2021 ['Jens' 'Spahn'] 02/06/2021 Schwarzer;privat;Altenpflege 0 2
05/06/2021 ['Jens' 'Spahn'] 06/06/2021 Spahn;äußern;Vorwurf;Ministerium;unbrauchbare;Maske;verteilen 1 2
05/06/2021 ['Jens' 'Spahn'] 03/06/2021 Laschet;empören;Spahn;Merz;Rechtsradikale;erklären 1 2
05/06/2021 ['Jens' 'Spahn'] 10/06/2021 Apotheke;erhalten;18;Euro;Honorar;Code;größtenteils;per;Post 0 2
05/06/2021 ['Jens' 'Spahn'] 06/06/2021 Jens;Spahn;wehren;Vorwurf 2 0
05/06/2021 ['Jens' 'Spahn'] 05/06/2021 Schrottmasken;Skandal;reißen;Kritik;Spahn;Menschenverachtend 1 2
05/06/2021 ['Jens' 'Spahn'] 05/06/2021 Spahn;Nutzlos;Maske;Arm;loswerden;dreist;Anstand 1 2
05/06/2021 ['Jens' 'Spahn'] 06/06/2021 SPD;fordern;Konsequenz;Spahn;Vorwurf;unbrauchbarer;Maske 1 2
05/06/2021 ['Jens' 'Spahn'] 07/06/2021 Magdeburger;Farbenspiele 0 2
05/06/2021 ['Jens' 'Spahn'] 06/06/2021 SPD;legen;Jens;Spahn;Rücktritt;nahe 2 0
05/06/2021 ['Jens' 'Spahn'] 06/06/2021 Spahn;korrigieren;Prognose;nacht;unten 1 2
05/06/2021 ['Jens' 'Spahn'] 06/06/2021 Walter;Borjans;fordern;indirekt;Spahns;Entlassung 1 2
05/06/2021 ['Jens' 'Spahn'] 06/06/2021 Maske;bringen;Spahn;Erklärungsnot 1 2
05/06/2021 ['Jens' 'Spahn'] 07/06/2021 Priorisierung;fällen;weg;Betriebsärzte;beginnen;Impfungen 0 2
05/06/2021 ['Jens' 'Spahn'] 07/06/2021 Versuch;Juli;mal 0 2
05/06/2021 ['Jens' 'Spahn'] 07/06/2021 Jens;Spahn;Gegenangriff 2 2
05/06/2021 ['Jens' 'Spahn'] 09/06/2021 Angezählt;Juniorpartner 0 2
05/06/2021 ['Jens' 'Spahn'] 08/06/2021 FDP;fordern;Sonderermittler;Maskenaffäre;Jens;Spahn 2 0
05/06/2021 ['Jens' 'Spahn'] 10/06/2021 Digitaler;Impfnachweis;starten;Deutschland 0 2
05/06/2021 ['Jens' 'Spahn'] 09/06/2021 Jens;Spahn;überfordern;entdecken;SPD 2 0
05/06/2021 ['Jens' 'Spahn'] 09/06/2021 durchschaubares;Ablenkungsmanöver;Klingbeil;greifen;Union;erneut 0 2
05/06/2021 ['Jens' 'Spahn'] 08/06/2021 Skandal;Maske 0 2
05/06/2021 ['Jens' 'Spahn'] 08/06/2021 Vorwurf;Jens;Spahn;häufen 2 2
05/06/2021 ['Jens' 'Spahn'] 08/06/2021 Jens;Spahn;schießen;Maske;Zoff;knallhart;SPD 2 2
05/06/2021 ['Jens' 'Spahn'] 09/06/2021 Bundestagswahl;schützen;Jens;Spahn 2 0
05/06/2021 ['Jens' 'Spahn'] 09/06/2021 Leistung;Gesundheitsministers;unterdurchschnittlich 0 2
05/06/2021 ['Jens' 'Spahn'] 10/06/2021 Digitaler;Impfausweis;Bitte;warten 0 2
05/06/2021 ['Jens' 'Spahn'] 10/06/2021 Schrottmasken;Affäre;Spahn;plötzlich;ungewohnt;emotional 1 2
05/06/2021 ['Jens' 'Spahn'] 10/06/2021 Zahl;Intensivbetten;manipulieren;Rechnungshof;Analyse;nähren;böse;Verdacht 0 2
05/06/2021 ['Jens' 'Spahn'] 10/06/2021 Bundesregierung;Entmachtung;Jens;Spahn;vorbereiten 2 0
05/06/2021 ['Jens' 'Spahn'] 10/06/2021 Blick;Corona;Lage;Großbritannien;finden;Spahn;deutlich;Wort 1 2
05/06/2021 ['Jens' 'Spahn'] 10/06/2021 SPD;Politikerin;giften;Pult;Ziemiak;halten;Stuhl 0 2
05/06/2021 ['Jens' 'Spahn'] 11/06/2021 Skandal;Schublade;Fleischhauer;lästern;Wahlkampfmanöver;SPD 0 2
05/06/2021 ['Jens' 'Spahn'] 11/06/2021 Jens;Spahns;locker;Umgang;Geld 2 0
05/06/2021 ['Jens' 'Spahn'] 11/06/2021 CovPass;Juni;Verfügung;stehen 0 2
05/06/2021 ['Jens' 'Spahn'] 11/06/2021 Jens;Spahn;Maske;Intensivbetten;Vorwurf;stecken 2 2
05/06/2021 ['Jens' 'Spahn'] 13/06/2021 Armin;Laschet;werfen;SPD;schäbig;Umgang;Jens;Spahn 2 0
05/06/2021 ['Jens' 'Spahn'] 12/06/2021 Fährt;SPD;Kampagne;Jens;Spahn;Quatsch 2 0
05/06/2021 ['Jens' 'Spahn'] 13/06/2021 SPD;Krawallpartei 0 2
05/06/2021 ['Jens' 'Spahn'] 14/06/2021 Jens;Spahn;befürworten;Maskenpflicht;draußen 2 0
05/06/2021 ['Jens' 'Spahn'] 14/06/2021 Spahn;stufenweises;Maskenpflicht 1 2
05/06/2021 ['Florian' 'Silbereisen'] 11/06/2021 Zoff;Schlager;Kosmos;Florian;Silbereisen;nehmen;TV;Kollege;Promis;ZDF;Show;weg 2 0
05/06/2021 ['Argerich' 'Martha'] 05/06/2021 Wirbelsturm;poetisch;Zärtlichkeit 0 2
05/06/2021 ['Argerich' 'Martha'] 05/06/2021 Charmanter;Furor 0 2
05/06/2021 ['Argerich' 'Martha'] 05/06/2021 Löwin;Klavier;Martha;Argerich;80 2 0
05/06/2021 ['Argerich' 'Martha'] 05/06/2021 Löwin;Klavier;Martha;Argerich;80 2 0
05/06/2021 ['Tank'] 02/06/2021 Strom;günstig;Schnelllade;Gesetz;Tank;Rast;Monopol;Autobahn;brechen 1 0
05/06/2021 ['Tank'] 02/06/2021 Iran;groß;Marineschiff;sinken 0 1
05/06/2021 ['Tank'] 03/06/2021 Wasserstoff;Auto;knacken;Reichweitenrekord;toppen;Normangaben;50 0 1
05/06/2021 ['Tank'] 04/06/2021 UN;fordern;Zugang;verlassen;Tanker 1 1
05/06/2021 ['Tank'] 05/06/2021 Tank;Bing;verschwinden 1 1
05/06/2021 ['Tank'] 04/06/2021 Spritpreise;2;Euro;Experte;verraten;Tanken;Geld;sparen 1 0
05/06/2021 ['Tank'] 05/06/2021 Microsoft;blenden;Tank 1 0
05/06/2021 ['Tank'] 05/06/2021 Spritpreise;2;Euro;Tanken;Geld;sparen 1 0
05/06/2021 ['Tank'] 06/06/2021 14;Zivilist;Huthi;Luftangriff;töten 0 1
05/06/2021 ['Tank'] 06/06/2021 Tank;trocken 1 0
05/06/2021 ['Tank'] 10/06/2021 Analyse;zeigen;tanken;lohnen 0 1
05/06/2021 ['Tank'] 08/06/2021 Schaumkrone;Öffnung 0 1
05/06/2021 ['Tank'] 08/06/2021 Swimwear;Trend;passt 0 1
05/06/2021 ['Tank'] 09/06/2021 Meilenstein;Kampfjet;erstmals;Flug;unbemannt;Drohne;betanken 0 1
05/06/2021 ['Tank'] 12/06/2021 Umweltamt;fordern;hoch;CO2;Preis 0 1
05/06/2021 ['Tank'] 13/06/2021 Riesiger;Ölteppich;treiben;Mittelmeer 0 1
05/06/2021 ['EM' 'Finale' 'U21'] 04/06/2021 Deutschland;U21;stehen;Mal;Folge;EM;Finale 3 2
05/06/2021 ['EM' 'Finale' 'U21'] 04/06/2021 Wirtz;führen;deutsch;U21;EM;Finale 3 2
05/06/2021 ['EM' 'Finale' 'U21'] 04/06/2021 richtig;Moment;richtig;Platz 0 3
05/06/2021 ['EM' 'Finale' 'U21'] 04/06/2021 deutschen;U21;stehen;EM;Finale 3 1
05/06/2021 ['EM' 'Finale' 'U21'] 04/06/2021 Finaleinzug;Abend;Florian;Wirtz 1 3
05/06/2021 ['EM' 'Finale' 'U21'] 04/06/2021 Abend;Florian;Wirtz 0 3
05/06/2021 ['EM' 'Finale' 'U21'] 04/06/2021 Deutschland;Finale;U21;EM;Abend;Florian;Wirtz 3 0
05/06/2021 ['EM' 'Finale' 'U21'] 04/06/2021 Triumph;Niederlande;Deutschland;erreichen;Finale;U21;Europameisterschaft 2 3
05/06/2021 ['EM' 'Finale' 'U21'] 06/06/2021 Bestbesetzung;Portugal 0 3
05/06/2021 ['EM' 'Finale' 'U21'] 07/06/2021 Oma;lieb;deutsch;U21;Fußball;Europameister 1 3
05/06/2021 ['EM' 'Finale' 'U21'] 07/06/2021 U21;Team;Europameister 1 3
05/06/2021 ['Struff'] 01/06/2021 Markus;Anfang;neu;Werder;Trainer 0 1
05/06/2021 ['Struff'] 01/06/2021 Überraschung;Paris;Struff;werfen;Mitfavorit;Rublev;Satz;Krimi;raus 1 0
05/06/2021 ['Struff'] 02/06/2021 Struff;schlagen;Geheimfavoriten 1 1
05/06/2021 ['Struff'] 04/06/2021 Zverev;Ziel;Titel;nähern 0 1
05/06/2021 ['Struff'] 04/06/2021 Malochen;unterm;Eiffelturm 0 1
05/06/2021 ['Struff'] 05/06/2021 Struff;knacken;Rafael;Nadal 1 1
05/06/2021 ['Struff'] 06/06/2021 Koepfer;Federer;vorbei 0 1
05/06/2021 ['Struff'] 06/06/2021 Struff;zähmen;Gegner 1 1
05/06/2021 ['Eishockey' 'WM'] 01/06/2021 Deutschland;verlieren;USA 0 2
05/06/2021 ['Eishockey' 'WM'] 01/06/2021 DEB;Team;Spiel 0 2
05/06/2021 ['Eishockey' 'WM'] 02/06/2021 DEB;Team;zittern;kampfstark;Viertelfinale 0 2
05/06/2021 ['Eishockey' 'WM'] 02/06/2021 groß;Herz 0 2
05/06/2021 ['Eishockey' 'WM'] 04/06/2021 Deutschland;stolz 0 2
05/06/2021 ['Eishockey' 'WM'] 02/06/2021 Irre;Nervenschlacht;Deutschland;zittern;Viertelfinale;WM 1 2
05/06/2021 ['Eishockey' 'WM'] 05/06/2021 Deutschland;lässt;Chance;Finnland;treffen;erneut 0 2
05/06/2021 ['Eishockey' 'WM'] 02/06/2021 hitzig;Spiel 0 2
05/06/2021 ['Eishockey' 'WM'] 03/06/2021 Deutschland;stehen;Eishockey;Drama;WM;Halbfinale 2 0
05/06/2021 ['Eishockey' 'WM'] 03/06/2021 Deutsches;Eishockey;Nationalteam;erreichen;WM;Halbfinale 2 0
05/06/2021 ['Eishockey' 'WM'] 03/06/2021 epischem;Kampf;DEL;Team;Halbfinale 0 2
05/06/2021 ['Eishockey' 'WM'] 03/06/2021 Deutschland;besiegen;Schweiz;Penaltyschießen 0 2
05/06/2021 ['Eishockey' 'WM'] 03/06/2021 Halbfinale;Deutschland;werfen;Schweiz;unglaublich;Eishockey;Drama;raus 1 2
05/06/2021 ['Eishockey' 'WM'] 04/06/2021 Deutschland;ziehen;Halbfinale 0 2
05/06/2021 ['Eishockey' 'WM'] 04/06/2021 deutsch;Eishockey 1 2
05/06/2021 ['Eishockey' 'WM'] 04/06/2021 DEB;Team;epischem;Kampf;WM;Halbfinale 1 2
05/06/2021 ['Eishockey' 'WM'] 04/06/2021 Moment;fürs;Briefmarkenalbum 0 2
05/06/2021 ['Eishockey' 'WM'] 04/06/2021 WM;Halbfinale;deutsch;Eishockey;wund 2 0
05/06/2021 ['Eishockey' 'WM'] 05/06/2021 deutschen;Mannschaft;erreichen;WM;Halbfinale 1 2
05/06/2021 ['Eishockey' 'WM'] 05/06/2021 geheimnisvolle;Finne;deutsch;wund 0 2
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 Deutschland;verpasst;Bronze;deutlich 0 2
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 deutschen;Eishockey;Auswahl;erleben;Demütigung 1 2
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 deutsch;Final;Traum;platzen 0 2
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 deutschen;Mannschaft;verpasst;Einzug;Finale 0 2
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 DEB;Team;vergeben;Chance;aufs;WM;Finale 1 2
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 Eishockey;WM;USA;stark;DEB;Team 2 2
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 Eishockey;WM;USA;zeigen;DEB;Team;Grenze 2 0
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 tun;brutal;weh;Deutscher;Traum;historisch;WM;Medaille;platzen 1 2
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 Ausgeschieden;fertigen 0 2
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 Eishockey;WM;Deutschland;verlieren;Halbfinale;Finnland 2 0
05/06/2021 ['Eishockey' 'WM'] 06/06/2021 Final;Traum;platzen;Deutschland;verlieren;sensationell;Leistung;Finnland 0 2
05/06/2021 ['Eishockey' 'WM'] 07/06/2021 Kanada;27;Mal;Weltmeister 0 2
05/06/2021 ['Eishockey' 'WM'] 07/06/2021 Kanada;siegen;sensationell;Eishockey;WM 2 2
05/06/2021 ['Eishockey' 'WM'] 08/06/2021 Experte;glauben;trotzen;bitter;Pleite;deutsch;Eishockey;Geschichte 1 2
05/06/2021 ['1' 'Formel'] 06/06/2021 Drama;Verstappen;Hamilton;Vettel 0 2
05/06/2021 ['1' 'Formel'] 07/06/2021 300;km;h;wüten;Mick;Schumacher;Teamkollegen 0 2
05/06/2021 ['1' 'Formel'] 04/06/2021 Formel;1;Nachtrennen;Singapur;2021;absagen 2 0
05/06/2021 ['1' 'Formel'] 05/06/2021 Vettel;fluchen;Crash;Festival;Qualifying 0 2
05/06/2021 ['1' 'Formel'] 06/06/2021 Vettel;Baku 0 2
05/06/2021 ['1' 'Formel'] 06/06/2021 Verstappen;crasht;330;km;h;Vettel;überragen 0 2
05/06/2021 ['1' 'Formel'] 05/06/2021 Formel;1;Charles;Leclerc;gewinnen;Qualifying;Baku 2 0
05/06/2021 ['1' 'Formel'] 06/06/2021 Formel;1;trauern;Schlüsselfigur;Ojjeh 2 0
05/06/2021 ['1' 'Formel'] 06/06/2021 Mercedes;bewahren;Hamilton;Desaster 0 2
05/06/2021 ['1' 'Formel'] 06/06/2021 Formel;1;Dramatik;pur;Rennen;Baku 2 1
05/06/2021 ['1' 'Formel'] 06/06/2021 Sky;Supersport;erleben;Training;Qualifyings;Rennen;Formel;1 2 0
05/06/2021 ['1' 'Formel'] 08/06/2021 Mazepin;fangen;nächst;Schumacher;Klatsche 0 2
05/06/2021 ['1' 'Formel'] 08/06/2021 Bottas;quälen;Mercedes 0 2
05/06/2021 ['1' 'Formel'] 09/06/2021 Vettel;erklären;Form;Explosion 0 2
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Demutsmanöver 0 2
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Marx;setzen;Maßstab;Umgang;Missbrauchs;Affäre 1 2
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kardinal;Marx;bieten;Papst;Rücktritt 2 0
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Reaktion;Rücktrittsgesuch;Kardinal;Marx;Führt;hoffentlich;Beben 2 0
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Brief;Kardinal;Marx;Wortlaut 2 1
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kirche;Krise;lernen 0 2
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 amtsmüde;nerven 0 2
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kardinal;Marx;bieten;Rücktritt 2 2
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Reinhard;Marx;Kollege;Vorschrift 1 2
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Lese;Brief;Kardinal;Marx;Wortlaut 2 1
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Stress;16;Cent 0 2
05/06/2021 ['Kardinal' 'Marx'] 09/06/2021 Görlach;Global;Papst;Benedikt;Kardinal;Marx;Rücktritt;identisch;Motiv 2 0
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Marx;Amtsverzicht;Aufruf 1 2
05/06/2021 ['Kardinal' 'Marx'] 06/06/2021 bedeuten;Marx;persönlich;Rücktrittsangebot 1 2
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kardinal;Marx;bieten;Papst;Rücktritt 2 1
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Weg 0 2
05/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Meinung;Kardinal;Reinhard;Marx;Rücktritt;Symbol 2 0
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Schavan;hoffen;Marx;Rücktrittsgesuch;Beben;Kirche 1 2
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Aufruf;Umsturz 0 2
05/06/2021 ['Kardinal' 'Marx'] 06/06/2021 Kardinal;Woelki;denken;Rücktritt 1 2
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Kirche;groß;Bedrohung 0 2
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Alarmsignal;katholische;Kirche 0 2
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Vieldeutig;Abgang 0 2
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Kardinal;Marx;bieten;Papst;Rücktritt 2 2
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 04;06;2021 0 2
05/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Meinung;Rücktritt;Symbol 0 2
05/06/2021 ['Kardinal' 'Marx'] 06/06/2021 letzt;Volkskirche 0 2
05/06/2021 ['Kardinal' 'Marx'] 06/06/2021 Stein 0 2
05/06/2021 ['Kardinal' 'Marx'] 06/06/2021 Kardinal;Woelki;denken;ans;Aufhören 1 2
05/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Mach;Papst;lehnen;Rücktritt;Kardinal;Marx 2 1
05/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Marx;rechnen;Papst 1 2
05/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Geh;Reinhard 0 2
05/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Kardinal;Marx;fügen;Papst 2 2
05/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Papst;lehnen;Rücktritt;Kardinal;Marx 2 2
05/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Bruder;mach 0 2
05/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Franziskus;Brief;Marx;Wortlaut 1 2
05/06/2021 ['Kardinal' 'Marx'] 09/06/2021 stark 0 2
05/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Marx;Antwort;Papst;Franziskus;Wortlaut 1 2
05/06/2021 ['Kardinal' 'Marx'] 09/06/2021 Benedikt;Marx;Gleicher;Rücktrittsgrund 1 2
05/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Überraschender;Brief;Papst;lehnen;Rücktritt;Kardinal;Marx 2 0
05/06/2021 ['Kardinal' 'Marx'] 11/06/2021 weitermachen 0 2
05/06/2021 ['Kardinal' 'Marx'] 11/06/2021 Papst;stützen;Marx;Sinnsuche;gefährlich;Po;Vergrößerung 1 2
05/06/2021 ['Kardinal' 'Marx'] 11/06/2021 inszenieren 0 2
05/06/2021 ['Kardinal' 'Marx'] 11/06/2021 stehen;Rätsel 0 2
05/06/2021 ['Kardinal' 'Marx'] 11/06/2021 10;06;2021 0 2
05/06/2021 ['Kardinal' 'Marx'] 11/06/2021 Theologe;wünschen;deutlich;Papst 0 2
05/06/2021 ['Kardinal' 'Marx'] 13/06/2021 Gehirnwäsche;Name;Gott 0 2
05/06/2021 ['Kardinal' 'Marx'] 13/06/2021 Marx;Rücktrittsgesuch;Aufarbeitung;folgen 1 2
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 01/06/2021 Corona;Energie;Bildung;Streitthemen;TV;Duell 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 01/06/2021 link;Identitätspolitik;nehmen;inzwischen;irrational;Zug 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 01/06/2021 Simbabwe 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 02/06/2021 Wahl;Sachsen;Anhalt;rechts;abdriften 3 0
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 01/06/2021 Verzweiflung;Name;SPD 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 02/06/2021 Umkämpfter;Osten;wichtig;Wahl;Sachsen;Anhalt;Partei 3 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 03/06/2021 Wahlerfolg;AfD;Sachsen;Anhalt;fatal 3 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Wahlbeteiligung;liegen;Nachmittag;41;Prozent 1 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Reiner;Haseloff;Mann;klein;beigeben 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Nachfragen;Baerbocks;Lebenslauf;reagieren;Habeck;schmallippig 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Wanderwitz;fordern;AfD;Erfolg;jung;Wähler;politische;Bildung 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 lässt;Umfrage;Politik 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 Sachsen;Anhalt;Partei;AfD;Wahlsieg;verhindern 3 0
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 Wohin;fahren;Annalenas;Elektro;Zug 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Letzter;Stimmungstest;Bundestagswahl 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 CDU;Politiker;Koalition;Grüne 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Live;Sendung;Wahl;Sachsen;Anhalt 3 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Wahl;Land;Überraschung 1 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Land;Wahlmuffel 1 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 Wahl;Sachsen;Anhalt;AfD 3 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 News;Spezial;Wahl;Sachsen;Anhalt 3 0
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Geringere;Wahlbeteiligung;Sachsen;Anhalt 3 2
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 Sündenbock;Laschet;Gewinnt;AfD;Sachsen;Anhalt;schütteln;s 2 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Mysteriöses;Grollen;Bayer;CDU;Sieg;Sachsen;Anhalt 2 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 zufrieden 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Landtag;Sachsen;Anhalt;CDU;AfD;kämpfen;Wahlsieg 3 0
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Wahl;wichtig 1 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Prognose;Wahlbeteiligung;Sachsen;Anhalt;gering;Briefwahl;Effekt 3 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Zahl;Wahl;Blick;Datencenter;FOCUS;Online 1 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Habeck;sehen;Grund;Miniplus 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Wahlsieg;CDU;Sachsen;Anhalt;deutlich;AfD 3 0
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Abend;Baerbock;Zug;entgleisen 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 30;Jährige;liegen;AfD;vorn 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Laschet;setzen;Herbst;Haseloff;Effekt 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Grüne;Hausaufgaben 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Amtsbonus 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Partei;Hochburg 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 weder;Baerbock;Scholz;Effekt 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Bloß;Stärke;verwechseln 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 klar;Kante;gewinnen 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Triumph;überzeugt;Demokrat 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Sachsen;Anhalt;Zeichen;stehen;Deutschland;Koalition 2 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Ring;politische;Mitte 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Meinung;1;0;Armin;Laschet 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Söder;gratulieren;Haseloff 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Tote;Hose;links;Mitte;öffnen;Tor;Kanzleramt;Laschet 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 09/06/2021 nan 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Umfrage;Papierkorb;Sachsen;Anhalt;zeigen;Grüne;böse;Erwachen;drohen 2 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Laschets;Weg;zahlen;vorerst 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Gekämpft;gewinnen 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Sahra;Wagenknecht 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 stark;AfD;wirken;desto;groß;Zulauf;Gegner 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 1;0;Armin;Laschet 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Schwarze;Koalitionsspielchen;Prognose;Debakel;Lehre;Sachsen;Anhalt;Wahl 3 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Triumph;Laschet;Vollbremsung;Baerbock;Ohrfeige;Scholz 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Scharfe;Kritik;CDU;Maaßens;Baerbock;Tweet;Niveau 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Methode;Haseloff;Annalena;Baerbocks;Manko 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Grüner;schließen;erneute;Kenia;Koalition 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Grüner;räumen;Fehler 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Söders;letzte;Chance;vorbei 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Wahl;Sachsen;Anhalt;Deutschland 3 1
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 diktatursozialisiert;AfD;wählen 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 AfD;Wahlkampf;superaggressiv 1 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 09/06/2021 Baerbock;Test;Grüne;Realität;ankommen 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 09/06/2021 Zeitbombe;AfD 0 3
06/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 11/06/2021 Land;Bollwerktätigen 0 3
06/06/2021 ['Markle' 'Meghan'] 02/06/2021 Queen;Meghan;Adelstitel;entziehen;plötzlich;Prinzessin 1 2
06/06/2021 ['Markle' 'Meghan'] 07/06/2021 Name;royalen;Baby;sorgen;Kontroverse 0 2
06/06/2021 ['Markle' 'Meghan'] 07/06/2021 Harry;Meghans;Tochter 1 2
06/06/2021 ['Engel' 'Sarah'] 02/06/2021 romantisch;Sarah;Engel;Jawort 2 2
06/06/2021 ['Engel' 'Sarah'] 06/06/2021 Sarah;Engel;Mal;Mutter 2 0
06/06/2021 ['Engel' 'Sarah'] 06/06/2021 Sarah;Engel;erwarten;Kind 2 2
06/06/2021 ['Engel' 'Sarah'] 06/06/2021 Sarah;Engel;Mal;Mutter 2 0
06/06/2021 ['Joshua' 'Kimmich'] 07/06/2021 Plant;Löw;EM;Kimmich;Revolution 1 2
06/06/2021 ['Joshua' 'Kimmich'] 10/06/2021 Puzzlezimmer 0 2
06/06/2021 ['Joshua' 'Kimmich'] 09/06/2021 Kimmich;überrennen;Ex;Bundestrainer;warnen;Löw;fatal;Fehler 1 2
06/06/2021 ['Dorsch' 'Niklas'] 07/06/2021 Oma;lieb;deutsch;U21;Fußball;Europameister 0 2
06/06/2021 ['ARD'] 01/06/2021 politisch;Ausgewogenheit;ARD;ZDF 1 1
06/06/2021 ['ARD'] 01/06/2021 sagen 0 1
06/06/2021 ['ARD'] 01/06/2021 ARD;ZDF;berichten;Mensch;erziehen 1 1
06/06/2021 ['ARD'] 01/06/2021 Nachricht;tagesschau24 0 1
06/06/2021 ['ARD'] 01/06/2021 ZDF;Intendantenwahl;unerwartet;spannen 0 1
06/06/2021 ['ARD'] 01/06/2021 ARD;privat;Sender;blockieren 1 0
06/06/2021 ['ARD'] 02/06/2021 Günther;Jauch;fiebern;Jubiläum;entgegen 0 1
06/06/2021 ['ARD'] 12/06/2021 Bewusstsein;Mensch;Quotensturz;ARD 1 1
06/06/2021 ['ARD'] 09/06/2021 laufen;ARD;Spitzenpersonal 1 0
06/06/2021 ['ARD'] 09/06/2021 ARD;laufen;Moderator;Senderwechsel;stecken;Geld 1 1
06/06/2021 ['ARD'] 08/06/2021 Roter;schwarz;Freundeskreis;Kungelrunden;Führung;ZDF;auswürfeln 0 1
06/06/2021 ['ARD'] 08/06/2021 ARD;ZDF;Sachlichkeit;verpflichten 1 0
06/06/2021 ['ARD'] 08/06/2021 RTL;holen;Pinar;Atalay;Tagesthemen 0 1
06/06/2021 ['ARD'] 08/06/2021 Ungeimpft;Schauspielerin;Eva;Herzig;Job;verlieren 0 1
06/06/2021 ['ARD'] 08/06/2021 EM;Spiel;derzeit;Million;deutschen;gucken 0 1
06/06/2021 ['ARD'] 09/06/2021 lasst;wechseln 0 1
06/06/2021 ['ARD'] 08/06/2021 Moderatorin;Pinar;Atalay;RTL 0 1
06/06/2021 ['ARD'] 10/06/2021 Themenraum;34 0 1
06/06/2021 ['ARD'] 11/06/2021 s;Hassel;wissen;Baerbock;knapp 0 1
06/06/2021 ['ARD'] 11/06/2021 Russland;entziehen;ARD;Journalist;Akkreditierung 1 1
06/06/2021 ['ARD'] 11/06/2021 Russland;verweigern;ARD;Journalist;Zugang 1 1
06/06/2021 ['ARD'] 11/06/2021 offensichtlich;schlampig 0 1
06/06/2021 ['ARD'] 11/06/2021 Vertrauen;Verhör 0 1
06/06/2021 ['ARD'] 11/06/2021 Russland;verweigern;ARD;Journalist;Zugang;EM;Spiel 1 0
06/06/2021 ['ARD'] 11/06/2021 Rede;Co;Vorsitzende;Habeck 0 1
06/06/2021 ['ARD'] 11/06/2021 Russland;verweigern;ARD;Reporter;Zugang 1 0
06/06/2021 ['ARD'] 13/06/2021 ARD;Journalist;erhalten;Akkreditierung 1 0
06/06/2021 ['ARD'] 13/06/2021 Russland;lässt;ARD;Journalist;EM 1 1
06/06/2021 ['ARD'] 14/06/2021 ARD;Journalist;Kempe;Russland;EM;berichten 1 0
06/06/2021 ['Eva' 'Herzig'] 07/06/2021 Eva;Herzig;verlieren;Rolle;Steirerkrimi 2 2
06/06/2021 ['Eva' 'Herzig'] 07/06/2021 Serie;Schauspielerin;impfen;lassen;TV;Rolle;weg 0 2
06/06/2021 ['Eva' 'Herzig'] 08/06/2021 Ungeimpft;Schauspielerin;Eva;Herzig;Job;verlieren 2 2
06/06/2021 ['Eva' 'Herzig'] 08/06/2021 Eva;Herzig;schockiert;Verlust;TV;Rolle 2 0
06/06/2021 ['Eva' 'Herzig'] 09/06/2021 Eva;Herzig;schockiert;Verlust;TV;Rolle 2 0
06/06/2021 ['Andrea' 'Kiewel'] 06/06/2021 Andrea;Kiewel;begeistern;bitte;Schwede;heiraten 2 0
06/06/2021 ['Andrea' 'Kiewel'] 07/06/2021 Menschinnen;Fernsehgarten;Star;Kiewel;üben;Gendern;scheitern;kläglich 1 2
06/06/2021 ['Eishockey' 'Finale' 'WM'] 05/06/2021 Deutschland;lässt;Chance;Finnland;treffen;erneut 0 3
06/06/2021 ['Eishockey' 'Finale' 'WM'] 07/06/2021 Kanada;27;Mal;Weltmeister 0 3
06/06/2021 ['Eishockey' 'Finale' 'WM'] 07/06/2021 Kanada;siegen;sensationell;Eishockey;WM 2 3
06/06/2021 ['Mick' 'Schumacher'] 07/06/2021 300;km;h;wüten;Mick;Schumacher;Teamkollegen 2 2
06/06/2021 ['Mick' 'Schumacher'] 07/06/2021 Ralf;Schumacher;kritisieren;Masepin;Lebensgefährlich 1 2
06/06/2021 ['Agit' 'Kabayel'] 06/06/2021 Wilder;Schlägerei;Kampf;Magdeburg 0 2
06/06/2021 ['MDR'] 01/06/2021 Corona;Energie;Bildung;Streitthemen;TV;Duell 0 1
06/06/2021 ['MDR'] 01/06/2021 Simbabwe 0 1
06/06/2021 ['MDR'] 06/06/2021 Fliegende;Stuhl;Faust;Massenschlägerei;Magdeburg 0 1
06/06/2021 ['Bundesliga' 'Frau'] 05/06/2021 Fußball;Liga;explosiv 0 2
06/06/2021 ['Bundesliga' 'Frau'] 06/06/2021 Bayer;Bundesliga;meist 1 2
06/06/2021 ['Bundesliga' 'Frau'] 06/06/2021 Frau;FC;Bayer;Deutscher;meist 1 2
06/06/2021 ['Bundesliga' 'Frau'] 06/06/2021 Frau;Bundesliga;FC;Bayer;Deutscher;meist 2 0
06/06/2021 ['Mansour' 'Ojjeh'] 06/06/2021 Formel;1;trauern;Schlüsselfigur;Ojjeh 1 2
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 01/06/2021 Code;Globalisten 0 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 02/06/2021 AfD;Wähler;kämpfen 0 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 01/06/2021 Otte;rechts;Crash;Prophet;Maaßen 1 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 02/06/2021 Maaßens;Wette 1 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 04/06/2021 Antisemitismus;Vorwurf;CDU;Politiker;fordern;Aufklärung;Maaßen 1 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 04/06/2021 klassisch;antisemitische;Stereotyp 0 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 06/06/2021 Laschets;Dilemma;Rand 0 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 07/06/2021 Ziemiak;nennen;Maaßen;Tweet;Baerbock;unmöglich;unsäglich 1 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 07/06/2021 Unionspolitiker;Maaßen;Distanz 1 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 07/06/2021 Scharfe;Kritik;CDU;Maaßens;Baerbock;Tweet;Niveau 1 3
06/06/2021 ['Georg' 'Hans' 'Maaßen'] 08/06/2021 Maaßen;liegen;Umfrage;SPD;Politiker 1 3
07/06/2021 ['Apple'] 01/06/2021 Apple;Chef;weisen;Vorwurf;Monopolstellung;Gericht 1 1
07/06/2021 ['Apple'] 02/06/2021 Stiftung;Warentest;Apple;schaffen;Top;Ten;Samsung;überzeugen 1 0
07/06/2021 ['Apple'] 03/06/2021 Huawei;starten;Betriebssystem 0 1
07/06/2021 ['Apple'] 05/06/2021 G7;Digitalsteuer 0 1
07/06/2021 ['Apple'] 08/06/2021 Apple;Nachsehen;Android;Nutzern 1 1
07/06/2021 ['Apple'] 08/06/2021 All;Inclusive;finanzielle;Freiheit;Biotech;Fantasie 0 1
07/06/2021 ['Apple'] 09/06/2021 Hildmanns;Telegram;fast;komplett;sperren 0 1
07/06/2021 ['Apple'] 09/06/2021 Apple;Markt;Online;Meeting;erobern 1 0
07/06/2021 ['Apple'] 08/06/2021 Apples;groß;Update;Facetime 1 1
07/06/2021 ['Apple'] 08/06/2021 Apple;erlauben;Facetime;Nutzer;iPhone 1 0
07/06/2021 ['Apple'] 08/06/2021 Apple;Einsehen;Android;Nutzern 1 1
07/06/2021 ['Apple'] 08/06/2021 FaceTime;Filmabend 0 1
07/06/2021 ['Apple'] 08/06/2021 ändern;iOS;15 0 1
07/06/2021 ['Apple'] 08/06/2021 Apple;Chef;Mitarbeiter;Büro;zwingen;Barrikade 1 1
07/06/2021 ['Apple'] 12/06/2021 neu;Büro;iPad;Pro 0 1
07/06/2021 ['Apple'] 11/06/2021 Ex;BMW;Topmanager;Apple 1 1
07/06/2021 ['Apple'] 12/06/2021 Druck;Tech;Riese;wachsen 0 1
07/06/2021 ['Apple'] 14/06/2021 Apple;zeigen;Kritiker;innen;Gendern;normal;Sache;Welt 1 1
07/06/2021 ['Bushido'] 08/06/2021 Bushido;Vater;Drilling 1 1
07/06/2021 ['Bushido'] 08/06/2021 Babyglück;Skandal;Rapper;Bushido;Frau;siebenfache;Eltern 1 0
07/06/2021 ['Bushido'] 08/06/2021 Drilling;Frau;Bushido 1 0
07/06/2021 ['Bushido'] 11/06/2021 Reality;TV;dazulernen 0 1
07/06/2021 ['Landrut' 'Lena' 'Meyer'] 01/06/2021 Wirbel;Lena;Meyer;Landrut 3 3
07/06/2021 ['Landrut' 'Lena' 'Meyer'] 02/06/2021 Lena;wehren;Plagiatsvorwürfe 1 3
07/06/2021 ['Landrut' 'Lena' 'Meyer'] 04/06/2021 Lena;legen;Strip 1 3
07/06/2021 ['Djokovic'] 09/06/2021 Nadal;Djokovic;Halbfinale;Zverev;trainieren 1 0
07/06/2021 ['Djokovic'] 10/06/2021 bizarre;Auftritt;Novak;Djokovic;Werwolf 1 1
07/06/2021 ['Djokovic'] 12/06/2021 Djokovic;triumphieren;Nadal 1 1
07/06/2021 ['Djokovic'] 12/06/2021 Djokovic;verneigen;Nadal 1 1
07/06/2021 ['Djokovic'] 13/06/2021 Djokovic;Grand;Slam;Titel;Nummer;19 1 0
07/06/2021 ['Djokovic'] 12/06/2021 Sieg;Nadal;Djokovic;19;Grand;Slam;Titel 1 0
07/06/2021 ['Djokovic'] 12/06/2021 Djokovic;ringen;Paris;Champion;Nadal;nieder 1 1
07/06/2021 ['Djokovic'] 12/06/2021 Tennis;Dimension 0 1
07/06/2021 ['Djokovic'] 12/06/2021 Djokovic;entthronen;Sandplatz;König;Nadal;grandios;Match;ziehen;Finale 1 1
07/06/2021 ['Djokovic'] 13/06/2021 Djokovic;holen;Satz;Break 1 0
07/06/2021 ['Djokovic'] 13/06/2021 Wahnsinn;Finale;Djokovic;drehen;Zweisatz;Rückstand;plötzlich 1 1
07/06/2021 ['Djokovic'] 14/06/2021 Djokovic;krönen;epische;Aufholjagd;Paris;Titel 1 1
07/06/2021 ['Djokovic'] 14/06/2021 Djokovic;triumphieren;Paris 1 1
07/06/2021 ['Djokovic'] 14/06/2021 Djokovic;gewinnen;Thriller;Mega;Comeback 1 1
07/06/2021 ['Djokovic'] 14/06/2021 gnadenlose;Gummimann;schreiben;Tennis;Geschichte 0 1
07/06/2021 ['Djokovic'] 14/06/2021 Novak;Djokovic;triumphieren;Paris 1 1
07/06/2021 ['Djokovic'] 14/06/2021 Rot;Wahl;Novak;Djokovic;triumphieren;Paris 1 0
07/06/2021 ['RTL'] 02/06/2021 Umfrage;sehen;Union;erstmals;Woche;Grüne;FDP;holen;SPD 0 1
07/06/2021 ['RTL'] 03/06/2021 Millionär;legendär 0 1
07/06/2021 ['RTL'] 03/06/2021 Svenja;Steiner;bringen;GZSZ;Kochen 0 1
07/06/2021 ['RTL'] 03/06/2021 Katze;Haar;schön 0 1
07/06/2021 ['RTL'] 04/06/2021 legendär;Millionär 0 1
07/06/2021 ['RTL'] 04/06/2021 RTL;Kult;Star;packen;Bauer;suchen;Frau;Dreh;nerven 1 1
07/06/2021 ['RTL'] 09/06/2021 ARD;laufen;Moderator;Senderwechsel;stecken;Geld 0 1
07/06/2021 ['RTL'] 09/06/2021 Sommerhaus;Star;mangeln;Star;RTL;Kandidat 1 0
07/06/2021 ['RTL'] 08/06/2021 RTL;holen;Pinar;Atalay;Tagesthemen 1 1
07/06/2021 ['RTL'] 08/06/2021 Moderatorin;Pinar;Atalay;RTL 1 1
07/06/2021 ['RTL'] 08/06/2021 Niko;Griesert;ziehen;Sommerhaus 0 1
07/06/2021 ['RTL'] 10/06/2021 alt;weiß;Mann;Fleischhauer;halten;Steinmeier;nichtig;teuer 0 1
07/06/2021 ['RTL'] 09/06/2021 Union;bauen;Vorsprung;Grüner;Baerbock;verlieren;kontinuierlich;Zuspruch 0 1
07/06/2021 ['RTL'] 14/06/2021 Pop;Titan;Dieter;Bohle;Daniel;Hartwich;Supertalent 0 1
07/06/2021 ['WWDC'] 08/06/2021 Apples;groß;Update;Facetime 0 1
07/06/2021 ['WWDC'] 08/06/2021 FaceTime;Filmabend 0 1
07/06/2021 ['WWDC'] 08/06/2021 ändern;iOS;15 0 1
07/06/2021 ['Lothar' 'Matthäus'] 03/06/2021 Matthäus;erklären;Problem;Boateng 1 2
07/06/2021 ['Lothar' 'Matthäus'] 08/06/2021 Suff;Mallorca;Revolution;scheitern 0 2
07/06/2021 ['Manuel' 'Neuer'] 01/06/2021 Deutschland;Torhüter;alt 0 2
07/06/2021 ['Manuel' 'Neuer'] 02/06/2021 Manuel;Neuer;fragen 2 0
07/06/2021 ['Manuel' 'Neuer'] 07/06/2021 Geist;Blase 0 2
07/06/2021 ['Manuel' 'Neuer'] 08/06/2021 Manuel;Neuer;knacken;100;Länderspiele 2 0
07/06/2021 ['Manuel' 'Neuer'] 08/06/2021 DFB;Team;fahren;Torfestival;EM 0 2
07/06/2021 ['Manuel' 'Neuer'] 08/06/2021 Abenteurer;Helfersyndrom 0 2
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 01/06/2021 Corona;Energie;Bildung;Streitthemen;TV;Duell 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 01/06/2021 link;Identitätspolitik;nehmen;inzwischen;irrational;Zug 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 01/06/2021 Simbabwe 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 02/06/2021 Wahl;Sachsen;Anhalt;rechts;abdriften 3 0
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 01/06/2021 Verzweiflung;Name;SPD 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 02/06/2021 Umkämpfter;Osten;wichtig;Wahl;Sachsen;Anhalt;Partei 3 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 03/06/2021 Wahlerfolg;AfD;Sachsen;Anhalt;fatal 3 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Wahlbeteiligung;liegen;Nachmittag;41;Prozent 1 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Reiner;Haseloff;Mann;klein;beigeben 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Nachfragen;Baerbocks;Lebenslauf;reagieren;Habeck;schmallippig 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Wanderwitz;fordern;AfD;Erfolg;jung;Wähler;politische;Bildung 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 lässt;Umfrage;Politik 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 Sachsen;Anhalt;Partei;AfD;Wahlsieg;verhindern 3 0
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 Wohin;fahren;Annalenas;Elektro;Zug 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Letzter;Stimmungstest;Bundestagswahl 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 CDU;Politiker;Koalition;Grüne 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Live;Sendung;Wahl;Sachsen;Anhalt 3 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Wahl;Land;Überraschung 1 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Land;Wahlmuffel 1 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 Wahl;Sachsen;Anhalt;AfD 3 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 News;Spezial;Wahl;Sachsen;Anhalt 3 0
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Geringere;Wahlbeteiligung;Sachsen;Anhalt 3 2
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 05/06/2021 Sündenbock;Laschet;Gewinnt;AfD;Sachsen;Anhalt;schütteln;s 2 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Mysteriöses;Grollen;Bayer;CDU;Sieg;Sachsen;Anhalt 2 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 zufrieden 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Landtag;Sachsen;Anhalt;CDU;AfD;kämpfen;Wahlsieg 3 0
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Wahl;wichtig 1 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Prognose;Wahlbeteiligung;Sachsen;Anhalt;gering;Briefwahl;Effekt 3 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 06/06/2021 Zahl;Wahl;Blick;Datencenter;FOCUS;Online 1 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Habeck;sehen;Grund;Miniplus 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Wahlsieg;CDU;Sachsen;Anhalt;deutlich;AfD 3 0
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Abend;Baerbock;Zug;entgleisen 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 30;Jährige;liegen;AfD;vorn 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Laschet;setzen;Herbst;Haseloff;Effekt 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Grüne;Hausaufgaben 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Amtsbonus 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Partei;Hochburg 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 weder;Baerbock;Scholz;Effekt 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Bloß;Stärke;verwechseln 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 klar;Kante;gewinnen 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Triumph;überzeugt;Demokrat 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Sachsen;Anhalt;Zeichen;stehen;Deutschland;Koalition 2 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Ring;politische;Mitte 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Meinung;1;0;Armin;Laschet 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Söder;gratulieren;Haseloff 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Tote;Hose;links;Mitte;öffnen;Tor;Kanzleramt;Laschet 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 09/06/2021 nan 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Umfrage;Papierkorb;Sachsen;Anhalt;zeigen;Grüne;böse;Erwachen;drohen 2 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Laschets;Weg;zahlen;vorerst 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Gekämpft;gewinnen 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Sahra;Wagenknecht 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 stark;AfD;wirken;desto;groß;Zulauf;Gegner 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 1;0;Armin;Laschet 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Schwarze;Koalitionsspielchen;Prognose;Debakel;Lehre;Sachsen;Anhalt;Wahl 3 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Triumph;Laschet;Vollbremsung;Baerbock;Ohrfeige;Scholz 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 07/06/2021 Scharfe;Kritik;CDU;Maaßens;Baerbock;Tweet;Niveau 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Methode;Haseloff;Annalena;Baerbocks;Manko 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Grüner;schließen;erneute;Kenia;Koalition 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Grüner;räumen;Fehler 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Söders;letzte;Chance;vorbei 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 Wahl;Sachsen;Anhalt;Deutschland 3 1
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 diktatursozialisiert;AfD;wählen 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 08/06/2021 AfD;Wahlkampf;superaggressiv 1 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 09/06/2021 Baerbock;Test;Grüne;Realität;ankommen 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 09/06/2021 Zeitbombe;AfD 0 3
07/06/2021 ['Anhalt' 'Sachsen' 'Wahl'] 11/06/2021 Land;Bollwerktätigen 0 3
07/06/2021 ['EM' 'U21'] 04/06/2021 Deutschland;U21;stehen;Mal;Folge;EM;Finale 2 2
07/06/2021 ['EM' 'U21'] 04/06/2021 Wirtz;führen;deutsch;U21;EM;Finale 2 2
07/06/2021 ['EM' 'U21'] 04/06/2021 richtig;Moment;richtig;Platz 0 2
07/06/2021 ['EM' 'U21'] 04/06/2021 deutschen;U21;stehen;EM;Finale 2 0
07/06/2021 ['EM' 'U21'] 04/06/2021 Finaleinzug;Abend;Florian;Wirtz 0 2
07/06/2021 ['EM' 'U21'] 04/06/2021 Abend;Florian;Wirtz 0 2
07/06/2021 ['EM' 'U21'] 04/06/2021 Deutschland;Finale;U21;EM;Abend;Florian;Wirtz 2 0
07/06/2021 ['EM' 'U21'] 04/06/2021 Triumph;Niederlande;Deutschland;erreichen;Finale;U21;Europameisterschaft 1 2
07/06/2021 ['EM' 'U21'] 06/06/2021 Bestbesetzung;Portugal 0 2
07/06/2021 ['EM' 'U21'] 07/06/2021 Oma;lieb;deutsch;U21;Fußball;Europameister 1 2
07/06/2021 ['EM' 'U21'] 07/06/2021 deutschen;U21;feiern;auslassen;EM;Triumph 2 0
07/06/2021 ['EM' 'U21'] 07/06/2021 U21;Team;Europameister 1 2
07/06/2021 ['EM' 'U21'] 07/06/2021 Deutschland;U21;Europameister 1 2
07/06/2021 ['EM' 'U21'] 07/06/2021 Junior;Deutschland;U21;krönen;Portugal;Europameister 1 2
07/06/2021 ['Deutschland' 'Lettland'] 01/06/2021 Deutschland;erwarten;WM;Endspiel;Gastgeber;Lettland 2 1
07/06/2021 ['Deutschland' 'Lettland'] 02/06/2021 Deutschland;hoffen;Sieg;Gastgeber;Lettland;WM;Coup 2 0
07/06/2021 ['Deutschland' 'Lettland'] 02/06/2021 Deutschland;stehen;WM;Viertelfinale 1 2
07/06/2021 ['Deutschland' 'Lettland'] 02/06/2021 Irre;Nervenschlacht;Deutschland;zittern;Viertelfinale;WM 1 2
07/06/2021 ['Deutschland' 'Lettland'] 07/06/2021 Positiver;Corona;Test;Deutschland;Gegner;Lettland 2 0
07/06/2021 ['Deutschland' 'Lettland'] 05/06/2021 geheimnisvolle;Finne;deutsch;wund 0 2
07/06/2021 ['Deutschland' 'Lettland'] 08/06/2021 Deutschland;schlagen;Lettland;7;1 2 1
07/06/2021 ['1' 'Formel'] 06/06/2021 Drama;Verstappen;Hamilton;Vettel 0 2
07/06/2021 ['1' 'Formel'] 07/06/2021 300;km;h;wüten;Mick;Schumacher;Teamkollegen 0 2
07/06/2021 ['1' 'Formel'] 04/06/2021 Formel;1;Nachtrennen;Singapur;2021;absagen 2 0
07/06/2021 ['1' 'Formel'] 05/06/2021 Vettel;fluchen;Crash;Festival;Qualifying 0 2
07/06/2021 ['1' 'Formel'] 06/06/2021 Vettel;Baku 0 2
07/06/2021 ['1' 'Formel'] 06/06/2021 Verstappen;crasht;330;km;h;Vettel;überragen 0 2
07/06/2021 ['1' 'Formel'] 05/06/2021 Formel;1;Charles;Leclerc;gewinnen;Qualifying;Baku 2 0
07/06/2021 ['1' 'Formel'] 06/06/2021 Formel;1;trauern;Schlüsselfigur;Ojjeh 2 0
07/06/2021 ['1' 'Formel'] 06/06/2021 Mercedes;bewahren;Hamilton;Desaster 0 2
07/06/2021 ['1' 'Formel'] 06/06/2021 Formel;1;Dramatik;pur;Rennen;Baku 2 1
07/06/2021 ['1' 'Formel'] 06/06/2021 Sky;Supersport;erleben;Training;Qualifyings;Rennen;Formel;1 2 0
07/06/2021 ['1' 'Formel'] 08/06/2021 Mazepin;fangen;nächst;Schumacher;Klatsche 0 2
07/06/2021 ['1' 'Formel'] 08/06/2021 Bottas;quälen;Mercedes 0 2
07/06/2021 ['1' 'Formel'] 09/06/2021 Vettel;erklären;Form;Explosion 0 2
07/06/2021 ['Markle' 'Meghan'] 02/06/2021 Queen;Meghan;Adelstitel;entziehen;plötzlich;Prinzessin 1 2
07/06/2021 ['Markle' 'Meghan'] 07/06/2021 Name;royalen;Baby;sorgen;Kontroverse 0 2
07/06/2021 ['Markle' 'Meghan'] 07/06/2021 Harry;Meghans;Tochter 1 2
07/06/2021 ['Dorsch' 'Niklas'] 07/06/2021 Oma;lieb;deutsch;U21;Fußball;Europameister 0 2
07/06/2021 ['Engel' 'Sarah'] 02/06/2021 romantisch;Sarah;Engel;Jawort 2 2
07/06/2021 ['Engel' 'Sarah'] 06/06/2021 Sarah;Engel;Mal;Mutter 2 0
07/06/2021 ['Engel' 'Sarah'] 06/06/2021 Sarah;Engel;erwarten;Kind 2 2
07/06/2021 ['Engel' 'Sarah'] 06/06/2021 Sarah;Engel;Mal;Mutter 2 0
08/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 VfB;Stuttgart;sprechen;Fall;Silas;Menschenhandel 1 2
08/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 Bundesliga;Star;falsch;Identität 0 2
08/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 Silas;spielen;falsch;Identität 1 2
08/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 Silas;Wamangituka;spielen;falsch;Identität 2 0
08/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 wahr;Silas 1 2
08/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 Stuttgart;Profi;Silas;Wamangituka;falsch;Identität 2 0
08/06/2021 ['Silas' 'Wamangituka'] 09/06/2021 Silas;Silas 1 2
08/06/2021 ['Mladic' 'Ratko'] 08/06/2021 Straffreiheit;Kriegsverbrecher;Regel 0 2
08/06/2021 ['Mladic' 'Ratko'] 09/06/2021 08;06;2021 0 2
08/06/2021 ['Mladic' 'Ratko'] 09/06/2021 letzt;Auftritt;lachen;Schlächter;Balkan;Urteil;fällen;schweigen 0 2
08/06/2021 ['Mladic' 'Ratko'] 08/06/2021 Gericht;bestätigen;lebenslang;Haft;Mladic;Völkermords 1 2
08/06/2021 ['Fastly'] 09/06/2021 Move;Fastly;and;break;things 1 1
08/06/2021 ['Fastly'] 08/06/2021 Weltweit;Webseiten;erreichbar 0 1
08/06/2021 ['Macron'] 01/06/2021 Merkel;Macron;verlangen;Dänemark;Aufklärung;Spionagevorwürfe 1 1
08/06/2021 ['Macron'] 01/06/2021 Merkel;Macron;verlangen;Aufklärung 1 1
08/06/2021 ['Macron'] 01/06/2021 Deutschland;Frankreich;60;Million;Impfdosen;spenden 0 1
08/06/2021 ['Macron'] 01/06/2021 Merkel;Bundeswehr;Mali 0 1
08/06/2021 ['Macron'] 01/06/2021 Macron;loben;Zusammenarbeit;Merkel 1 1
08/06/2021 ['Macron'] 02/06/2021 Operation;Barkhane;scheitern 0 1
08/06/2021 ['Macron'] 01/06/2021 Vakzin;China;WHO;erteilen;Notfallzulassung;Sinovac;Impfstoff 0 1
08/06/2021 ['Macron'] 01/06/2021 peinlich;Dänemark;helfen;Merkel;abhören;brodeln;Land 0 1
08/06/2021 ['Macron'] 03/06/2021 Weißes;Haus;beschwichtigen;Abhöraktion 0 1
08/06/2021 ['Macron'] 04/06/2021 Chirac;bergab 0 1
08/06/2021 ['Macron'] 10/06/2021 Biden;Macron;verstehen;Deutsche 1 1
08/06/2021 ['Macron'] 05/06/2021 fehlen;Präsidentin;Le;Pen 0 1
08/06/2021 ['Macron'] 10/06/2021 Ohrfeige;Macron;Gericht;verurteilen;Angreifer;Haftstrafe 1 0
08/06/2021 ['Macron'] 09/06/2021 Ohrfeige;Macron 1 0
08/06/2021 ['Macron'] 12/06/2021 nutzen;Macron;Impfungen;Interesse 1 0
08/06/2021 ['Macron'] 09/06/2021 Schmerzhafte;Ohrfeige;Präsident;Macron 1 1
08/06/2021 ['Macron'] 09/06/2021 Ohrfeige;französisch;Präsident;Zuschauer;ziehen;Macron;schlagen;Gesicht 1 1
08/06/2021 ['Macron'] 08/06/2021 Mann;greifen;Macron;körperlich;Video;zeigen;Ohrfeige 1 1
08/06/2021 ['Macron'] 09/06/2021 Montjoie;Saint;Denis;Macron;ohrfeigen 1 1
08/06/2021 ['Macron'] 08/06/2021 Mann;ohrfeigen;Macron;Kleinstadt 1 1
08/06/2021 ['Macron'] 08/06/2021 Macron;laufend;Kamera;ohrfeigen 1 0
08/06/2021 ['Macron'] 08/06/2021 Mann;ohrfeigen;Macron;laufend;Kamera 1 1
08/06/2021 ['Macron'] 08/06/2021 Macron;laufend;Kamera;ohrfeigen 1 0
08/06/2021 ['Macron'] 08/06/2021 Frankreich;drehen;frei 0 1
08/06/2021 ['Macron'] 09/06/2021 Geohrfeigt;belieben 0 1
08/06/2021 ['Macron'] 09/06/2021 Macron;kassieren;Ohrfeige 1 0
08/06/2021 ['Macron'] 11/06/2021 Macron;Drohung;ziehen;Teil;Militär;Mali 1 0
08/06/2021 ['Macron'] 10/06/2021 09;06 0 1
08/06/2021 ['Macron'] 11/06/2021 Frankreich;Neuausrichtung;Sahelzone 0 1
08/06/2021 ['Macron'] 11/06/2021 Macron;Ohrfeiger;Haftstrafe;verurteilen 1 1
08/06/2021 ['Macron'] 11/06/2021 Frankreich;beenden;Einsatz;Sahelzone 0 1
08/06/2021 ['Macron'] 11/06/2021 Ohrfeige;Macron;Angreifer;Haftstrafe;verurteilen 1 1
08/06/2021 ['Macron'] 13/06/2021 Wurst;Streit;sorgen;schlecht;Stimmung;Gipfel 0 1
08/06/2021 ['Macron'] 12/06/2021 Merkel;Anführerin;frei;Welt 0 1
08/06/2021 ['Macron'] 13/06/2021 Revolution;gestern 0 1
08/06/2021 ['Macron'] 14/06/2021 Plötzlich;Macron;Johnson;Wortgefecht;Würstchen 1 0
08/06/2021 ['Davidovich' 'Fokina'] 09/06/2021 Zverev;erreichen;Halbfinale 0 2
08/06/2021 ['Namibia'] 01/06/2021 Volksgruppen;Namibia;lehnen;Aussöhnungsabkommen;Deutschland 1 0
08/06/2021 ['Namibia'] 01/06/2021 Scheitert;Aussöhnung;Deutschland 0 1
08/06/2021 ['Namibia'] 01/06/2021 Meinung;dauern;Wunde;heilen;Namibia 1 0
08/06/2021 ['Namibia'] 02/06/2021 erschießen;erhängen;verbrennen 0 1
08/06/2021 ['Namibia'] 03/06/2021 Metzgerknecht;Südwest;Opfer 0 1
08/06/2021 ['Namibia'] 03/06/2021 Abkomme;Genozid;Namibia;Lob;Widerstand 1 0
08/06/2021 ['Namibia'] 04/06/2021 fordern;Begleichung;grausam;Schuld 0 1
08/06/2021 ['Namibia'] 04/06/2021 3;6;2021 0 1
08/06/2021 ['Namibia'] 04/06/2021 Namibia;Lob;Widerstand 1 0
08/06/2021 ['Namibia'] 05/06/2021 Namibia;kündigen;Zahlung;Berlin 1 1
08/06/2021 ['Namibia'] 05/06/2021 Schmerzliches;Kapitel;Abschluss 0 1
08/06/2021 ['Namibia'] 05/06/2021 Deutschland;bloßstellen 0 1
08/06/2021 ['Namibia'] 05/06/2021 Deutschland;bloßstellen;drohen;Herero;Chief;Steinmeiers;Besuch 0 1
08/06/2021 ['Namibia'] 09/06/2021 Opposition;klagen;Apartheid;Verhandlung;Deutschland 0 1
08/06/2021 ['Namibia'] 09/06/2021 Namibia;Opposition;beklagen;Apartheid 1 0
08/06/2021 ['Namibia'] 12/06/2021 Meinung;Vergebliche;Entschuldigung;Völkermord;Namibia 1 0
08/06/2021 ['Bezos' 'Jeff'] 07/06/2021 Amazon;Gründer;fliegen;All 0 2
08/06/2021 ['Bezos' 'Jeff'] 07/06/2021 Jeff;Bezos;planen;Juli;Flug;All 2 1
08/06/2021 ['Bezos' 'Jeff'] 07/06/2021 Bezos;Bruder;All;fliegen 1 2
08/06/2021 ['Bezos' 'Jeff'] 07/06/2021 nan 0 2
08/06/2021 ['Bezos' 'Jeff'] 07/06/2021 Sinéad;O;Connor;Schluss 0 2
08/06/2021 ['Bezos' 'Jeff'] 07/06/2021 Amazon;Gründer;Bezos;20;Juli;Weltall;fliegen;versteigern;Ticket 1 2
08/06/2021 ['Bezos' 'Jeff'] 09/06/2021 Bezos;Musk;Co;zahlen;Steuer 1 2
08/06/2021 ['Bezos' 'Jeff'] 09/06/2021 Vermögensteuer 0 2
08/06/2021 ['Bezos' 'Jeff'] 10/06/2021 Wolf;Kaschmirpelz;Französischer;Luxus;Unternehmer;reich;Mensch;Welt 0 2
08/06/2021 ['Bezos' 'Jeff'] 13/06/2021 28;Million;Dollar;Amazon;Chef;Jeff;Bezos;All 2 0
08/06/2021 ['Bezos' 'Jeff'] 13/06/2021 Bieter;zahlen;Million;Ticket;All 0 2
08/06/2021 ['Bezos' 'Jeff'] 13/06/2021 Weltraumflug;Jeff;Bezos;28;Million;Dollar;versteigern 2 0
08/06/2021 ['Deutschland' 'Lettland'] 01/06/2021 Deutschland;erwarten;WM;Endspiel;Gastgeber;Lettland 2 1
08/06/2021 ['Deutschland' 'Lettland'] 02/06/2021 Deutschland;hoffen;Sieg;Gastgeber;Lettland;WM;Coup 2 0
08/06/2021 ['Deutschland' 'Lettland'] 02/06/2021 Deutschland;stehen;WM;Viertelfinale 1 2
08/06/2021 ['Deutschland' 'Lettland'] 02/06/2021 Irre;Nervenschlacht;Deutschland;zittern;Viertelfinale;WM 1 2
08/06/2021 ['Deutschland' 'Lettland'] 07/06/2021 Positiver;Corona;Test;Deutschland;Gegner;Lettland 2 0
08/06/2021 ['Deutschland' 'Lettland'] 05/06/2021 geheimnisvolle;Finne;deutsch;wund 0 2
08/06/2021 ['Deutschland' 'Lettland'] 08/06/2021 Deutschland;schlagen;Lettland;7;1 2 1
08/06/2021 ['Bushido'] 08/06/2021 Bushido;Vater;Drilling 1 1
08/06/2021 ['Bushido'] 08/06/2021 Babyglück;Skandal;Rapper;Bushido;Frau;siebenfache;Eltern 1 0
08/06/2021 ['Bushido'] 08/06/2021 Drilling;Frau;Bushido 1 0
08/06/2021 ['Bushido'] 11/06/2021 Reality;TV;dazulernen 0 1
08/06/2021 ['Apple'] 01/06/2021 Apple;Chef;weisen;Vorwurf;Monopolstellung;Gericht 1 1
08/06/2021 ['Apple'] 02/06/2021 Stiftung;Warentest;Apple;schaffen;Top;Ten;Samsung;überzeugen 1 0
08/06/2021 ['Apple'] 03/06/2021 Huawei;starten;Betriebssystem 0 1
08/06/2021 ['Apple'] 05/06/2021 G7;Digitalsteuer 0 1
08/06/2021 ['Apple'] 08/06/2021 Apple;Nachsehen;Android;Nutzern 1 1
08/06/2021 ['Apple'] 08/06/2021 All;Inclusive;finanzielle;Freiheit;Biotech;Fantasie 0 1
08/06/2021 ['Apple'] 09/06/2021 Hildmanns;Telegram;fast;komplett;sperren 0 1
08/06/2021 ['Apple'] 09/06/2021 Apple;Markt;Online;Meeting;erobern 1 0
08/06/2021 ['Apple'] 08/06/2021 Apples;groß;Update;Facetime 1 1
08/06/2021 ['Apple'] 08/06/2021 Apple;erlauben;Facetime;Nutzer;iPhone 1 0
08/06/2021 ['Apple'] 08/06/2021 Apple;Einsehen;Android;Nutzern 1 1
08/06/2021 ['Apple'] 08/06/2021 FaceTime;Filmabend 0 1
08/06/2021 ['Apple'] 08/06/2021 ändern;iOS;15 0 1
08/06/2021 ['Apple'] 08/06/2021 Apple;Chef;Mitarbeiter;Büro;zwingen;Barrikade 1 1
08/06/2021 ['Apple'] 12/06/2021 neu;Büro;iPad;Pro 0 1
08/06/2021 ['Apple'] 11/06/2021 Ex;BMW;Topmanager;Apple 1 1
08/06/2021 ['Apple'] 12/06/2021 Druck;Tech;Riese;wachsen 0 1
08/06/2021 ['Apple'] 14/06/2021 Apple;zeigen;Kritiker;innen;Gendern;normal;Sache;Welt 1 1
08/06/2021 ['Atalay' 'Pinar'] 09/06/2021 laufen;ARD;Spitzenpersonal 0 2
08/06/2021 ['Atalay' 'Pinar'] 09/06/2021 ARD;laufen;Moderator;Senderwechsel;stecken;Geld 0 2
08/06/2021 ['Atalay' 'Pinar'] 08/06/2021 RTL;holen;Pinar;Atalay;Tagesthemen 2 2
08/06/2021 ['Atalay' 'Pinar'] 09/06/2021 lasst;wechseln 0 2
08/06/2021 ['Atalay' 'Pinar'] 08/06/2021 Moderatorin;Pinar;Atalay;RTL 2 2
08/06/2021 ['68' 'Rente'] 08/06/2021 Rente;68;Hält;Altmaier;Idee 2 0
08/06/2021 ['68' 'Rente'] 07/06/2021 Regierungsberater;schlagen;Rente;68 2 0
08/06/2021 ['68' 'Rente'] 12/06/2021 Rente;68;63;abschlagsfrei;Ruhestand 2 1
08/06/2021 ['68' 'Rente'] 09/06/2021 lässt;Wahl;gewinnen 0 2
08/06/2021 ['68' 'Rente'] 07/06/2021 Steigende;Finanzierungsprobleme;Altmaier;Berater;schlagen;Rente;68 2 2
08/06/2021 ['68' 'Rente'] 09/06/2021 Experte;erhöhen;Druck;Politik 0 2
08/06/2021 ['68' 'Rente'] 08/06/2021 Rente;68 2 2
08/06/2021 ['68' 'Rente'] 10/06/2021 Rente;68;Eigentlich;stehen;Spiel 2 2
08/06/2021 ['68' 'Rente'] 08/06/2021 Regierungsexperten;empfehlen;Rente;68 2 1
08/06/2021 ['68' 'Rente'] 08/06/2021 Altmaier;kassieren;Plan;Berater 0 2
08/06/2021 ['68' 'Rente'] 08/06/2021 Scholz;wischen;Rente;68;Tisch 2 1
08/06/2021 ['68' 'Rente'] 08/06/2021 Rente;68;Jahrgang;sein;betreffen 2 1
08/06/2021 ['68' 'Rente'] 08/06/2021 Idee 0 2
08/06/2021 ['68' 'Rente'] 09/06/2021 einzahlen;desto 0 2
08/06/2021 ['68' 'Rente'] 09/06/2021 Rente;68;Experte;Vorstoß;erzürnen;Arbeiter 2 0
08/06/2021 ['68' 'Rente'] 09/06/2021 Tausende;Euro;Einbuße;Arbeitnehmer;Rente;68;hart;treffen 2 2
08/06/2021 ['68' 'Rente'] 12/06/2021 fürchten;2022;Beitragsschock 0 2
08/06/2021 ['68' 'Rente'] 10/06/2021 Ökonom;fordern;2052;Rente;70 1 2
08/06/2021 ['68' 'Rente'] 11/06/2021 Arbeit;Umfallen;Baerbock;Laschet;Scholz;Rente;vorhaben 1 2
08/06/2021 ['Gosens' 'Robin'] 03/06/2021 Einzelkritik;Müller;überzeugen;Hummels;patzen;Gosens;Deutschland;gut;Spieler 1 2
08/06/2021 ['Gosens' 'Robin'] 06/06/2021 link;Überholspur 0 2
08/06/2021 ['Gosens' 'Robin'] 08/06/2021 abgehen;Freundschaftsspiel 0 2
08/06/2021 ['Gosens' 'Robin'] 08/06/2021 Löw;lösen;Kimmich;Rätsel 0 2
08/06/2021 ['Deutschland' 'Fußball'] 01/06/2021 Deutschland;Torhüter;alt 1 2
08/06/2021 ['Deutschland' 'Fußball'] 01/06/2021 Goodbye;Deutschland;Star;Norbert;Bebensee;alt;67;versterben 1 2
08/06/2021 ['Deutschland' 'Fußball'] 02/06/2021 01;06;2021 0 2
08/06/2021 ['Deutschland' 'Fußball'] 10/06/2021 Bayer;wissen;einfach 0 2
08/06/2021 ['Deutschland' 'Fußball'] 10/06/2021 deutsch;Mentalität;Arbeitsdenken 0 2
08/06/2021 ['Deutschland' 'Fußball'] 06/06/2021 Corona;Inzidenz;Deutschland;25 1 2
08/06/2021 ['Deutschland' 'Fußball'] 07/06/2021 UEFA;Deutschland;klären 1 2
08/06/2021 ['Deutschland' 'Fußball'] 10/06/2021 Lahm;sehen;Rückholaktion;Müller;Hummels;skeptisch 0 2
08/06/2021 ['Deutschland' 'Fußball'] 07/06/2021 deutschen;Nationalelf;U21;Fußball;Europameister 1 2
08/06/2021 ['Deutschland' 'Fußball'] 08/06/2021 Studie;jed;Tor;Glückstreffer 0 2
08/06/2021 ['Deutschland' 'Fußball'] 08/06/2021 Deutschland;UEFA;Ärger 1 2
08/06/2021 ['Deutschland' 'Fußball'] 09/06/2021 David;Odonkor;trennen;Frau 0 2
08/06/2021 ['Deutschland' 'Fußball'] 10/06/2021 Favorit;Geheimtipps;Fußball;EM;Corona;Verletzung;letzte;Chance 1 2
08/06/2021 ['Deutschland' 'Fußball'] 11/06/2021 Profi;Schmiede;Deutschland 1 2
08/06/2021 ['Deutschland' 'Fußball'] 11/06/2021 Fußballsprache;Deutschland;Kirsche;Bude;Auflaufkinder 2 0
08/06/2021 ['Deutschland' 'Fußball'] 12/06/2021 Belgien;lockern 0 2
08/06/2021 ['Deutschland' 'Fußball'] 12/06/2021 Fußball;EM;2021;Schnäppchen;Deal;Angebot;perfekt;Turnier 1 2
08/06/2021 ['Deutschland' 'Fußball'] 13/06/2021 Karl;Lauterbach;halten;Lockerung;Maskenpflicht 0 2
08/06/2021 ['Deutschland' 'Fußball'] 13/06/2021 DFB;kassieren;Blamage;Nordmazedonien;nächst;Sensation;Österreich 0 2
09/06/2021 ['Libuše' 'Šafránková'] 09/06/2021 Aschenbrödel;Prinzessin;sterben 0 2
09/06/2021 ['Libuše' 'Šafránková'] 09/06/2021 Adieu;Aschenbrödel 0 2
09/06/2021 ['Loki' 'Serie'] 09/06/2021 Superkraft;Sprechen 0 2
09/06/2021 ['Tsitsipas'] 09/06/2021 Zverev;stehen;Paris;erstmals;Halbfinale 0 1
09/06/2021 ['Tsitsipas'] 12/06/2021 Djokovic;triumphieren;Nadal 0 1
09/06/2021 ['Tsitsipas'] 09/06/2021 Weg;Ziegelsteinen 0 1
09/06/2021 ['Tsitsipas'] 12/06/2021 Gefrusteter;Zverev;hadern;Paris 0 1
09/06/2021 ['Tsitsipas'] 11/06/2021 Zverev;erzwingen;Satz 0 1
09/06/2021 ['Tsitsipas'] 11/06/2021 Zverev;zwingen;Tsitsipas;Halbfinale;entscheidend;Satz 1 1
09/06/2021 ['Tsitsipas'] 12/06/2021 Zverev;verpasst;Finale;French;Open 0 1
09/06/2021 ['Tsitsipas'] 12/06/2021 Alexander;Zverev;verpasst;Finaleinzug 0 1
09/06/2021 ['Tsitsipas'] 12/06/2021 Zverev;verpasst;Finale;Tennis;Drama 0 1
09/06/2021 ['Tsitsipas'] 12/06/2021 völlig;unerwartet;hinterhältig;Pointe 0 1
09/06/2021 ['Tsitsipas'] 12/06/2021 Alexander;Zverev;Unvollendete 0 1
09/06/2021 ['Tsitsipas'] 12/06/2021 Djokovic;entthronen;Sandplatz;König;Nadal;grandios;Match;ziehen;Finale 0 1
09/06/2021 ['Tsitsipas'] 12/06/2021 Drama;Pleite;groß;Kampf;Zverev;scheitern;Satz;Tsitsipas;verpasst;Finale 1 0
09/06/2021 ['Tsitsipas'] 13/06/2021 Djokovic;holen;Satz;Break 0 1
09/06/2021 ['Tsitsipas'] 13/06/2021 Wahnsinn;Finale;Djokovic;drehen;Zweisatz;Rückstand;plötzlich 0 1
09/06/2021 ['Tsitsipas'] 14/06/2021 Djokovic;triumphieren;Paris 0 1
09/06/2021 ['Tsitsipas'] 14/06/2021 Djokovic;gewinnen;Thriller;Mega;Comeback 0 1
09/06/2021 ['Tsitsipas'] 14/06/2021 gnadenlose;Gummimann;schreiben;Tennis;Geschichte 0 1
09/06/2021 ['Aktenzeichen' 'XY'] 09/06/2021 Fall;Aktenzeichen;XY;Baris;K;vermisst 2 2
09/06/2021 ['Benzema' 'Karim'] 03/06/2021 Starker;Auftritt;Deutschland;erst;EM;Gegner 0 2
09/06/2021 ['Taylor' 'Teyana'] 10/06/2021 Teyana;Taylor;Sexiest;Woman;Alive 2 2
09/06/2021 ['Attila' 'Hildmann'] 09/06/2021 Hildmanns;Telegram;fast;komplett;sperren 1 2
09/06/2021 ['Attila' 'Hildmann'] 09/06/2021 Hildmanns;Reichweite;stark;begrenzen 1 2
09/06/2021 ['Angels' 'No'] 04/06/2021 No;Angels;feiern;Comeback;exklusiv;Live;Konzert 2 0
09/06/2021 ['Angels' 'No'] 05/06/2021 Jubiläumsfeier;Comeback 0 2
09/06/2021 ['Angels' 'No'] 07/06/2021 Lucy;No;Angels;frischen;verlieben 2 2
09/06/2021 ['Bauer' 'Frau' 'suchen'] 01/06/2021 Bauer;suchen;Frau 3 0
09/06/2021 ['Bauer' 'Frau' 'suchen'] 04/06/2021 RTL;Kult;Star;packen;Bauer;suchen;Frau;Dreh;nerven 3 3
09/06/2021 ['Armie' 'Hammer'] 09/06/2021 Armie;Hammer;begeben;Reha 2 2
09/06/2021 ['Digitaler' 'Impfpass'] 01/06/2021 Digitaler;Impfpass;Handy 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 01/06/2021 Digitaler;Impfpass;Corona;Warn;App;sehen 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 02/06/2021 Digitaler;Impfpass;starten;wichtig;Dokument;wissen 2 1
09/06/2021 ['Digitaler' 'Impfpass'] 09/06/2021 Christian;Drosten;warnen;Rückschlag;Impfkampagne;Sommer 0 2
09/06/2021 ['Digitaler' 'Impfpass'] 10/06/2021 Digitaler;Impfpass;Handy 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 10/06/2021 Digitaler;Impfpass;starten;Montag;Apotheke 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 09/06/2021 Digitaler;Impfpass;Donnerstag;Einsatz;Corona;Warn;App;zeigen;Nachweis 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 09/06/2021 Digitaler;Corona;Impfpass;Donnerstag;verfügbar 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 09/06/2021 Digitaler;Impfpass;starten;Montag;Apotheke 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 09/06/2021 Digitaler;EU;Impfpass;1;Juli 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 09/06/2021 Digitaler;Impfpass;starten;wichtig;Dokument;wissen 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 10/06/2021 Digitaler;Impfpass;starten;brauchen;bringen;erhalten 2 0
09/06/2021 ['Digitaler' 'Impfpass'] 13/06/2021 Digitaler;Impfpass;Geimpfte;Post;bekommen 2 0
09/06/2021 ['Sonnenfinsternis'] 06/06/2021 partielle;Sonnenfinsternis 1 1
09/06/2021 ['Sonnenfinsternis'] 10/06/2021 Sonnenfinsternis;Mittagspause 1 1
09/06/2021 ['Sonnenfinsternis'] 08/06/2021 angebissen;sonnen;sehen 0 1
09/06/2021 ['Sonnenfinsternis'] 09/06/2021 partielle;Sonnenfinsternis;Deutschland 1 1
09/06/2021 ['Sonnenfinsternis'] 09/06/2021 Partielle;Sonnenfinsternis;zeigen;trotzen;Wolke 1 0
09/06/2021 ['Sonnenfinsternis'] 09/06/2021 Sonnenfinsternis;Mittagspause;sehen 1 1
09/06/2021 ['Sonnenfinsternis'] 09/06/2021 Partielle;Sonnenfinsternis;zeigen;trotzen;Wolke 1 0
09/06/2021 ['Sonnenfinsternis'] 09/06/2021 Brille;Sonnenfinsternis;selber;bauen;s 1 0
09/06/2021 ['Sonnenfinsternis'] 10/06/2021 Digitaler;Impfnachweis;Sonnenfinsternis;Stier;ringend;Mann 1 1
09/06/2021 ['Sonnenfinsternis'] 11/06/2021 nan 0 1
09/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 VfB;Stuttgart;sprechen;Fall;Silas;Menschenhandel 1 2
09/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 Bundesliga;Star;falsch;Identität 0 2
09/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 Silas;spielen;falsch;Identität 1 2
09/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 Silas;Wamangituka;spielen;falsch;Identität 2 0
09/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 wahr;Silas 1 2
09/06/2021 ['Silas' 'Wamangituka'] 08/06/2021 Stuttgart;Profi;Silas;Wamangituka;falsch;Identität 2 0
09/06/2021 ['Silas' 'Wamangituka'] 09/06/2021 Silas;Silas 1 2
09/06/2021 ['Mladic' 'Ratko'] 08/06/2021 Straffreiheit;Kriegsverbrecher;Regel 0 2
09/06/2021 ['Mladic' 'Ratko'] 09/06/2021 08;06;2021 0 2
09/06/2021 ['Mladic' 'Ratko'] 09/06/2021 letzt;Auftritt;lachen;Schlächter;Balkan;Urteil;fällen;schweigen 0 2
09/06/2021 ['Mladic' 'Ratko'] 08/06/2021 Gericht;bestätigen;lebenslang;Haft;Mladic;Völkermords 1 2
10/06/2021 ['Pahde' 'Valentina'] 10/06/2021 Rúrik;Gíslason;Valentina;Pahde;sehen 2 2
10/06/2021 ['Tengelmann'] 12/06/2021 verschwunden;Tengelmann;Chef;mysteriöse;Russin;Abendkleid 1 1
10/06/2021 ['Irina' 'Shayk'] 10/06/2021 Kanye;West;datet;Irina;Shayk 2 2
10/06/2021 ['Giffey'] 02/06/2021 Ehemann;Giffey;zahlen;10;000;Euro;Betrugsverfahren;einstellen 1 0
10/06/2021 ['Giffey'] 01/06/2021 Blume;Bild;CDU;Schweigen;Kritik;Berlin;SPD;Kandidatin;Giffey;reißen 1 1
10/06/2021 ['Giffey'] 03/06/2021 Ermittlung;Giffeys;Mann;einstellen 1 1
10/06/2021 ['Giffey'] 10/06/2021 SPD;Politikerin;Giffey;verlieren;Doktortitel 1 0
10/06/2021 ['Giffey'] 10/06/2021 FU;Berlin;entziehen;Giffey;Doktorgrad 1 1
10/06/2021 ['Giffey'] 10/06/2021 Franziska;Giffey;verlieren;Doktortitel 1 0
10/06/2021 ['Giffey'] 10/06/2021 Giffey;verlieren;Doktortitel 1 0
10/06/2021 ['Giffey'] 10/06/2021 Freier;Universität;Berlin;entziehen;Giffey;Doktortitel 1 0
10/06/2021 ['Giffey'] 10/06/2021 Täuschung;erwerben;SPD;Politikerin;Giffey;verlieren;Doktortitel 1 1
10/06/2021 ['Giffey'] 11/06/2021 Lucke;Giffey;gewiß;Weise;Glück 1 0
10/06/2021 ['Giffey'] 11/06/2021 Lucke;Giffey;gewiß;Weise;Glück 1 0
10/06/2021 ['Giffey'] 11/06/2021 Titel;weg;Giffey;119;mal;schummeln;helfen;sogar 1 1
10/06/2021 ['Martin' 'Stoeck'] 10/06/2021 Pur;trauern;ehemalig;Schlagzeuger 0 2
10/06/2021 ['Böhm' 'Gottfried'] 10/06/2021 Architekt;Gottfried;Böhm;tot 2 1
10/06/2021 ['Böhm' 'Gottfried'] 10/06/2021 Gottfried;Böhm;alt;101;sterben 2 2
10/06/2021 ['Böhm' 'Gottfried'] 10/06/2021 Star;Architekt;Gottfried;Böhm;sterben 2 2
10/06/2021 ['Böhm' 'Gottfried'] 11/06/2021 10;06;2021 0 2
10/06/2021 ['Böhm' 'Gottfried'] 11/06/2021 Star;Architekt;Gottfried;Böhm;tot 2 2
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Demutsmanöver 0 2
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Marx;setzen;Maßstab;Umgang;Missbrauchs;Affäre 1 2
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kardinal;Marx;bieten;Papst;Rücktritt 2 0
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Reaktion;Rücktrittsgesuch;Kardinal;Marx;Führt;hoffentlich;Beben 2 0
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Brief;Kardinal;Marx;Wortlaut 2 1
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kirche;Krise;lernen 0 2
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 amtsmüde;nerven 0 2
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kardinal;Marx;bieten;Rücktritt 2 2
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Reinhard;Marx;Kollege;Vorschrift 1 2
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Lese;Brief;Kardinal;Marx;Wortlaut 2 1
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Stress;16;Cent 0 2
10/06/2021 ['Kardinal' 'Marx'] 09/06/2021 Görlach;Global;Papst;Benedikt;Kardinal;Marx;Rücktritt;identisch;Motiv 2 0
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Marx;Amtsverzicht;Aufruf 1 2
10/06/2021 ['Kardinal' 'Marx'] 06/06/2021 bedeuten;Marx;persönlich;Rücktrittsangebot 1 2
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Kardinal;Marx;bieten;Papst;Rücktritt 2 1
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Weg 0 2
10/06/2021 ['Kardinal' 'Marx'] 04/06/2021 Meinung;Kardinal;Reinhard;Marx;Rücktritt;Symbol 2 0
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Schavan;hoffen;Marx;Rücktrittsgesuch;Beben;Kirche 1 2
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Aufruf;Umsturz 0 2
10/06/2021 ['Kardinal' 'Marx'] 06/06/2021 Kardinal;Woelki;denken;Rücktritt 1 2
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Kirche;groß;Bedrohung 0 2
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Alarmsignal;katholische;Kirche 0 2
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Vieldeutig;Abgang 0 2
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Kardinal;Marx;bieten;Papst;Rücktritt 2 2
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 04;06;2021 0 2
10/06/2021 ['Kardinal' 'Marx'] 05/06/2021 Meinung;Rücktritt;Symbol 0 2
10/06/2021 ['Kardinal' 'Marx'] 06/06/2021 letzt;Volkskirche 0 2
10/06/2021 ['Kardinal' 'Marx'] 06/06/2021 Stein 0 2
10/06/2021 ['Kardinal' 'Marx'] 06/06/2021 Kardinal;Woelki;denken;ans;Aufhören 1 2
10/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Mach;Papst;lehnen;Rücktritt;Kardinal;Marx 2 1
10/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Marx;rechnen;Papst 1 2
10/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Geh;Reinhard 0 2
10/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Kardinal;Marx;fügen;Papst 2 2
10/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Papst;lehnen;Rücktritt;Kardinal;Marx 2 2
10/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Bruder;mach 0 2
10/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Franziskus;Brief;Marx;Wortlaut 1 2
10/06/2021 ['Kardinal' 'Marx'] 09/06/2021 stark 0 2
10/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Marx;Antwort;Papst;Franziskus;Wortlaut 1 2
10/06/2021 ['Kardinal' 'Marx'] 09/06/2021 Benedikt;Marx;Gleicher;Rücktrittsgrund 1 2
10/06/2021 ['Kardinal' 'Marx'] 10/06/2021 Überraschender;Brief;Papst;lehnen;Rücktritt;Kardinal;Marx 2 0
10/06/2021 ['Kardinal' 'Marx'] 11/06/2021 weitermachen 0 2
10/06/2021 ['Kardinal' 'Marx'] 11/06/2021 Papst;stützen;Marx;Sinnsuche;gefährlich;Po;Vergrößerung 1 2
10/06/2021 ['Kardinal' 'Marx'] 11/06/2021 inszenieren 0 2
10/06/2021 ['Kardinal' 'Marx'] 11/06/2021 stehen;Rätsel 0 2
10/06/2021 ['Kardinal' 'Marx'] 11/06/2021 10;06;2021 0 2
10/06/2021 ['Kardinal' 'Marx'] 11/06/2021 Theologe;wünschen;deutlich;Papst 0 2
10/06/2021 ['Kardinal' 'Marx'] 13/06/2021 Gehirnwäsche;Name;Gott 0 2
10/06/2021 ['Kardinal' 'Marx'] 13/06/2021 Marx;Rücktrittsgesuch;Aufarbeitung;folgen 1 2
10/06/2021 ['Jürgen' 'Prochnow'] 04/06/2021 Bewunderung;bitte 0 2
10/06/2021 ['Jürgen' 'Prochnow'] 10/06/2021 Jürgen;Prochnow;80 2 2
10/06/2021 ['Staatstrojaner'] 10/06/2021 Geheimdienst;Staatstrojaner;nutzen 1 0
10/06/2021 ['Staatstrojaner'] 11/06/2021 Staatstrojaner 1 0
10/06/2021 ['Staatstrojaner'] 09/06/2021 GroKo;Polizei;Einsatz;Staatstrojanern;erlauben;Juso;kritisieren;SPD;Chefin 1 0
10/06/2021 ['Staatstrojaner'] 11/06/2021 bedeuten;Staatstrojaner;Regelung 1 1
10/06/2021 ['CovPass'] 08/06/2021 Digi;Impfpass;s;Apotheker 0 1
10/06/2021 ['CovPass'] 09/06/2021 Digitaler;Impfnachweis;Start 0 1
10/06/2021 ['CovPass'] 09/06/2021 Digitaler;Corona;Impfpass;Donnerstag;verfügbar 0 1
10/06/2021 ['CovPass'] 11/06/2021 bekommen;digital;Impfnachweis 0 1
10/06/2021 ['CovPass'] 11/06/2021 Spahn;erklären;Fahrplan;CovPass;App 1 0
10/06/2021 ['CovPass'] 11/06/2021 Spahn;erklären;Fahrplan;CovPass;App 1 0
10/06/2021 ['CovPass'] 11/06/2021 CovPass;Juni;Verfügung;stehen 1 1
10/06/2021 ['CovPass'] 14/06/2021 Apotheke;stellen;CovPass 1 1
10/06/2021 ['Libuše' 'Šafránková'] 09/06/2021 Aschenbrödel;Prinzessin;sterben 0 2
10/06/2021 ['Libuše' 'Šafránková'] 09/06/2021 Adieu;Aschenbrödel 0 2
10/06/2021 ['Mickenbecker' 'Philipp'] 11/06/2021 YouTube;Star;Philipp;Mickenbecker;sterben;23 2 1
10/06/2021 ['Mickenbecker' 'Philipp'] 11/06/2021 YouTube;Star;Philipp;Mickenbecker;23;sterben 2 2
10/06/2021 ['Mickenbecker' 'Philipp'] 11/06/2021 Youtuber;Philipp;Mickenbecker;tot 2 2
10/06/2021 ['Mickenbecker' 'Philipp'] 11/06/2021 ruhig;Bruder;Philipp;Mickenbecker;sprechen;letzte;Moment;Tod 2 2
10/06/2021 ['Djokovic'] 09/06/2021 Nadal;Djokovic;Halbfinale;Zverev;trainieren 1 0
10/06/2021 ['Djokovic'] 10/06/2021 bizarre;Auftritt;Novak;Djokovic;Werwolf 1 1
10/06/2021 ['Djokovic'] 12/06/2021 Djokovic;triumphieren;Nadal 1 1
10/06/2021 ['Djokovic'] 12/06/2021 Djokovic;verneigen;Nadal 1 1
10/06/2021 ['Djokovic'] 13/06/2021 Djokovic;Grand;Slam;Titel;Nummer;19 1 0
10/06/2021 ['Djokovic'] 12/06/2021 Sieg;Nadal;Djokovic;19;Grand;Slam;Titel 1 0
10/06/2021 ['Djokovic'] 12/06/2021 Djokovic;ringen;Paris;Champion;Nadal;nieder 1 1
10/06/2021 ['Djokovic'] 12/06/2021 Tennis;Dimension 0 1
10/06/2021 ['Djokovic'] 12/06/2021 Djokovic;entthronen;Sandplatz;König;Nadal;grandios;Match;ziehen;Finale 1 1
10/06/2021 ['Djokovic'] 13/06/2021 Djokovic;holen;Satz;Break 1 0
10/06/2021 ['Djokovic'] 13/06/2021 Wahnsinn;Finale;Djokovic;drehen;Zweisatz;Rückstand;plötzlich 1 1
10/06/2021 ['Djokovic'] 14/06/2021 Djokovic;krönen;epische;Aufholjagd;Paris;Titel 1 1
10/06/2021 ['Djokovic'] 14/06/2021 Djokovic;triumphieren;Paris 1 1
10/06/2021 ['Djokovic'] 14/06/2021 Djokovic;gewinnen;Thriller;Mega;Comeback 1 1
10/06/2021 ['Djokovic'] 14/06/2021 gnadenlose;Gummimann;schreiben;Tennis;Geschichte 0 1
10/06/2021 ['Djokovic'] 14/06/2021 Novak;Djokovic;triumphieren;Paris 1 1
10/06/2021 ['Djokovic'] 14/06/2021 Rot;Wahl;Novak;Djokovic;triumphieren;Paris 1 0
11/06/2021 ['EM' 'Spielplan'] 11/06/2021 spielen 0 2
11/06/2021 ['Mickenbecker' 'Philipp'] 11/06/2021 YouTube;Star;Philipp;Mickenbecker;sterben;23 2 1
11/06/2021 ['Mickenbecker' 'Philipp'] 11/06/2021 YouTube;Star;Philipp;Mickenbecker;23;sterben 2 2
11/06/2021 ['Mickenbecker' 'Philipp'] 11/06/2021 Youtuber;Philipp;Mickenbecker;tot 2 2
11/06/2021 ['Mickenbecker' 'Philipp'] 11/06/2021 ruhig;Bruder;Philipp;Mickenbecker;sprechen;letzte;Moment;Tod 2 2
11/06/2021 ['ARD'] 01/06/2021 politisch;Ausgewogenheit;ARD;ZDF 1 1
11/06/2021 ['ARD'] 01/06/2021 sagen 0 1
11/06/2021 ['ARD'] 01/06/2021 ARD;ZDF;berichten;Mensch;erziehen 1 1
11/06/2021 ['ARD'] 01/06/2021 Nachricht;tagesschau24 0 1
11/06/2021 ['ARD'] 01/06/2021 ZDF;Intendantenwahl;unerwartet;spannen 0 1
11/06/2021 ['ARD'] 01/06/2021 ARD;privat;Sender;blockieren 1 0
11/06/2021 ['ARD'] 02/06/2021 Günther;Jauch;fiebern;Jubiläum;entgegen 0 1
11/06/2021 ['ARD'] 12/06/2021 Bewusstsein;Mensch;Quotensturz;ARD 1 1
11/06/2021 ['ARD'] 09/06/2021 laufen;ARD;Spitzenpersonal 1 0
11/06/2021 ['ARD'] 09/06/2021 ARD;laufen;Moderator;Senderwechsel;stecken;Geld 1 1
11/06/2021 ['ARD'] 08/06/2021 Roter;schwarz;Freundeskreis;Kungelrunden;Führung;ZDF;auswürfeln 0 1
11/06/2021 ['ARD'] 08/06/2021 ARD;ZDF;Sachlichkeit;verpflichten 1 0
11/06/2021 ['ARD'] 08/06/2021 RTL;holen;Pinar;Atalay;Tagesthemen 0 1
11/06/2021 ['ARD'] 08/06/2021 Ungeimpft;Schauspielerin;Eva;Herzig;Job;verlieren 0 1
11/06/2021 ['ARD'] 08/06/2021 EM;Spiel;derzeit;Million;deutschen;gucken 0 1
11/06/2021 ['ARD'] 09/06/2021 lasst;wechseln 0 1
11/06/2021 ['ARD'] 08/06/2021 Moderatorin;Pinar;Atalay;RTL 0 1
11/06/2021 ['ARD'] 10/06/2021 Themenraum;34 0 1
11/06/2021 ['ARD'] 11/06/2021 s;Hassel;wissen;Baerbock;knapp 0 1
11/06/2021 ['ARD'] 11/06/2021 Russland;entziehen;ARD;Journalist;Akkreditierung 1 1
11/06/2021 ['ARD'] 11/06/2021 Russland;verweigern;ARD;Journalist;Zugang 1 1
11/06/2021 ['ARD'] 11/06/2021 offensichtlich;schlampig 0 1
11/06/2021 ['ARD'] 11/06/2021 Vertrauen;Verhör 0 1
11/06/2021 ['ARD'] 11/06/2021 Russland;verweigern;ARD;Journalist;Zugang;EM;Spiel 1 0
11/06/2021 ['ARD'] 11/06/2021 Rede;Co;Vorsitzende;Habeck 0 1
11/06/2021 ['ARD'] 11/06/2021 Russland;verweigern;ARD;Reporter;Zugang 1 0
11/06/2021 ['ARD'] 13/06/2021 ARD;Journalist;erhalten;Akkreditierung 1 0
11/06/2021 ['ARD'] 13/06/2021 Russland;lässt;ARD;Journalist;EM 1 1
11/06/2021 ['ARD'] 14/06/2021 ARD;Journalist;Kempe;Russland;EM;berichten 1 0
11/06/2021 ['Zverev'] 01/06/2021 100;Prozent;deutschen 0 1
11/06/2021 ['Zverev'] 01/06/2021 Tennis;Dame;drohen;historische;Tristesse 0 1
11/06/2021 ['Zverev'] 01/06/2021 Kriminelles;Meinung;sagen 0 1
11/06/2021 ['Zverev'] 02/06/2021 Zverevs;Sieg;Hindernis;kühn;Tataren 1 0
11/06/2021 ['Zverev'] 02/06/2021 Zverev;Rund;William;Auftritt 1 0
11/06/2021 ['Zverev'] 02/06/2021 Zverev;steigern;Satz;Rund;3 1 0
11/06/2021 ['Zverev'] 02/06/2021 Ehrgeiz;Etappe 0 1
11/06/2021 ['Zverev'] 02/06/2021 Spiel;Satz;Sieg;Alex;Zverev;kämpfen;Tiebreaks;French;Open 1 0
11/06/2021 ['Zverev'] 04/06/2021 Zverev;marschieren;lockern;Achtelfinale 1 1
11/06/2021 ['Zverev'] 03/06/2021 Zverevs;Sieg;perfekt;deutsch 1 1
11/06/2021 ['Zverev'] 03/06/2021 Koepfer;folgen;Zverev;Kohlschreiber;French;Open 1 0
11/06/2021 ['Zverev'] 04/06/2021 Zverev;Ziel;Titel;nähern 1 1
11/06/2021 ['Zverev'] 09/06/2021 Alexander;Zverev;erstmals;Paris;Halbfinale 1 0
11/06/2021 ['Zverev'] 06/06/2021 Koepfer;Federer;vorbei 0 1
11/06/2021 ['Zverev'] 09/06/2021 Nadal;Djokovic;Halbfinale;Zverev;trainieren 1 0
11/06/2021 ['Zverev'] 09/06/2021 Zverev;erreichen;Halbfinale 1 1
11/06/2021 ['Zverev'] 07/06/2021 Zverev;mühelos;Viertelfinale;Paris 1 1
11/06/2021 ['Zverev'] 09/06/2021 verrückt;stoppen;Zverev 1 1
11/06/2021 ['Zverev'] 08/06/2021 müssten;Angst;Zverev 1 1
11/06/2021 ['Zverev'] 09/06/2021 Zverev;stehen;Paris;erstmals;Halbfinale 1 0
11/06/2021 ['Zverev'] 08/06/2021 Zverev;French;Open;erstmals;Halbfinale 1 0
11/06/2021 ['Zverev'] 12/06/2021 Djokovic;triumphieren;Nadal 0 1
11/06/2021 ['Zverev'] 09/06/2021 Zverevs;Kampf;doppeln;Horror;Bilanz 1 1
11/06/2021 ['Zverev'] 09/06/2021 Weg;Ziegelsteinen 0 1
11/06/2021 ['Zverev'] 12/06/2021 Gefrusteter;Zverev;hadern;Paris 1 1
11/06/2021 ['Zverev'] 11/06/2021 Zverev;erzwingen;Satz 1 0
11/06/2021 ['Zverev'] 11/06/2021 Tennisprofi;Alexander;Zverev;Unvollendete 1 0
11/06/2021 ['Zverev'] 11/06/2021 Zverev;zwingen;Tsitsipas;Halbfinale;entscheidend;Satz 1 1
11/06/2021 ['Zverev'] 12/06/2021 Zverev;verpasst;Endspiel;Träne;Sieger 1 1
11/06/2021 ['Zverev'] 12/06/2021 Zverev;verpasst;Finale;French;Open 1 0
11/06/2021 ['Zverev'] 12/06/2021 Alexander;Zverev;verpasst;Finaleinzug 1 0
11/06/2021 ['Zverev'] 12/06/2021 Zverev;verpasst;Finale;Tennis;Drama 1 1
11/06/2021 ['Zverev'] 12/06/2021 völlig;unerwartet;hinterhältig;Pointe 0 1
11/06/2021 ['Zverev'] 12/06/2021 Alexander;Zverev;Unvollendete 1 0
11/06/2021 ['Zverev'] 12/06/2021 Tennisprofi;Alexander;Zverev;bleiben;Unvollendete 1 0
11/06/2021 ['Zverev'] 12/06/2021 Drama;Pleite;groß;Kampf;Zverev;scheitern;Satz;Tsitsipas;verpasst;Finale 1 0
11/06/2021 ['Zverev'] 13/06/2021 Wahnsinn;Finale;Djokovic;drehen;Zweisatz;Rückstand;plötzlich 0 1
11/06/2021 ['Zverev'] 14/06/2021 Djokovic;gewinnen;Thriller;Mega;Comeback 0 1
11/06/2021 ['Europameisterschaft'] 01/06/2021 Deutschland;besiegen;Dänemark;Elfmeter;Krimi 0 1
11/06/2021 ['Europameisterschaft'] 01/06/2021 Dahmens;Faust;bringen;DFB;Team;Halbfinale 0 1
11/06/2021 ['Europameisterschaft'] 01/06/2021 Fernseher;s;günstig 0 1
11/06/2021 ['Europameisterschaft'] 01/06/2021 Deutschland;gewinnen;Elfmeterkrimi;Dänemark;ziehen;Halbfinale 0 1
11/06/2021 ['Europameisterschaft'] 02/06/2021 EM;2021;stark;Technik;Deal;Fußball;Event 0 1
11/06/2021 ['Europameisterschaft'] 02/06/2021 DFB;Team;Berg;Kraft 0 1
11/06/2021 ['Europameisterschaft'] 04/06/2021 EM;gewinnen;Abi 0 1
11/06/2021 ['Europameisterschaft'] 03/06/2021 Deutschland;schaffen;Unentschieden;Dänemark 0 1
11/06/2021 ['Europameisterschaft'] 03/06/2021 EM;DFB;Team;Lektion;lernen 0 1
11/06/2021 ['Europameisterschaft'] 03/06/2021 Schatten;Licht 0 1
11/06/2021 ['Europameisterschaft'] 04/06/2021 14;000;Fan;Münchner;EM;Spiel 0 1
11/06/2021 ['Europameisterschaft'] 04/06/2021 14;000;Freund 0 1
11/06/2021 ['Europameisterschaft'] 04/06/2021 Triumph;Niederlande;Deutschland;erreichen;Finale;U21;Europameisterschaft 1 0
11/06/2021 ['Europameisterschaft'] 07/06/2021 Oma;lieb;deutsch;U21;Fußball;Europameister 0 1
11/06/2021 ['Europameisterschaft'] 07/06/2021 UEFA;Deutschland;klären 0 1
11/06/2021 ['Europameisterschaft'] 07/06/2021 Prime;Day;2021;Fernseher;Deal;Sicht 0 1
11/06/2021 ['Europameisterschaft'] 07/06/2021 Junior;Deutschland;U21;krönen;Portugal;Europameister 0 1
11/06/2021 ['Europameisterschaft'] 08/06/2021 Kuntz;Ansprache;Löwe;Adleraugen;Hyänen;abkippenden;Sechsern 0 1
11/06/2021 ['Europameisterschaft'] 08/06/2021 DFB;Team;fahren;Torfestival;EM 0 1
11/06/2021 ['Europameisterschaft'] 08/06/2021 Problem;lässt;Löw;Ruhe 0 1
11/06/2021 ['Europameisterschaft'] 10/06/2021 Corona;Lage;EM;Spielorten 0 1
11/06/2021 ['Europameisterschaft'] 08/06/2021 DFB;Team;schießen;EM;warm 0 1
11/06/2021 ['Europameisterschaft'] 08/06/2021 Superstars;EM;verpassen 0 1
11/06/2021 ['Europameisterschaft'] 08/06/2021 Deutschland;UEFA;Ärger 0 1
11/06/2021 ['Europameisterschaft'] 10/06/2021 Nachricht;Ticketinhaber;München 0 1
11/06/2021 ['Europameisterschaft'] 09/06/2021 Angst;nächst;Abstrich 0 1
11/06/2021 ['Europameisterschaft'] 09/06/2021 weiß;Hansi;tickt;denken 0 1
11/06/2021 ['Europameisterschaft'] 10/06/2021 EURO;2020;wissen 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 Schweiz;mühen;missglücktem;Auftakt 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 Frust;Ex;Geheimfavoriten 0 1
11/06/2021 ['Europameisterschaft'] 11/06/2021 Schwede;Trainer;rufen;Ibrahimovic 0 1
11/06/2021 ['Europameisterschaft'] 11/06/2021 Tor;Gigant;teuflisch;Plan 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 Leder;Pille;Ei;Vielfalt;Fußballsprache 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 Bild;Tag;Spiel;beginnen 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 Scheiß;Mannschaft;Finnland;feiern;EM;Debüt;Dänemark 0 1
11/06/2021 ['Europameisterschaft'] 13/06/2021 England;Auftaktaktsieg;Sancho;Rekord;Bellingham 0 1
11/06/2021 ['Europameisterschaft'] 11/06/2021 schrägste;EM;Geschichte 0 1
11/06/2021 ['Europameisterschaft'] 11/06/2021 Plötzlich;erfüllen;merkwürdig;Event;Sehnsucht 0 1
11/06/2021 ['Europameisterschaft'] 13/06/2021 Turban;Tor;kosten;Schweiz;Sieg;Highlights;Video 0 1
11/06/2021 ['Europameisterschaft'] 11/06/2021 EM;2021;Trikot;Grill;Co;Jubelstimmung;daheim 0 1
11/06/2021 ['Europameisterschaft'] 11/06/2021 Turnier;wenig;Gewinner 0 1
11/06/2021 ['Europameisterschaft'] 11/06/2021 Fußball;Regel;gelten;Änderung;Handspiel 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 selbstbewusste;Auftreten;Italiener;souverän;Sieg 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 Türkei;Italien;Highlights;Video 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 geradezu;bescheidene;Eröffnungsfeier;Europameisterschaft 1 1
11/06/2021 ['Europameisterschaft'] 13/06/2021 Finnland;gewinnen;schlimm;Spiel;EM 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 Italien;gewinnen;klaren;Türkei 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 EM;wissen 0 1
11/06/2021 ['Europameisterschaft'] 12/06/2021 Fußball;EM;2021;Schnäppchen;Deal;Angebot;perfekt;Turnier 0 1
11/06/2021 ['Europameisterschaft'] 14/06/2021 England;Auftaktsieg;Sancho;Rekord;Bellingham 0 1
11/06/2021 ['Europameisterschaft'] 14/06/2021 Fan;verletzen;Tribüne;Sturz;schwer 0 1
11/06/2021 ['Europameisterschaft'] 14/06/2021 Österreich;feiern;Auftakt;EM;Premiere 0 1
11/06/2021 ['2020' 'EURO'] 09/06/2021 Meinung;EURO;2020;Weg;kurz;Sinn 2 0
11/06/2021 ['2020' 'EURO'] 04/06/2021 EURO;2020;Corona;lässt;Fan;Unklare 2 2
11/06/2021 ['2020' 'EURO'] 07/06/2021 EURO;2020;Streit;EM;Trikot;Ukraine 2 0
11/06/2021 ['2020' 'EURO'] 12/06/2021 EURO;Auftakt;Gruppe;B;Skandinavien;Duell;Dänemark;Finnland 1 2
11/06/2021 ['2020' 'EURO'] 10/06/2021 EURO;2020;wissen 2 0
11/06/2021 ['2020' 'EURO'] 09/06/2021 EURO;2020;Weg;kurz;Sinn 2 0
11/06/2021 ['2020' 'EURO'] 10/06/2021 EURO;2020;Turnier;wissen 2 0
11/06/2021 ['2020' 'EURO'] 12/06/2021 EURO;2020;Wal;retten;Punkt;Schweiz 2 0
11/06/2021 ['2020' 'EURO'] 11/06/2021 EURO;2020;Türkei;Italien 2 0
11/06/2021 ['2020' 'EURO'] 12/06/2021 Italien;gewinnen;EM;Auftakt;Türkei 0 2
11/06/2021 ['2020' 'EURO'] 13/06/2021 EURO;2020;EM;Favorit;Belgien;besiegen;Russland 2 0
11/06/2021 ['2020' 'EURO'] 13/06/2021 EURO;2020;England;siegen;knapp;Kroatien 2 0
11/06/2021 ['2020' 'EURO'] 14/06/2021 EURO;2020;Niederlande;spät;Siegtor;Ukraine 2 0
11/06/2021 ['Sport'] 01/06/2021 100;Prozent;deutschen 0 1
11/06/2021 ['Sport'] 01/06/2021 sagen 0 1
11/06/2021 ['Sport'] 01/06/2021 Naomi;Osaka;brechen;Tennisturnier 0 1
11/06/2021 ['Sport'] 01/06/2021 Bild;Kia;Sportage 1 1
11/06/2021 ['Sport'] 01/06/2021 Werder;verlieren;Entscheidungsträger 0 1
11/06/2021 ['Sport'] 01/06/2021 nächst;Kater 0 1
11/06/2021 ['Sport'] 01/06/2021 Bild;Tag;Laufen;Sprühnebel 0 1
11/06/2021 ['Sport'] 01/06/2021 PETA;Maskottchen;Hennes;verbieten;bieten;1;FC;Köln;Alternative 0 1
11/06/2021 ['Sport'] 01/06/2021 Kriminelles;Meinung;sagen 0 1
11/06/2021 ['Sport'] 02/06/2021 akut;Phase;überwinden;Sport 1 0
11/06/2021 ['Sport'] 01/06/2021 bewundern;Verwundbarkeit 0 1
11/06/2021 ['Sport'] 01/06/2021 Athlet;Japan;ankommen 0 1
11/06/2021 ['Sport'] 02/06/2021 Virologe;Olympia;Verschiebung;raten 0 1
11/06/2021 ['Sport'] 01/06/2021 Höher;schnell;Sportunterricht;zeitgemäß 1 1
11/06/2021 ['Sport'] 03/06/2021 TY;Mythos;feiern;60;Geburtstag;Sportschau;Kulturerbe;Land 1 0
11/06/2021 ['Sport'] 01/06/2021 Osaka;erhalten;Zuspruch;Rückzug;Eklat 0 1
11/06/2021 ['Sport'] 02/06/2021 Horst;Heldt 0 1
11/06/2021 ['Sport'] 01/06/2021 Trinkflaschen;Sport;5;Testsieger;Überblick 1 1
11/06/2021 ['Sport'] 01/06/2021 verletzlich;fühlen 0 1
11/06/2021 ['Sport'] 02/06/2021 Anliegen;richten;System 0 1
11/06/2021 ['Sport'] 02/06/2021 Opel;Corsa;e;Rally;kommend;Profi 0 1
11/06/2021 ['Sport'] 03/06/2021 Frau;üblich;Verdächtige 0 1
11/06/2021 ['Sport'] 02/06/2021 hart;Duell;Naomi;Osaka 0 1
11/06/2021 ['Sport'] 02/06/2021 Mädchen;Schulsport;Trans;Frau 0 1
11/06/2021 ['Sport'] 03/06/2021 Nissan;Qashqai;voll;Softie 0 1
11/06/2021 ['Sport'] 03/06/2021 Aktions;Monat;US-amerikanischen;Impfungen;ankurbeln 0 1
11/06/2021 ['Sport'] 03/06/2021 Rimac;Nevera;E;Bolide;Traumwerten 0 1
11/06/2021 ['Sport'] 03/06/2021 Hoffnung;Tristesse 0 1
11/06/2021 ['Sport'] 04/06/2021 Pandemie 0 1
11/06/2021 ['Sport'] 05/06/2021 missdeuten;Muskelkater 0 1
11/06/2021 ['Sport'] 05/06/2021 Tuner;schrauben;Model;3;sehen;Super;Porsche;alt 0 1
11/06/2021 ['Sport'] 06/06/2021 opfern 0 1
11/06/2021 ['Sport'] 07/06/2021 schnellen;Form;aufhören;trainieren 0 1
11/06/2021 ['Sport'] 10/06/2021 komplett;spitzen;deutsch;Sport;Ablösung 1 1
11/06/2021 ['Sport'] 07/06/2021 Kanada;siegen;sensationell;Eishockey;WM 0 1
11/06/2021 ['Sport'] 07/06/2021 Corona;Impfung;Essen;Trinken;Rauchen;Sex;Sport;Info 1 0
11/06/2021 ['Sport'] 09/06/2021 Kettenraucher;Bergläufer 0 1
11/06/2021 ['Sport'] 10/06/2021 BMW;4er;Gran;Coupé 0 1
11/06/2021 ['Sport'] 08/06/2021 Experte;glauben;trotzen;bitter;Pleite;deutsch;Eishockey;Geschichte 0 1
11/06/2021 ['Sport'] 08/06/2021 VfB;Stuttgart;sprechen;Fall;Silas;Menschenhandel 0 1
11/06/2021 ['Sport'] 08/06/2021 Pandemie;Sport 1 0
11/06/2021 ['Sport'] 12/06/2021 Gast;Populisten;Despoten 0 1
11/06/2021 ['Sport'] 10/06/2021 5;Fußballhymnen;Sport 1 0
11/06/2021 ['Sport'] 11/06/2021 VfB;Sportdirektor;Silas;Opfer 1 0
11/06/2021 ['Sport'] 11/06/2021 VfB;Sportdirektor;Silas;Opfer 1 0
11/06/2021 ['Sport'] 13/06/2021 ZDF;weisen;Kritik;Übertragung;Kollaps;Eriksen 0 1
11/06/2021 ['Sport'] 11/06/2021 Sportartikelhersteller;EM;Boom;Pandemie;Beben 1 0
11/06/2021 ['Sport'] 11/06/2021 Abgekoppelt;Basis 0 1
11/06/2021 ['Sport'] 11/06/2021 Fußballhymnen;Sportbezug 1 0
11/06/2021 ['Sport'] 11/06/2021 Sport;Event;fiebern 1 0
11/06/2021 ['Sport'] 12/06/2021 Pandemie;EM;Absurdität 0 1
11/06/2021 ['Sport'] 12/06/2021 speziell;E;Bikes;motivieren;Kind;Sport 1 0
11/06/2021 ['Sport'] 12/06/2021 Tennis;Dimension 0 1
11/06/2021 ['Sport'] 13/06/2021 Wichtig;ausreichen;hoch;Dosis;einnehmen 0 1
11/06/2021 ['Sport'] 13/06/2021 Sportmediziner;Extrem;Belastung;Körper;Psyche;Turnier 1 0
11/06/2021 ['Sport'] 13/06/2021 Russland;lässt;ARD;Journalist;EM 0 1
11/06/2021 ['ZDF'] 01/06/2021 politisch;Ausgewogenheit;ARD;ZDF 1 1
11/06/2021 ['ZDF'] 01/06/2021 ARD;ZDF;berichten;Mensch;erziehen 1 1
11/06/2021 ['ZDF'] 01/06/2021 ZDF;Intendantenwahl;unerwartet;spannen 1 0
11/06/2021 ['ZDF'] 04/06/2021 CDU;neu;Umfrage;Sachsen;Anhalt;deutlich;AfD 0 1
11/06/2021 ['ZDF'] 05/06/2021 ZDF;Bauhaus;Live;Musik;Passenger 1 0
11/06/2021 ['ZDF'] 07/06/2021 ZDF;Journalist;bezeichnen;AfD;konservativ;Mehrheit 1 1
11/06/2021 ['ZDF'] 07/06/2021 Menschinnen;Fernsehgarten;Star;Kiewel;üben;Gendern;scheitern;kläglich 0 1
11/06/2021 ['ZDF'] 07/06/2021 Wirbel;ZDF;Interview;AfD;Spitzenkandidat;Kirchner 1 1
11/06/2021 ['ZDF'] 08/06/2021 Roter;schwarz;Freundeskreis;Kungelrunden;Führung;ZDF;auswürfeln 1 1
11/06/2021 ['ZDF'] 08/06/2021 ARD;ZDF;Sachlichkeit;verpflichten 1 0
11/06/2021 ['ZDF'] 08/06/2021 EM;Spiel;derzeit;Million;deutschen;gucken 0 1
11/06/2021 ['ZDF'] 09/06/2021 Fall;Aktenzeichen;XY;Baris;K;vermisst 0 1
11/06/2021 ['ZDF'] 10/06/2021 FDP;Politikerin;nerven;Lanz;ZDF;Talk;Haus 1 0
11/06/2021 ['ZDF'] 10/06/2021 Böhmi;brutzeln;Böhmermann;erhalten;Kochshow;ZDF 1 0
11/06/2021 ['ZDF'] 11/06/2021 kochen 0 1
11/06/2021 ['ZDF'] 12/06/2021 ZDF;Bauhaus;Live;Musik;MiMi;Westernhagen 1 0
11/06/2021 ['ZDF'] 13/06/2021 ZDF;weisen;Kritik;Übertragung;Kollaps;Eriksen 1 1
11/06/2021 ['ZDF'] 11/06/2021 Lanz;Özdemir;Baerbock;Lebenslauf;grillen;Ausrede;parat 0 1
11/06/2021 ['ZDF'] 11/06/2021 Zoff;Schlager;Kosmos;Florian;Silbereisen;nehmen;TV;Kollege;Promis;ZDF;Show;weg 1 0
11/06/2021 ['ZDF'] 13/06/2021 ZDF;weisen;Kritik;EM;Übertragung 1 1
11/06/2021 ['ZDF'] 13/06/2021 Dänemark;verschieben;Training;Kritik;Uefa;ZDF 1 0
11/06/2021 ['ZDF'] 13/06/2021 Kritik;UEFA;ZDF;Live;TV;Wiederanpfiff 1 0
11/06/2021 ['ZDF'] 13/06/2021 Kritik;UEFA;ZDF;Live;TV;Wiederanpfiff 1 0
11/06/2021 ['ZDF'] 13/06/2021 Ring;Distanz;Nähe 0 1
11/06/2021 ['ZDF'] 13/06/2021 Debatte;ZDF;Eriksen;Drama;Schweigen;Béla;Réthy;Leistung 1 1
11/06/2021 ['ZDF'] 13/06/2021 Kiewels;Bettenbotschaften;flüstern;live;TV;Sex 0 1
11/06/2021 ['ZDF'] 14/06/2021 Plädoyer;Breyer;Rethy;ZDF 1 1
11/06/2021 ['ZDF'] 14/06/2021 ZDF;verwahren;Kritik;EM;Übertragung 1 0
11/06/2021 ['Sahra' 'Wagenknecht'] 01/06/2021 nerven;Wagenknecht;schießen;Grüne;Überheblichkeit 1 2
11/06/2021 ['Sahra' 'Wagenknecht'] 02/06/2021 Wagenknecht;sprechen;Lafontaine;lieben;Oskar;Kind 1 2
11/06/2021 ['Sahra' 'Wagenknecht'] 10/06/2021 Parteikollegen;beantragen;Sahra;Wagenknechts;Ausschluss 2 2
11/06/2021 ['Sahra' 'Wagenknecht'] 12/06/2021 Bartsch;warnen;eindringlich;Wagenknecht;Parteiausschluss 1 2
11/06/2021 ['Sahra' 'Wagenknecht'] 07/06/2021 sozial;Frage;Totalausfall;Wagenknecht;entlarven;AfD;Gerede;bürgerliche;Opposition 1 2
11/06/2021 ['Sahra' 'Wagenknecht'] 07/06/2021 gerne;mal;Sachsen;Anhalt;hören 0 2
11/06/2021 ['Sahra' 'Wagenknecht'] 08/06/2021 Sahra;Wagenknecht 2 0
11/06/2021 ['Sahra' 'Wagenknecht'] 10/06/2021 Linke;Wagenknechts;Parteiausschluss 1 2
11/06/2021 ['Sahra' 'Wagenknecht'] 11/06/2021 Linke;spitzen;Wagenknechts;Seite 1 2
11/06/2021 ['Sahra' 'Wagenknecht'] 13/06/2021 Sahra;Wagenknecht;warnen;Linke;drohend;Wahlniederlage 2 0
11/06/2021 ['Sahra' 'Wagenknecht'] 12/06/2021 Cancel;Culture;Wagenknecht;sehen;Ausschlussantrag;bestätigen 1 2
11/06/2021 ['MagentaTV'] 12/06/2021 Bewusstsein;Mensch;Quotensturz;ARD 0 1
11/06/2021 ['MagentaTV'] 12/06/2021 Performance;Störung;MagentaTV;erreichbar 1 1
11/06/2021 ['INSM'] 12/06/2021 Lobbyist;Baerbock;Verbotskampagne;gängeln;Faktencheck 0 1
11/06/2021 ['INSM'] 14/06/2021 Antisemitismus;Vorwurf;Wahlkampf 0 1
11/06/2021 ['Cornwall'] 03/06/2021 Queen;Elisabeth;empfangen;US-amerikanischen;Präsident;Schloss;Windsor 0 1
11/06/2021 ['Cornwall'] 12/06/2021 Konkurrenz;China;Seidenstraße 0 1
11/06/2021 ['Cornwall'] 10/06/2021 Bild;Tag;Haufen;Schrott 0 1
11/06/2021 ['Cornwall'] 11/06/2021 Regierungschefs;treffen;Cornwall 1 0
11/06/2021 ['Cornwall'] 10/06/2021 Bidens;Gipfeltournee;beginnen;Cornwall 1 1
11/06/2021 ['Cornwall'] 11/06/2021 Gastgeber;unbeirrbar 0 1
11/06/2021 ['Cornwall'] 12/06/2021 konstruktiv;Diskussion;Merkel;sprechen;G7;Gipfel;Biden;Nordstream;2 0 1
11/06/2021 ['Cornwall'] 11/06/2021 Merkel;landen;Cornwall;15;G7;Gipfel 1 0
11/06/2021 ['Cornwall'] 11/06/2021 Merkel;landen;Cornwall;15;G7;Gipfel 1 0
11/06/2021 ['Cornwall'] 11/06/2021 Ellenbogengrüße;Strand;Fotoshootings;Klimaprotest 0 1
11/06/2021 ['Cornwall'] 11/06/2021 Thema;G;7;Gipfel;Cornwall;wichtig 1 0
11/06/2021 ['Cornwall'] 11/06/2021 G7;Gipfel;Cornwall;starten 1 0
11/06/2021 ['Cornwall'] 13/06/2021 G7;halten;China;Seidenstraße 0 1
11/06/2021 ['Cornwall'] 12/06/2021 Harmonie;Steinbutt;Queen 0 1
11/06/2021 ['Cornwall'] 12/06/2021 China;USA;zoffen;G7;Gipfel 0 1
11/06/2021 ['Cornwall'] 13/06/2021 konstruktiv;Diskussion;Merkel;sprechen;Biden;erzielen;Fortschritt;Nordstream;2 0 1
11/06/2021 ['Cornwall'] 13/06/2021 Schönes;Bild;vage;Beschluß 0 1
11/06/2021 ['Cornwall'] 13/06/2021 Klimaschutz;leer;Versprechen 0 1
11/06/2021 ['Cornwall'] 14/06/2021 Plötzlich;Macron;Johnson;Wortgefecht;Würstchen 0 1
11/06/2021 ['G7'] 03/06/2021 Queen;Elisabeth;empfangen;US-amerikanischen;Präsident;Schloss;Windsor 0 1
11/06/2021 ['G7'] 04/06/2021 Milliardenprojekt;Mindeststeuer;Amazon;Co;ernst 0 1
11/06/2021 ['G7'] 04/06/2021 G7;Finanzminister;besprechen;Digitalsteuer 1 0
11/06/2021 ['G7'] 05/06/2021 G7;einigen;Mindeststeuer;Großkonzerne 1 1
11/06/2021 ['G7'] 05/06/2021 G7;Staat;global;Mindeststeuer;15;Prozent 1 1
11/06/2021 ['G7'] 04/06/2021 G7;gemeinsam;Corona;bekämpfen 1 1
11/06/2021 ['G7'] 05/06/2021 Einigung;weltweite;Digitalsteuer;stehen;bevor 0 1
11/06/2021 ['G7'] 07/06/2021 3;Million;Halloren;Satire;Chance;Alzheimer;Hoffnung 0 1
11/06/2021 ['G7'] 05/06/2021 Scholz;stellen;Durchbruch;Aussicht 0 1
11/06/2021 ['G7'] 05/06/2021 Gemeinsam;künftig;Pandemien 0 1
11/06/2021 ['G7'] 06/06/2021 schwierig;Kampf 0 1
11/06/2021 ['G7'] 05/06/2021 Mumbai;Dehli;lockern;Corona;Maßnahme 0 1
11/06/2021 ['G7'] 05/06/2021 G7;Digitalsteuer 1 1
11/06/2021 ['G7'] 05/06/2021 G7;beschließen;Steuerrevolution 1 1
11/06/2021 ['G7'] 05/06/2021 G7;Steuer;Konzern;eintreiben 1 0
11/06/2021 ['G7'] 05/06/2021 G7;Staat;global;Mindeststeuer;Konzern 1 0
11/06/2021 ['G7'] 09/06/2021 profitieren;global;Mindeststeuer 0 1
11/06/2021 ['G7'] 06/06/2021 RKI;melden;2440;Neuinfektionen 0 1
11/06/2021 ['G7'] 06/06/2021 historisch;Durchbruch 0 1
11/06/2021 ['G7'] 06/06/2021 Boris;Johnson;fordern;Impfung;Weltbevölkerung;2022 0 1
11/06/2021 ['G7'] 06/06/2021 G7;Finanzminister;global;Mindeststeuer 1 0
11/06/2021 ['G7'] 07/06/2021 Scholz;Steuerrevolution;Illusion 0 1
11/06/2021 ['G7'] 07/06/2021 Klimaschutz;G7;Staat;Billion;Euro;kosten 1 1
11/06/2021 ['G7'] 07/06/2021 G7;weltweite;Mindeststeuer;Großkonzerne 1 0
11/06/2021 ['G7'] 10/06/2021 bloß;ahnen 0 1
11/06/2021 ['G7'] 09/06/2021 Star;fordern;Umverteilung;Impfdosen 0 1
11/06/2021 ['G7'] 08/06/2021 Mindeststeuer;sorgen;Kursverluste 0 1
11/06/2021 ['G7'] 09/06/2021 Baerbock;Test;Grüne;Realität;ankommen 0 1
11/06/2021 ['G7'] 12/06/2021 Konkurrenz;China;Seidenstraße 0 1
11/06/2021 ['G7'] 09/06/2021 Joe;Biden;Weg;Auslandsreise;Europa 0 1
11/06/2021 ['G7'] 09/06/2021 Brite;Ausnahme;Mindeststeuer 0 1
11/06/2021 ['G7'] 10/06/2021 Bild;Tag;Haufen;Schrott 0 1
11/06/2021 ['G7'] 10/06/2021 G7;Annäherung;Japan;Südkorea 1 1
11/06/2021 ['G7'] 12/06/2021 G7;kontern;China;Seidenstraße;global;Infrastrukturplan 1 1
11/06/2021 ['G7'] 12/06/2021 Europäer;setzen;Boris;Johnson;Streit;Handelsdeal;Druck 0 1
11/06/2021 ['G7'] 10/06/2021 Front;bröckeln;schnellen;London;global;Mindeststeuer;ausnehmen 0 1
11/06/2021 ['G7'] 12/06/2021 G7;beschließen;Gesundheitspakt;künftig;Pandemien 1 1
11/06/2021 ['G7'] 10/06/2021 Biden;fordern;G7;Gipfel;Zusammenhalt 1 0
11/06/2021 ['G7'] 11/06/2021 G7;arm;Land;Milliarde;Impfdosen;helfen 1 0
11/06/2021 ['G7'] 11/06/2021 Gemeinsame;Wert;Interesse 0 1
11/06/2021 ['G7'] 10/06/2021 USA;kaufen;500;Million;Impfdosen;Land 0 1
11/06/2021 ['G7'] 11/06/2021 Heiko;Maas;rufen;Geschlossenheit;Russland;China 0 1
11/06/2021 ['G7'] 11/06/2021 G7;Staat;planen;Spende;Milliarde;Impfdosen 1 0
11/06/2021 ['G7'] 11/06/2021 Regierungschefs;treffen;Cornwall 0 1
11/06/2021 ['G7'] 10/06/2021 USA;bereit;Impfstoff;Großspende 0 1
11/06/2021 ['G7'] 11/06/2021 Maas;Geschlossenheit;Russland 0 1
11/06/2021 ['G7'] 10/06/2021 Bidens;Gipfeltournee;beginnen;Cornwall 0 1
11/06/2021 ['G7'] 11/06/2021 Biden;Johnson;betonen;gegenseitig;Beistand 0 1
11/06/2021 ['G7'] 12/06/2021 Biden;G7;Konkurrenz;China 1 1
11/06/2021 ['G7'] 11/06/2021 G7;Harmonie 1 1
11/06/2021 ['G7'] 12/06/2021 Biden;schwören;G7;Konkurrenz;China 1 0
11/06/2021 ['G7'] 11/06/2021 Annäherung;Japan;Südkorea 0 1
11/06/2021 ['G7'] 11/06/2021 G7;Gipfel;Corona;Ausbruch;Hotel;Merkel;Sicherheitsleuten 1 0
11/06/2021 ['G7'] 12/06/2021 konstruktiv;Diskussion;Merkel;sprechen;G7;Gipfel;Biden;Nordstream;2 1 1
11/06/2021 ['G7'] 12/06/2021 obwohl;fehlen;Trump;China;befeuern;Plan;alt;Industrie;Nation 0 1
11/06/2021 ['G7'] 11/06/2021 DKG;Intensivbettenzahl;korrekt 0 1
11/06/2021 ['G7'] 11/06/2021 Lehre;Pandemie;ziehen 0 1
11/06/2021 ['G7'] 11/06/2021 letzt;Mal;Merkel 0 1
11/06/2021 ['G7'] 11/06/2021 G7;Land;Milliarde;Corona;Impfdosen;spenden 1 0
11/06/2021 ['G7'] 11/06/2021 Merkel;landen;Cornwall;15;G7;Gipfel 1 0
11/06/2021 ['G7'] 11/06/2021 G7;Milliarde;Impfdosen;spenden 1 0
11/06/2021 ['G7'] 11/06/2021 Merkel;landen;Cornwall;15;G7;Gipfel 1 0
11/06/2021 ['G7'] 11/06/2021 G7;Milliarde;Impfdosen;spenden 1 0
11/06/2021 ['G7'] 11/06/2021 Friedhof;Zusagen 0 1
11/06/2021 ['G7'] 11/06/2021 G7;Gipfel;Cornwall;starten 1 0
11/06/2021 ['G7'] 13/06/2021 Geld;Klimaschutz;arm;Land 0 1
11/06/2021 ['G7'] 13/06/2021 gut;Weg;Nord;Stream;2 0 1
11/06/2021 ['G7'] 13/06/2021 Merkel;kündigen;Impf;Hilfe 0 1
11/06/2021 ['G7'] 13/06/2021 100;Milliarde;Dollar;Klimaschutz;Entwicklungsländern;planen 0 1
11/06/2021 ['G7'] 13/06/2021 G7;halten;China;Seidenstraße 1 1
11/06/2021 ['G7'] 13/06/2021 G7;planen;Klimaschutz;Hilfe;arm;Land 1 1
11/06/2021 ['G7'] 12/06/2021 Harmonie;Steinbutt;Queen 0 1
11/06/2021 ['G7'] 12/06/2021 18;Monat;Dunkel 0 1
11/06/2021 ['G7'] 12/06/2021 China;USA;streiten;Ursprung;Coronavirus 0 1
11/06/2021 ['G7'] 12/06/2021 Industriestaaten;Milliarde;Impfdosen;spenden 0 1
11/06/2021 ['G7'] 12/06/2021 G7;kehren;Multilateralismus 1 1
11/06/2021 ['G7'] 12/06/2021 China;USA;zoffen;G7;Gipfel 1 1
11/06/2021 ['G7'] 12/06/2021 G7;Gipfel;China;Dominanz;verhindern 1 0
11/06/2021 ['G7'] 12/06/2021 G7;Gipfel;China;Dominanz;verhindern 1 0
11/06/2021 ['G7'] 13/06/2021 Biden;schwören;G7;China;Konkurrenz 1 1
11/06/2021 ['G7'] 12/06/2021 Royaler;Glanz;G7;Gipfel;besuchen;Queen 1 1
11/06/2021 ['G7'] 12/06/2021 11;06;2021 0 1
11/06/2021 ['G7'] 13/06/2021 konstruktiv;Diskussion;Merkel;sprechen;Biden;erzielen;Fortschritt;Nordstream;2 0 1
11/06/2021 ['G7'] 12/06/2021 Corona;Fauxpas;G7;Gipfel;Merkel;schütteln;Würdenträger;Begrüßung;Hand 1 1
11/06/2021 ['G7'] 13/06/2021 Schönes;Bild;vage;Beschluß 0 1
11/06/2021 ['G7'] 13/06/2021 Merkel;sichern;erheblich;Beitrag 0 1
11/06/2021 ['G7'] 13/06/2021 Härte;China 0 1
11/06/2021 ['G7'] 13/06/2021 China;zweifeln;Führungsrolle;G7;Staat 1 1
11/06/2021 ['G7'] 13/06/2021 G7;fordern;Untersuchung;Corona;Ursprung 1 1
11/06/2021 ['G7'] 13/06/2021 China;sprechen;G7;Legitimation 1 1
11/06/2021 ['G7'] 13/06/2021 G7;Biden;leicht 1 1
11/06/2021 ['G7'] 13/06/2021 Bidens;Balsam;Deutsche;folgen;Ernüchterung;Kulisse 0 1
11/06/2021 ['G7'] 13/06/2021 Arzt;impfen;Kind;Stiko;Rat;offen;Messer;laufen;lassen 0 1
11/06/2021 ['G7'] 13/06/2021 Ansage;China;G7;Staat;fordern;Untersuchung;Pandemie;Ursprung 1 0
11/06/2021 ['G7'] 13/06/2021 G7;Gipfel;Merkel;2;3;Milliarde;Impfdosen;arm;Land 1 0
11/06/2021 ['G7'] 14/06/2021 Internationale;Hilfsorganisation;kritisieren;Gipfelbeschlüsse 0 1
11/06/2021 ['G7'] 14/06/2021 G7;Staat;fordern;vertiefen;WHO;Untersuchung;Corona;Ursprung 1 0
11/06/2021 ['G7'] 14/06/2021 Merkel;Klassentreffen;Mächtige 0 1
11/06/2021 ['G7'] 14/06/2021 2;3;Milliarde;Impfdosen;arm;Land 0 1
11/06/2021 ['G7'] 14/06/2021 G7;Gipfeltreffen;Biden;leicht 1 1
11/06/2021 ['G7'] 14/06/2021 G7;Transatlantische;Strandparty 1 1
11/06/2021 ['G7'] 14/06/2021 Meinung;G7;Transatlantische;Strandparty 1 0
11/06/2021 ['G7'] 14/06/2021 Plötzlich;Macron;Johnson;Wortgefecht;Würstchen 0 1
11/06/2021 ['Lucinda' 'Riley'] 12/06/2021 Bestseller;Autorin;Lucinda;Riley;tot 2 2
11/06/2021 ['Lucinda' 'Riley'] 12/06/2021 Bestsellerautorin;Lucinda;Riley;56;sterben 2 0
11/06/2021 ['Curevac'] 01/06/2021 Curevac;schaffen;Zulassung;Juni 1 1
11/06/2021 ['Curevac'] 07/06/2021 Biontech;Curevac;Tesla;BMW;Legende;liefern;Antwort 1 0
11/06/2021 ['Curevac'] 09/06/2021 Hoffen;nächst;Zalando;Warnung;FOMO;Falle 0 1
11/06/2021 ['Curevac'] 08/06/2021 Curevac;Vakzin;verspäten;August 1 1
11/06/2021 ['Curevac'] 08/06/2021 Curevac;Impfstoff;August 1 1
11/06/2021 ['Curevac'] 10/06/2021 bleiben;Curevac;Impfstoff 1 1
12/06/2021 ['Belgien' 'Russland'] 09/06/2021 Niederlande;heben;PCR;Testpflicht;Einreise;Deutschland 0 2
12/06/2021 ['Belgien' 'Russland'] 13/06/2021 Belgien;landen;Pflichtsieg;Auftakt;Russland 2 0
12/06/2021 ['Belgien' 'Russland'] 13/06/2021 Chris;I;love;you;Lukakus;Gruß;Belgien;Sieg;Russland 2 2
12/06/2021 ['Belgien' 'Russland'] 13/06/2021 Belgien;gewinnen;Russland 2 1
12/06/2021 ['Belgien' 'Russland'] 13/06/2021 Lukaku;treffen;doppeln;grüßen;Eriksen 0 2
12/06/2021 ['Belgien' 'Russland'] 13/06/2021 Lukaku;küsst;Kamera;Eriksen 0 2
12/06/2021 ['Belgien' 'Russland'] 13/06/2021 EM;Favorit;Belgien;besiegen;Russland 2 0
12/06/2021 ['Belgien' 'Russland'] 13/06/2021 EURO;2020;EM;Favorit;Belgien;besiegen;Russland 2 0
12/06/2021 ['Belgien' 'Russland'] 13/06/2021 Doppelpack;Lukaku;Belgien;souverän;Auftakt;Sieg;chancenloses;Russland 2 2
12/06/2021 ['Tennis'] 01/06/2021 100;Prozent;deutschen 0 1
12/06/2021 ['Tennis'] 01/06/2021 lärmend;Schweigen;Nummer;Welt 0 1
12/06/2021 ['Tennis'] 01/06/2021 Naomi;Osaka;brechen;Tennisturnier 1 0
12/06/2021 ['Tennis'] 01/06/2021 Osakas;Presse;Boykott;eskalieren;Rückzug 0 1
12/06/2021 ['Tennis'] 01/06/2021 Tennis;Dame;drohen;historische;Tristesse 1 0
12/06/2021 ['Tennis'] 01/06/2021 Kriminelles;Meinung;sagen 0 1
12/06/2021 ['Tennis'] 01/06/2021 bewundern;Verwundbarkeit 0 1
12/06/2021 ['Tennis'] 01/06/2021 Osaka;erhalten;Zuspruch;Rückzug;Eklat 0 1
12/06/2021 ['Tennis'] 01/06/2021 verletzlich;fühlen 0 1
12/06/2021 ['Tennis'] 02/06/2021 deutsch;Dame;French;Open 0 1
12/06/2021 ['Tennis'] 02/06/2021 Grand;Slam;Organisator;sagen;Naomi;Osaka;Unterstützung 0 1
12/06/2021 ['Tennis'] 02/06/2021 Struff;schlagen;Geheimfavoriten 0 1
12/06/2021 ['Tennis'] 02/06/2021 Naomi;Osaka;täglich;Kampf 0 1
12/06/2021 ['Tennis'] 02/06/2021 Zverev;steigern;Satz;Rund;3 0 1
12/06/2021 ['Tennis'] 02/06/2021 hart;Duell;Naomi;Osaka 0 1
12/06/2021 ['Tennis'] 04/06/2021 Zverev;marschieren;lockern;Achtelfinale 0 1
12/06/2021 ['Tennis'] 05/06/2021 Schweden;stoischer;Tennislegende 1 1
12/06/2021 ['Tennis'] 04/06/2021 Quälen;Leidenschaft 0 1
12/06/2021 ['Tennis'] 05/06/2021 Struff;knacken;Rafael;Nadal 0 1
12/06/2021 ['Tennis'] 06/06/2021 Koepfer;Federer;vorbei 0 1
12/06/2021 ['Tennis'] 06/06/2021 Einzug;Achtelfinale;Tennis;Star;Federer;steigen;French;Open 1 1
12/06/2021 ['Tennis'] 07/06/2021 Kournikova;knacken;heimlich;40 0 1
12/06/2021 ['Tennis'] 07/06/2021 Federer;lässt;schales;Gefühl 0 1
12/06/2021 ['Tennis'] 09/06/2021 Zverev;erreichen;Halbfinale 0 1
12/06/2021 ['Tennis'] 09/06/2021 verrückt;stoppen;Zverev 0 1
12/06/2021 ['Tennis'] 08/06/2021 müssten;Angst;Zverev 0 1
12/06/2021 ['Tennis'] 09/06/2021 Tennis;Supertalent;lässt;entzaubern 1 0
12/06/2021 ['Tennis'] 09/06/2021 Zverevs;Kampf;doppeln;Horror;Bilanz 0 1
12/06/2021 ['Tennis'] 12/06/2021 Djokovic;verneigen;Nadal 0 1
12/06/2021 ['Tennis'] 12/06/2021 Krejcikova;gelingen;Tennis;Sensation 1 0
12/06/2021 ['Tennis'] 10/06/2021 Tennisdamen;sorgen;Grand;Slam;Kuriosum 1 0
12/06/2021 ['Tennis'] 11/06/2021 Überraschendes;French;Open;Finale;perfekt 0 1
12/06/2021 ['Tennis'] 12/06/2021 Krejcikova;erkämpfen;Titel 0 1
12/06/2021 ['Tennis'] 11/06/2021 deutschen;Frau;verlieren;Frankreich 0 1
12/06/2021 ['Tennis'] 11/06/2021 Zverev;erzwingen;Satz 0 1
12/06/2021 ['Tennis'] 11/06/2021 Tennisprofi;Alexander;Zverev;Unvollendete 1 0
12/06/2021 ['Tennis'] 12/06/2021 Zverev;verpasst;Endspiel;Träne;Sieger 0 1
12/06/2021 ['Tennis'] 12/06/2021 Zverev;verpasst;Finale;French;Open 0 1
12/06/2021 ['Tennis'] 12/06/2021 Alexander;Zverev;verpasst;Finaleinzug 0 1
12/06/2021 ['Tennis'] 12/06/2021 Zverev;verpasst;Finale;Tennis;Drama 1 1
12/06/2021 ['Tennis'] 12/06/2021 Tennis;Dimension 1 1
12/06/2021 ['Tennis'] 12/06/2021 Alexander;Zverev;Unvollendete 0 1
12/06/2021 ['Tennis'] 12/06/2021 Tennisprofi;Alexander;Zverev;bleiben;Unvollendete 1 0
12/06/2021 ['Tennis'] 13/06/2021 Verletzung 0 1
12/06/2021 ['Tennis'] 13/06/2021 Krejcikova;widmen;Titel;verstorben;Novotna 0 1
12/06/2021 ['Tennis'] 14/06/2021 gnadenlose;Gummimann;schreiben;Tennis;Geschichte 1 0
12/06/2021 ['Elizabeth' 'Queen'] 07/06/2021 Harry;Meghan;verkünden;Geburt;Tochter;Queen;hocherfreut 1 2
12/06/2021 ['Elizabeth' 'Queen'] 14/06/2021 Queen;empfangen;13;US-amerikanischen;Präsident 1 2
12/06/2021 ['Poulsen' 'Yussuf'] 03/06/2021 DFB;Remis;Dänemark;Löw;sehen;Licht;Schatten;Rüffel;Abwehr 0 2
12/06/2021 ['Carolin' 'Emcke'] 12/06/2021 Leid;Jude;ultimativ;Argument;grüne;Politik 0 2
12/06/2021 ['Carolin' 'Emcke'] 12/06/2021 Özdemir;distanzieren;Emckes;Vergleich;Klimaforschern;verfolgen;Jude 1 2
12/06/2021 ['Carolin' 'Emcke'] 13/06/2021 Grüne;Gastrednerin;sorgen;CDU;Empörung 0 2
12/06/2021 ['Carolin' 'Emcke'] 13/06/2021 Carolin;Emckes;unverzeihliche;Dummheit 2 2
12/06/2021 ['Carolin' 'Emcke'] 13/06/2021 Absicht;missverstanden 0 2
12/06/2021 ['Carolin' 'Emcke'] 13/06/2021 Carolin;Emcke;zielen;verunglimpfen 2 1
12/06/2021 ['Carolin' 'Emcke'] 14/06/2021 Antisemitismus;Vorwurf;Wahlkampf 0 2
12/06/2021 ['Christian' 'Eriksen'] 12/06/2021 Däne;lieb;Bescheidene 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 aussehen;handeln;Kammerflimmern 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 echt;Kapitän;Dänemark;Held;Abends 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Gänsehaut;Moment;Fan;erfahren;Eriksen;leben 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 ZDF;weisen;Kritik;Übertragung;Kollaps;Eriksen 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Finnland;gewinnen;EM;Spiel;Highlights;Video 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Eriksen;zeigen;wichtig;Moment;Karriere;Größe 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Chris;I;love;you;Lukakus;Gruß;Belgien;Sieg;Russland 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Vorrundenpartie;medizinisch;Notfall;fortsetzen 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 fähig;spielen 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Finnland;gewinnen;schlimm;Spiel;EM 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Lukaku;treffen;doppeln;grüßen;Eriksen 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Däne;Eriksen;Kollaps;wach 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 EM;Spiel;laufen;Eriksen;Schock 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 stillen;Kopenhagen 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Lukaku;küsst;Kamera;Eriksen 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Christian;Eriksen;Notarzteinsatz;Bewusstsein 2 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Drama;Dänemark;Christian;Eriksen 2 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 EM;Favorit;Belgien;besiegen;Russland 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 EM;Drama;Däne;Star;Per;Facetime;ermunterte;tapfer;Eriksen;Team;Weiterspielen 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 kranken;Welt;Empörung;TV;Bild;Zusammenbruch;Eriksen 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Eriksen;Kollaps;EM;Neuling;Finnland;gewinnen;sensationell;geschockt;Dänemark 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Finnland;gewinnen;EM;Spiel;Highlights;Video 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Christian;Eriksen;stabil 2 0
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Dänemark;verschieben;Training;Kritik;Uefa;ZDF 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 schulterbare;Verantwortung 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Eriksen;bestehen;medizinisch;Test 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Kjaer;retten;Eriksen;vermutlich;Leben 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Lawine;stillen 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 TV;Regisseur;weisen;Voyeurismus 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Ring;Distanz;Nähe 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Herzstillstand 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Schockzustand;Fußball;spielen 0 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 weg;Teamarzt;bestätigen;Herzinfarkt;Eriksen;Hoffnung 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Debatte;ZDF;Eriksen;Drama;Schweigen;Béla;Réthy;Leistung 1 2
12/06/2021 ['Christian' 'Eriksen'] 13/06/2021 Neuigkeit;Eriksen;sorgen;dänische;finnische;Fan;Gänsehaut;Moment 1 2
12/06/2021 ['Christian' 'Eriksen'] 14/06/2021 Plädoyer;Breyer;Rethy;ZDF 0 2
12/06/2021 ['Christian' 'Eriksen'] 14/06/2021 Tod;nahe;Entscheidungsträger 0 2
12/06/2021 ['Christian' 'Eriksen'] 14/06/2021 Eriksen;Mitspieler;äußern;emotional;beängstigend;Moment;Leben 1 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 erstaunlich;Tweet;EM 0 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 erschreckend;Auftritt;Türkei 1 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Frust;Ex;Geheimfavoriten 0 2
12/06/2021 ['Italien' 'Türkei'] 11/06/2021 Italien;Türkei;eröffnen;Fußball;EM 2 0
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Euphorie 0 2
12/06/2021 ['Italien' 'Türkei'] 11/06/2021 schrägste;EM;Geschichte 0 2
12/06/2021 ['Italien' 'Türkei'] 11/06/2021 Italien;magisch;Maestro;Mancini 1 2
12/06/2021 ['Italien' 'Türkei'] 11/06/2021 EURO;2020;Türkei;Italien 2 0
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 selbstbewusste;Auftreten;Italiener;souverän;Sieg 1 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Türkei;Italien;Highlights;Video 2 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 geradezu;bescheidene;Eröffnungsfeier;Europameisterschaft 0 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Italien;liefern;Show;EM;Auftakt;Türkei;kämpferisch 2 0
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Italien;gewinnen;klaren;Türkei 2 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Italien;gewinnen;Eröffnungsspiel;Türkei 2 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Italien;Fan;feiern;Sieg;Türkei 2 0
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Italien;jubeln;Eigentor;Torwart;Patzer 1 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Italien;Fan;feiern;Sieg;Türkei 2 0
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 lieb;Tor 0 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 gewinnen;Römer 0 2
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Italien;gewinnen;EM;Auftakt;Türkei 2 1
12/06/2021 ['Italien' 'Türkei'] 12/06/2021 Italien;gelingen;Traumstart;Türkei;Chance;Ex;BVB;Profi;Immobile;treffen 2 2
12/06/2021 ['Schweiz' 'Wal'] 12/06/2021 Schweiz;spielen;unentschieden;Wal 2 2
12/06/2021 ['Schweiz' 'Wal'] 12/06/2021 Schweiz;mühen;missglücktem;Auftakt 1 2
12/06/2021 ['Schweiz' 'Wal'] 12/06/2021 Wal;retten;Punkt;Schweiz 2 2
12/06/2021 ['Schweiz' 'Wal'] 12/06/2021 EURO;2020;Wal;retten;Punkt;Schweiz 2 0
12/06/2021 ['Schweiz' 'Wal'] 12/06/2021 Bitteres;Gegentor;Überlegene;Schweizer;enttäuschen;Spiel;Wal 2 2
12/06/2021 ['Schweiz' 'Wal'] 13/06/2021 Turban;Tor;kosten;Schweiz;Sieg;Highlights;Video 1 2
12/06/2021 ['Schweiz' 'Wal'] 13/06/2021 Schweiz;Wal;1;1;Druck 2 0
12/06/2021 ['Schweiz' 'Wal'] 13/06/2021 Schweiz;Unentschieden 1 2
12/06/2021 ['EM' 'Spielplan'] 11/06/2021 spielen 0 2
12/06/2021 ['MagentaTV'] 12/06/2021 Bewusstsein;Mensch;Quotensturz;ARD 0 1
12/06/2021 ['MagentaTV'] 12/06/2021 Performance;Störung;MagentaTV;erreichbar 1 1
12/06/2021 ['Nadal'] 05/06/2021 Struff;knacken;Rafael;Nadal 1 0
12/06/2021 ['Nadal'] 09/06/2021 Nadal;Djokovic;Halbfinale;Zverev;trainieren 1 0
12/06/2021 ['Nadal'] 10/06/2021 bizarre;Auftritt;Novak;Djokovic;Werwolf 0 1
12/06/2021 ['Nadal'] 12/06/2021 Djokovic;triumphieren;Nadal 1 1
12/06/2021 ['Nadal'] 12/06/2021 Djokovic;verneigen;Nadal 1 1
12/06/2021 ['Nadal'] 10/06/2021 Nadals;unfassbare;Serie;enden;folgenlos 1 1
12/06/2021 ['Nadal'] 12/06/2021 Sieg;Nadal;Djokovic;19;Grand;Slam;Titel 1 0
12/06/2021 ['Nadal'] 12/06/2021 Alexander;Zverev;verpasst;Finaleinzug 0 1
12/06/2021 ['Nadal'] 12/06/2021 Djokovic;ringen;Paris;Champion;Nadal;nieder 1 1
12/06/2021 ['Nadal'] 12/06/2021 Tennis;Dimension 0 1
12/06/2021 ['Nadal'] 12/06/2021 Djokovic;entthronen;Sandplatz;König;Nadal;grandios;Match;ziehen;Finale 1 0
12/06/2021 ['Nadal'] 13/06/2021 Wahnsinn;Finale;Djokovic;drehen;Zweisatz;Rückstand;plötzlich 0 1
12/06/2021 ['Nadal'] 14/06/2021 Djokovic;krönen;epische;Aufholjagd;Paris;Titel 0 1
12/06/2021 ['Europameisterschaft'] 01/06/2021 Deutschland;besiegen;Dänemark;Elfmeter;Krimi 0 1
12/06/2021 ['Europameisterschaft'] 01/06/2021 Dahmens;Faust;bringen;DFB;Team;Halbfinale 0 1
12/06/2021 ['Europameisterschaft'] 01/06/2021 Fernseher;s;günstig 0 1
12/06/2021 ['Europameisterschaft'] 01/06/2021 Deutschland;gewinnen;Elfmeterkrimi;Dänemark;ziehen;Halbfinale 0 1
12/06/2021 ['Europameisterschaft'] 02/06/2021 EM;2021;stark;Technik;Deal;Fußball;Event 0 1
12/06/2021 ['Europameisterschaft'] 02/06/2021 DFB;Team;Berg;Kraft 0 1
12/06/2021 ['Europameisterschaft'] 04/06/2021 EM;gewinnen;Abi 0 1
12/06/2021 ['Europameisterschaft'] 03/06/2021 Deutschland;schaffen;Unentschieden;Dänemark 0 1
12/06/2021 ['Europameisterschaft'] 03/06/2021 EM;DFB;Team;Lektion;lernen 0 1
12/06/2021 ['Europameisterschaft'] 03/06/2021 Schatten;Licht 0 1
12/06/2021 ['Europameisterschaft'] 04/06/2021 14;000;Fan;Münchner;EM;Spiel 0 1
12/06/2021 ['Europameisterschaft'] 04/06/2021 14;000;Freund 0 1
12/06/2021 ['Europameisterschaft'] 04/06/2021 Triumph;Niederlande;Deutschland;erreichen;Finale;U21;Europameisterschaft 1 0
12/06/2021 ['Europameisterschaft'] 07/06/2021 Oma;lieb;deutsch;U21;Fußball;Europameister 0 1
12/06/2021 ['Europameisterschaft'] 07/06/2021 UEFA;Deutschland;klären 0 1
12/06/2021 ['Europameisterschaft'] 07/06/2021 Prime;Day;2021;Fernseher;Deal;Sicht 0 1
12/06/2021 ['Europameisterschaft'] 07/06/2021 Junior;Deutschland;U21;krönen;Portugal;Europameister 0 1
12/06/2021 ['Europameisterschaft'] 08/06/2021 Kuntz;Ansprache;Löwe;Adleraugen;Hyänen;abkippenden;Sechsern 0 1
12/06/2021 ['Europameisterschaft'] 08/06/2021 DFB;Team;fahren;Torfestival;EM 0 1
12/06/2021 ['Europameisterschaft'] 08/06/2021 Problem;lässt;Löw;Ruhe 0 1
12/06/2021 ['Europameisterschaft'] 10/06/2021 Corona;Lage;EM;Spielorten 0 1
12/06/2021 ['Europameisterschaft'] 08/06/2021 DFB;Team;schießen;EM;warm 0 1
12/06/2021 ['Europameisterschaft'] 08/06/2021 Superstars;EM;verpassen 0 1
12/06/2021 ['Europameisterschaft'] 08/06/2021 Deutschland;UEFA;Ärger 0 1
12/06/2021 ['Europameisterschaft'] 10/06/2021 Nachricht;Ticketinhaber;München 0 1
12/06/2021 ['Europameisterschaft'] 09/06/2021 Angst;nächst;Abstrich 0 1
12/06/2021 ['Europameisterschaft'] 09/06/2021 weiß;Hansi;tickt;denken 0 1
12/06/2021 ['Europameisterschaft'] 10/06/2021 EURO;2020;wissen 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 Schweiz;mühen;missglücktem;Auftakt 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 Frust;Ex;Geheimfavoriten 0 1
12/06/2021 ['Europameisterschaft'] 11/06/2021 Schwede;Trainer;rufen;Ibrahimovic 0 1
12/06/2021 ['Europameisterschaft'] 11/06/2021 Tor;Gigant;teuflisch;Plan 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 Leder;Pille;Ei;Vielfalt;Fußballsprache 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 Bild;Tag;Spiel;beginnen 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 Scheiß;Mannschaft;Finnland;feiern;EM;Debüt;Dänemark 0 1
12/06/2021 ['Europameisterschaft'] 13/06/2021 England;Auftaktaktsieg;Sancho;Rekord;Bellingham 0 1
12/06/2021 ['Europameisterschaft'] 11/06/2021 schrägste;EM;Geschichte 0 1
12/06/2021 ['Europameisterschaft'] 11/06/2021 Plötzlich;erfüllen;merkwürdig;Event;Sehnsucht 0 1
12/06/2021 ['Europameisterschaft'] 13/06/2021 Turban;Tor;kosten;Schweiz;Sieg;Highlights;Video 0 1
12/06/2021 ['Europameisterschaft'] 11/06/2021 EM;2021;Trikot;Grill;Co;Jubelstimmung;daheim 0 1
12/06/2021 ['Europameisterschaft'] 11/06/2021 Turnier;wenig;Gewinner 0 1
12/06/2021 ['Europameisterschaft'] 11/06/2021 Fußball;Regel;gelten;Änderung;Handspiel 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 selbstbewusste;Auftreten;Italiener;souverän;Sieg 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 Türkei;Italien;Highlights;Video 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 geradezu;bescheidene;Eröffnungsfeier;Europameisterschaft 1 1
12/06/2021 ['Europameisterschaft'] 13/06/2021 Finnland;gewinnen;schlimm;Spiel;EM 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 Italien;gewinnen;klaren;Türkei 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 EM;wissen 0 1
12/06/2021 ['Europameisterschaft'] 12/06/2021 Fußball;EM;2021;Schnäppchen;Deal;Angebot;perfekt;Turnier 0 1
12/06/2021 ['Europameisterschaft'] 14/06/2021 England;Auftaktsieg;Sancho;Rekord;Bellingham 0 1
12/06/2021 ['Europameisterschaft'] 14/06/2021 Fan;verletzen;Tribüne;Sturz;schwer 0 1
12/06/2021 ['Europameisterschaft'] 14/06/2021 Österreich;feiern;Auftakt;EM;Premiere 0 1
13/06/2021 ['Nordmazedonien'] 07/06/2021 EM;Debütant;Nordmazedonien 1 0
13/06/2021 ['Nordmazedonien'] 09/06/2021 Fan;Spieler;protestieren;Nordmazedonien;verbannen;neu;Trikot 1 1
13/06/2021 ['Nordmazedonien'] 13/06/2021 nan 0 1
13/06/2021 ['Nordmazedonien'] 13/06/2021 Österreich;starten;Bundesliga;Profi 0 1
13/06/2021 ['Nordmazedonien'] 13/06/2021 DFB;kassieren;Blamage;Nordmazedonien;nächst;Sensation;Österreich 1 1
13/06/2021 ['Nordmazedonien'] 14/06/2021 Österreich;erst;EM;Sieg;brechen;Gregoritsch;Träne 0 1
13/06/2021 ['Nordmazedonien'] 14/06/2021 Goran;Grillmeister 0 1
13/06/2021 ['Nordmazedonien'] 14/06/2021 Österreich;gewinnen;Nordmazedonien 1 1
13/06/2021 ['Nordmazedonien'] 14/06/2021 Österreich;feiern;Auftakt;EM;Premiere 0 1
13/06/2021 ['Nordmazedonien'] 14/06/2021 Schmeichelhaft;Goran 0 1
13/06/2021 ['Nordmazedonien'] 14/06/2021 Niederlande;spät;Siegtor 0 1
13/06/2021 ['Nordmazedonien'] 14/06/2021 Joker;stechen;Doppelpack;retten;Österreich;Sieg;Nordmazedonien 1 0
13/06/2021 ['Niederlande' 'Ukraine'] 07/06/2021 Prozess;entscheidend;Phase 0 2
13/06/2021 ['Niederlande' 'Ukraine'] 10/06/2021 Obacht;Guardiola;Klopp;Osten 0 2
13/06/2021 ['Niederlande' 'Ukraine'] 14/06/2021 Niederlande;jubeln;Ukraine;Weghorst 2 2
13/06/2021 ['Niederlande' 'Ukraine'] 14/06/2021 Oranje;zerschmettern;Ukraines;Sensationslust 1 2
13/06/2021 ['Niederlande' 'Ukraine'] 14/06/2021 EURO;2020;Niederlande;spät;Siegtor;Ukraine 2 0
13/06/2021 ['Niederlande' 'Ukraine'] 14/06/2021 Irrer;Krimi;furios;Niederlande;schlagen;Ukraine;dramatisch;90;Minute 2 2
13/06/2021 ['ARD'] 01/06/2021 politisch;Ausgewogenheit;ARD;ZDF 1 1
13/06/2021 ['ARD'] 01/06/2021 sagen 0 1
13/06/2021 ['ARD'] 01/06/2021 ARD;ZDF;berichten;Mensch;erziehen 1 1
13/06/2021 ['ARD'] 01/06/2021 Nachricht;tagesschau24 0 1
13/06/2021 ['ARD'] 01/06/2021 ZDF;Intendantenwahl;unerwartet;spannen 0 1
13/06/2021 ['ARD'] 01/06/2021 ARD;privat;Sender;blockieren 1 0
13/06/2021 ['ARD'] 02/06/2021 Günther;Jauch;fiebern;Jubiläum;entgegen 0 1
13/06/2021 ['ARD'] 12/06/2021 Bewusstsein;Mensch;Quotensturz;ARD 1 1
13/06/2021 ['ARD'] 09/06/2021 laufen;ARD;Spitzenpersonal 1 0
13/06/2021 ['ARD'] 09/06/2021 ARD;laufen;Moderator;Senderwechsel;stecken;Geld 1 1
13/06/2021 ['ARD'] 08/06/2021 Roter;schwarz;Freundeskreis;Kungelrunden;Führung;ZDF;auswürfeln 0 1
13/06/2021 ['ARD'] 08/06/2021 ARD;ZDF;Sachlichkeit;verpflichten 1 0
13/06/2021 ['ARD'] 08/06/2021 RTL;holen;Pinar;Atalay;Tagesthemen 0 1
13/06/2021 ['ARD'] 08/06/2021 Ungeimpft;Schauspielerin;Eva;Herzig;Job;verlieren 0 1
13/06/2021 ['ARD'] 08/06/2021 EM;Spiel;derzeit;Million;deutschen;gucken 0 1
13/06/2021 ['ARD'] 09/06/2021 lasst;wechseln 0 1
13/06/2021 ['ARD'] 08/06/2021 Moderatorin;Pinar;Atalay;RTL 0 1
13/06/2021 ['ARD'] 10/06/2021 Themenraum;34 0 1
13/06/2021 ['ARD'] 11/06/2021 s;Hassel;wissen;Baerbock;knapp 0 1
13/06/2021 ['ARD'] 11/06/2021 Russland;entziehen;ARD;Journalist;Akkreditierung 1 1
13/06/2021 ['ARD'] 11/06/2021 Russland;verweigern;ARD;Journalist;Zugang 1 1
13/06/2021 ['ARD'] 11/06/2021 offensichtlich;schlampig 0 1
13/06/2021 ['ARD'] 11/06/2021 Vertrauen;Verhör 0 1
13/06/2021 ['ARD'] 11/06/2021 Russland;verweigern;ARD;Journalist;Zugang;EM;Spiel 1 0
13/06/2021 ['ARD'] 11/06/2021 Rede;Co;Vorsitzende;Habeck 0 1
13/06/2021 ['ARD'] 11/06/2021 Russland;verweigern;ARD;Reporter;Zugang 1 0
13/06/2021 ['ARD'] 13/06/2021 ARD;Journalist;erhalten;Akkreditierung 1 0
13/06/2021 ['ARD'] 13/06/2021 Russland;lässt;ARD;Journalist;EM 1 1
13/06/2021 ['ARD'] 14/06/2021 ARD;Journalist;Kempe;Russland;EM;berichten 1 0
13/06/2021 ['Bastian' 'Schweinsteiger'] 03/06/2021 Boateng;Verteidiger;EM;Aufgebot;stehen 0 2
13/06/2021 ['Bastian' 'Schweinsteiger'] 06/06/2021 beliebt;WELTplus;Artikel;Woche;Überblick 0 2
13/06/2021 ['Gülcan' 'Kamp'] 13/06/2021 Gülcan;Kamp;erstmals;schwanger 2 2
13/06/2021 ['Foster' 'Jodie'] 02/06/2021 Demokratie;heiligt;Zweck 0 2
13/06/2021 ['Foster' 'Jodie'] 04/06/2021 Netflix;gebrauchen 0 2
13/06/2021 ['Foster' 'Jodie'] 04/06/2021 Filmfestspiele;Cannes;gut;Programm 0 2
13/06/2021 ['Foster' 'Jodie'] 09/06/2021 Sache;bewegen 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 01/06/2021 Gemischte;Bilanz;ungleich;Duo 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 01/06/2021 Deutschland;Frankreich;60;Million;Impfdosen;spenden 2 0
13/06/2021 ['Deutschland' 'Frankreich'] 01/06/2021 Vakzin;China;WHO;erteilen;Notfallzulassung;Sinovac;Impfstoff 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 03/06/2021 Starker;Auftritt;Deutschland;erst;EM;Gegner 1 2
13/06/2021 ['Deutschland' 'Frankreich'] 05/06/2021 Bundeswehr;Kampfjet;Deal;zeichnungsreif 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 10/06/2021 Bayer;wissen;einfach 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 06/06/2021 Nachtzug;Comeback;Frankreich;Deutschland;nachziehen 2 1
13/06/2021 ['Deutschland' 'Frankreich'] 07/06/2021 ausländisch;Investor;setzen;trotzen;Corona;Deutschland 1 2
13/06/2021 ['Deutschland' 'Frankreich'] 09/06/2021 Deutschland;Frankreich;Rücknahme;Atommüll 2 0
13/06/2021 ['Deutschland' 'Frankreich'] 08/06/2021 Studie;jed;Tor;Glückstreffer 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 09/06/2021 Deutschland;Frankreich;Atommülltransporte 2 2
13/06/2021 ['Deutschland' 'Frankreich'] 10/06/2021 Favorit;Geheimtipps;Fußball;EM;Corona;Verletzung;letzte;Chance 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 10/06/2021 09;06 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 10/06/2021 Atommülltransporte;Frankreich 1 2
13/06/2021 ['Deutschland' 'Frankreich'] 11/06/2021 Frankreich;Neuausrichtung;Sahelzone 1 2
13/06/2021 ['Deutschland' 'Frankreich'] 12/06/2021 Übertriebene;Vorsicht;Kosten;Kind 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 12/06/2021 Fruchtig;frischen;lecker;9;Flasche;Rosé;Probierpaket;40;Euro 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 12/06/2021 Fruchtig;frischen;lecker;9;Flasche;Rosé;Probierpaket;40;Euro 0 2
13/06/2021 ['Deutschland' 'Frankreich'] 13/06/2021 sichern;Sommermärchen;2006;kennen 0 2
13/06/2021 ['Maskenpflicht'] 01/06/2021 Ordnungsdienstkräfte;zielen;angespuckt;gebissen 0 1
13/06/2021 ['Maskenpflicht'] 01/06/2021 Niedersachsen;Corona;Verordnung;nachschärfen;Feier;vorsichtig 0 1
13/06/2021 ['Maskenpflicht'] 02/06/2021 Experte;warnen;Maskenpflicht 1 1
13/06/2021 ['Maskenpflicht'] 04/06/2021 Deutschland;Umgang;Kind;alternativlos 0 1
13/06/2021 ['Maskenpflicht'] 10/06/2021 Schafft;Maskenpflicht;Grundschulen 1 0
13/06/2021 ['Maskenpflicht'] 10/06/2021 Dänemark;schaffen;Maskenpflicht;weitgehend 1 0
13/06/2021 ['Maskenpflicht'] 10/06/2021 Schule;Sommerferien;regulär;öffnen 0 1
13/06/2021 ['Maskenpflicht'] 10/06/2021 Moderna;beantragen;US-amerikanischen;Zulassung;Kind;Jugendliche 0 1
13/06/2021 ['Maskenpflicht'] 09/06/2021 München;heben;Maskenpflicht;Innenstadt 1 0
13/06/2021 ['Maskenpflicht'] 08/06/2021 Maskenpflicht;Schule;fällen;Treffen;30;Person 1 0
13/06/2021 ['Maskenpflicht'] 08/06/2021 Mecklenburg;Vorpommern;heben;Maskenpflicht;Schule 1 1
13/06/2021 ['Maskenpflicht'] 12/06/2021 Landkreis;Maskenpflicht;Grundschulen;Untersagt 1 0
13/06/2021 ['Maskenpflicht'] 10/06/2021 Landesschülerrat;Maskenpflicht;Schule;unverhältnismäßig 1 1
13/06/2021 ['Maskenpflicht'] 09/06/2021 Abstrich;unbrauchbar;Teststationen;schließen 0 1
13/06/2021 ['Maskenpflicht'] 11/06/2021 Söder;früh;generelle;Lockerungen;Großveranstaltungen 0 1
13/06/2021 ['Maskenpflicht'] 13/06/2021 Kubicki;komplett;Maskenpflicht 1 1
13/06/2021 ['Maskenpflicht'] 11/06/2021 Pauschalurlauber;hinnehmen 0 1
13/06/2021 ['Maskenpflicht'] 13/06/2021 Lambrecht;stellen;Maskenpflicht;Frage 1 1
13/06/2021 ['Maskenpflicht'] 13/06/2021 Deutschlandweit;hoch;Inzidenz;Lindau 0 1
13/06/2021 ['Maskenpflicht'] 13/06/2021 Lambrecht;stellen;Maskenpflicht;infrage 1 1
13/06/2021 ['Maskenpflicht'] 13/06/2021 Karl;Lauterbach;halten;Lockerung;Maskenpflicht 1 1
13/06/2021 ['Maskenpflicht'] 13/06/2021 Kubicki;fordern;Maskenpflicht 1 1
13/06/2021 ['Maskenpflicht'] 13/06/2021 Maskenpflicht;erforderlich 1 1
13/06/2021 ['Maskenpflicht'] 14/06/2021 Spahn;befürworten;Maskenpflicht 1 1
13/06/2021 ['Maskenpflicht'] 14/06/2021 Jens;Spahn;befürworten;Maskenpflicht;draußen 1 0
13/06/2021 ['Maskenpflicht'] 14/06/2021 Spahn;befürworten;Maskenpflicht 1 0
13/06/2021 ['Maskenpflicht'] 14/06/2021 Spahn;läuten;Maskenpflicht 1 1
13/06/2021 ['Maskenpflicht'] 14/06/2021 Politiker;fordern;Maskenpflicht 1 1
13/06/2021 ['Maskenpflicht'] 14/06/2021 Spahn;Maskenpflicht;draußen;entfallen 1 1
13/06/2021 ['Maskenpflicht'] 14/06/2021 Spahn;stufenweises;Maskenpflicht 1 1
13/06/2021 ['Paul' 'Zipser'] 13/06/2021 Alba;Berlin;erringen;Meistertitel 0 2
13/06/2021 ['Herzogenaurach'] 09/06/2021 Baum;holen;Löw;Team;Feinschliff 0 1
13/06/2021 ['Herzogenaurach'] 09/06/2021 pikant;Konstellation;EM;WGs 0 1
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 01/06/2021 Unerträgliche;Arroganz;spalten;Gesellschaft;Linke;Baerbock;scharf 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 01/06/2021 Erfolg;Osten 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 03/06/2021 Dank;Annalena;Baerbock 2 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 02/06/2021 Ex;Siemens;Chef;Kaeser;werben;Baerbock 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 04/06/2021 Baerbock;Hand;schreiben 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 04/06/2021 Höhere;Preis;Sprit;Europa;Grüne;Plan 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 03/06/2021 Todeszone 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 06/06/2021 Özdemir;sehen;russische;türkisch;Schmutzkampagnen;Baerbock 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 05/06/2021 unsozial;Autofahrer;Neurose;Grüne 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 03/06/2021 Hitzige;Debatte;hoch;Benzinpreise;Welle;Kritik;Baerbock;Offensive 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 07/06/2021 Einsatzort;verschwinden;Ungereimtheit;Baerbocks;Lebenslauf 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 04/06/2021 Plan;Partei;Grüne;Spritpreise;erhöhen 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Rede;entfährt;Baerbock;scheißen 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 06/06/2021 Baerbock;präzisieren;Lebenslauf 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Baerbocks;Lebenslauf;weiterhin;fehlerhaft 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Leid;Jude;ultimativ;Argument;grüne;Politik 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 06/06/2021 Schein;groß;Vorteil;Baerbock;endgültig;verspielen 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 07/06/2021 Baerbocks;schwammig;Eingeständnis 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 07/06/2021 Ziemiak;nennen;Maaßen;Tweet;Baerbock;unmöglich;unsäglich 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 07/06/2021 Wirbel;Baerbock;tauchen;Laschets;Lebenslauf;Ungereimtheit 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 07/06/2021 Umfrage;Papierkorb;Sachsen;Anhalt;zeigen;Grüne;böse;Erwachen;drohen 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 07/06/2021 Scharfe;Kritik;CDU;Maaßens;Baerbock;Tweet;Niveau 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 08/06/2021 Putin;Erdogan;Baerbock;Visier;nehmen 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 09/06/2021 Viermal;Hölle;Fegefeuer 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 09/06/2021 Mist;Annalena;Baerbock;Fehler;Lebenslauf 2 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Grüner;Baerbock;Kanzlerkandidatin 2 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Annalena;Baerbock;Mehrheit;Kanzlerkandidatin;küren 2 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 10/06/2021 Baerbock;Lebenslauf;Falle;nochmal;raus 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Grüner;versprechen;50;Euro;Hartz;IV;zwölf;Euro;Mindestlohn 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 11/06/2021 s;Hassel;wissen;Baerbock;knapp 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Grüner;küren;Baerbock;Kanzlerkandidatin 2 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 11/06/2021 offensichtlich;schlampig 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 11/06/2021 Baerbock;schließen;Korrektur 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Parteitag;wählen;Baerbock;98;5;Prozent;Spitzenkandidatin 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 11/06/2021 Laschet;Union;drehen;Spieß 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Baerbocks;Rede;plötzlich;laut;Scheiße;hören 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 11/06/2021 Annalena;Baerbock;stehen;Rücken;Wand 2 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 11/06/2021 Fridays;for;Future;überzeugen;beurteilen 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 13/06/2021 Grüne;bahnen;kleinlaut;Strategie 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 13/06/2021 Ähnliche;Plattitüde;kennen;Merkel 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 11/06/2021 3;820;Änderungsanträge;Kanzlerkandidatin 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 11/06/2021 Höhenflug;Grüne;erstmal;vorbei 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 11/06/2021 Baerbock;s;verbockt;Grüner;100;retten 2 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 13/06/2021 letzt;Zweifel;bleiben 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 13/06/2021 plötzlich;hören 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Kanzlerin;Baerbock 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 13/06/2021 Baerbocks;Achterbahnfahrt 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 13/06/2021 Baerbocks;Rede;plötzlich;laut;Scheiße;hören 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 12/06/2021 Richtung;Rot;Baerbock;Krise;kennen;Habeck;Grüner;Lösung 2 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 13/06/2021 Versäumnis;Vergangenheit;Krise;verstecken 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 13/06/2021 Grüner;setzen;Annalena;Baerbock 3 1
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 13/06/2021 Scheiße;fluchten;Baerbock;Rede;klaren 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 14/06/2021 einsehen;Baerbock;falsch;Kandidatin 1 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 14/06/2021 Disziplin;reich 0 3
13/06/2021 ['Annalena' 'Baerbock' 'Grüne'] 14/06/2021 Grüner;setzen;Annalena;Baerbock 3 1
13/06/2021 ['Jebsen' 'Ken'] 12/06/2021 Schwurblers;Kern 0 2
13/06/2021 ['Jebsen' 'Ken'] 13/06/2021 Hacker;legen;Internetseite;Ken;Jebsen;lahm;erbeuten;Datum 2 0
13/06/2021 ['Jebsen' 'Ken'] 14/06/2021 Hacker;kapern;Seite;Querdenker;Jebsen 1 2
13/06/2021 ['Rebel' 'Wilson'] 01/06/2021 Rebel;Wilson;zeigen;Figur 2 2
13/06/2021 ['England' 'Kroatien'] 13/06/2021 England;gewinnen;Kroatien 2 1
13/06/2021 ['England' 'Kroatien'] 13/06/2021 England;Auftaktaktsieg;Sancho;Rekord;Bellingham 1 2
13/06/2021 ['England' 'Kroatien'] 13/06/2021 Sterling;bringen;England;Kurs;Kroatien;enttäuschen 2 2
13/06/2021 ['England' 'Kroatien'] 13/06/2021 Traumpass;bannen;Fluch;EM;Auftakt 0 2
13/06/2021 ['England' 'Kroatien'] 13/06/2021 England;siegen;knapp;Kroatien 2 0
13/06/2021 ['England' 'Kroatien'] 13/06/2021 EURO;2020;England;siegen;knapp;Kroatien 2 0
13/06/2021 ['England' 'Kroatien'] 14/06/2021 England;Auftaktsieg;Sancho;Rekord;Bellingham 1 2
13/06/2021 ['England' 'Kroatien'] 14/06/2021 Fan;verletzen;Tribüne;Sturz;schwer 0 2
13/06/2021 ['England' 'Kroatien'] 14/06/2021 Niederlande;spät;Siegtor 0 2
13/06/2021 ['England' 'Kroatien'] 14/06/2021 Fauchen;Löwe;England;Sieg 1 2
Help on AxesSubplot in module matplotlib.axes._subplots object:

class AxesSubplot(SubplotBase, matplotlib.axes._axes.Axes)
 |  AxesSubplot(fig, *args, **kwargs)
 |  
 |  Base class for subplots, which are :class:`Axes` instances with
 |  additional methods to facilitate generating and manipulating a set
 |  of :class:`Axes` within a figure.
 |  
 |  Method resolution order:
 |      AxesSubplot
 |      SubplotBase
 |      matplotlib.axes._axes.Axes
 |      matplotlib.axes._base._AxesBase
 |      matplotlib.artist.Artist
 |      builtins.object
 |  
 |  Methods inherited from SubplotBase:
 |  
 |  __init__(self, fig, *args, **kwargs)
 |      Parameters
 |      ----------
 |      fig : `matplotlib.figure.Figure`
 |      
 |      *args : tuple (*nrows*, *ncols*, *index*) or int
 |          The array of subplots in the figure has dimensions ``(nrows,
 |          ncols)``, and *index* is the index of the subplot being created.
 |          *index* starts at 1 in the upper left corner and increases to the
 |          right.
 |      
 |          If *nrows*, *ncols*, and *index* are all single digit numbers, then
 |          *args* can be passed as a single 3-digit number (e.g. 234 for
 |          (2, 3, 4)).
 |      
 |      **kwargs
 |          Keyword arguments are passed to the Axes (sub)class constructor.
 |  
 |  __reduce__(self)
 |      Helper for pickle.
 |  
 |  change_geometry(self, numrows, numcols, num)
 |      [*Deprecated*] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3).
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.4
 |  
 |  get_geometry(self)
 |      [*Deprecated*] Get the subplot geometry, e.g., (2, 2, 3).
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.4
 |  
 |  get_gridspec(self)
 |      Return the `.GridSpec` instance associated with the subplot.
 |  
 |  get_subplotspec(self)
 |      Return the `.SubplotSpec` instance associated with the subplot.
 |  
 |  is_first_col(self)
 |      [*Deprecated*] 
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.4
 |         \
 |  
 |  is_first_row(self)
 |      [*Deprecated*] 
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.4
 |         \
 |  
 |  is_last_col(self)
 |      [*Deprecated*] 
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.4
 |         \
 |  
 |  is_last_row(self)
 |      [*Deprecated*] 
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.4
 |         \
 |  
 |  label_outer(self)
 |      Only show "outer" labels and tick labels.
 |      
 |      x-labels are only kept for subplots on the last row; y-labels only for
 |      subplots on the first column.
 |  
 |  set_subplotspec(self, subplotspec)
 |      Set the `.SubplotSpec`. instance associated with the subplot.
 |  
 |  update_params(self)
 |      [*Deprecated*] Update the subplot position from ``self.figure.subplotpars``.
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.4
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from SubplotBase:
 |  
 |  figbox
 |  
 |  numCols
 |  
 |  numRows
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from SubplotBase:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from matplotlib.axes._axes.Axes:
 |  
 |  acorr(self, x, *, data=None, **kwargs)
 |      Plot the autocorrelation of *x*.
 |      
 |      Parameters
 |      ----------
 |      x : array-like
 |      
 |      detrend : callable, default: `.mlab.detrend_none` (no detrending)
 |          A detrending function applied to *x*.  It must have the
 |          signature ::
 |      
 |              detrend(x: np.ndarray) -> np.ndarray
 |      
 |      normed : bool, default: True
 |          If ``True``, input vectors are normalised to unit length.
 |      
 |      usevlines : bool, default: True
 |          Determines the plot style.
 |      
 |          If ``True``, vertical lines are plotted from 0 to the acorr value
 |          using `.Axes.vlines`. Additionally, a horizontal line is plotted
 |          at y=0 using `.Axes.axhline`.
 |      
 |          If ``False``, markers are plotted at the acorr values using
 |          `.Axes.plot`.
 |      
 |      maxlags : int, default: 10
 |          Number of lags to show. If ``None``, will return all
 |          ``2 * len(x) - 1`` lags.
 |      
 |      Returns
 |      -------
 |      lags : array (length ``2*maxlags+1``)
 |          The lag vector.
 |      c : array  (length ``2*maxlags+1``)
 |          The auto correlation vector.
 |      line : `.LineCollection` or `.Line2D`
 |          `.Artist` added to the Axes of the correlation:
 |      
 |          - `.LineCollection` if *usevlines* is True.
 |          - `.Line2D` if *usevlines* is False.
 |      b : `.Line2D` or None
 |          Horizontal line at 0 if *usevlines* is True
 |          None *usevlines* is False.
 |      
 |      Other Parameters
 |      ----------------
 |      linestyle : `.Line2D` property, optional
 |          The linestyle for plotting the data points.
 |          Only used if *usevlines* is ``False``.
 |      
 |      marker : str, default: 'o'
 |          The marker for plotting the data points.
 |          Only used if *usevlines* is ``False``.
 |      
 |      **kwargs
 |          Additional parameters are passed to `.Axes.vlines` and
 |          `.Axes.axhline` if *usevlines* is ``True``; otherwise they are
 |          passed to `.Axes.plot`.
 |      
 |      Notes
 |      -----
 |      The cross correlation is performed with `numpy.correlate` with
 |      ``mode = "full"``.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  angle_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, *, data=None, **kwargs)
 |      Plot the angle spectrum.
 |      
 |      Compute the angle spectrum (wrapped phase spectrum) of *x*.
 |      Data is padded to a length of *pad_to* and the windowing function
 |      *window* is applied to the signal.
 |      
 |      Parameters
 |      ----------
 |      x : 1-D array or sequence
 |          Array or sequence containing the data.
 |      
 |      Fs : float, default: 2
 |          The sampling frequency (samples per time unit).  It is used to calculate
 |          the Fourier frequencies, *freqs*, in cycles per time unit.
 |      
 |      window : callable or ndarray, default: `.window_hanning`
 |          A function or a vector of length *NFFT*.  To create window vectors see
 |          `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,
 |          `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a
 |          function is passed as the argument, it must take a data segment as an
 |          argument and return the windowed version of the segment.
 |      
 |      sides : {'default', 'onesided', 'twosided'}, optional
 |          Which sides of the spectrum to return. 'default' is one-sided for real
 |          data and two-sided for complex data. 'onesided' forces the return of a
 |          one-sided spectrum, while 'twosided' forces two-sided.
 |      
 |      pad_to : int, optional
 |          The number of points to which the data segment is padded when performing
 |          the FFT.  While not increasing the actual resolution of the spectrum (the
 |          minimum distance between resolvable peaks), this can give more points in
 |          the plot, allowing for more detail. This corresponds to the *n* parameter
 |          in the call to fft().  The default is None, which sets *pad_to* equal to
 |          the length of the input signal (i.e. no padding).
 |      
 |      Fc : int, default: 0
 |          The center frequency of *x*, which offsets the x extents of the
 |          plot to reflect the frequency range used when a signal is acquired
 |          and then filtered and downsampled to baseband.
 |      
 |      Returns
 |      -------
 |      spectrum : 1-D array
 |          The values for the angle spectrum in radians (real valued).
 |      
 |      freqs : 1-D array
 |          The frequencies corresponding to the elements in *spectrum*.
 |      
 |      line : `~matplotlib.lines.Line2D`
 |          The line created by this function.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Keyword arguments control the `.Line2D` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      magnitude_spectrum
 |          Plots the magnitudes of the corresponding frequencies.
 |      phase_spectrum
 |          Plots the unwrapped version of this function.
 |      specgram
 |          Can plot the angle spectrum of segments within the signal in a
 |          colormap.
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  annotate(self, text, xy, *args, **kwargs)
 |      Annotate the point *xy* with text *text*.
 |      
 |      In the simplest form, the text is placed at *xy*.
 |      
 |      Optionally, the text can be displayed in another position *xytext*.
 |      An arrow pointing from the text to the annotated point *xy* can then
 |      be added by defining *arrowprops*.
 |      
 |      Parameters
 |      ----------
 |      text : str
 |          The text of the annotation.
 |      
 |      xy : (float, float)
 |          The point *(x, y)* to annotate. The coordinate system is determined
 |          by *xycoords*.
 |      
 |      xytext : (float, float), default: *xy*
 |          The position *(x, y)* to place the text at. The coordinate system
 |          is determined by *textcoords*.
 |      
 |      xycoords : str or `.Artist` or `.Transform` or callable or (float, float), default: 'data'
 |      
 |          The coordinate system that *xy* is given in. The following types
 |          of values are supported:
 |      
 |          - One of the following strings:
 |      
 |            ==================== ============================================
 |            Value                Description
 |            ==================== ============================================
 |            'figure points'      Points from the lower left of the figure
 |            'figure pixels'      Pixels from the lower left of the figure
 |            'figure fraction'    Fraction of figure from lower left
 |            'subfigure points'   Points from the lower left of the subfigure
 |            'subfigure pixels'   Pixels from the lower left of the subfigure
 |            'subfigure fraction' Fraction of subfigure from lower left
 |            'axes points'        Points from lower left corner of axes
 |            'axes pixels'        Pixels from lower left corner of axes
 |            'axes fraction'      Fraction of axes from lower left
 |            'data'               Use the coordinate system of the object
 |                                 being annotated (default)
 |            'polar'              *(theta, r)* if not native 'data'
 |                                 coordinates
 |            ==================== ============================================
 |      
 |            Note that 'subfigure pixels' and 'figure pixels' are the same
 |            for the parent figure, so users who want code that is usable in
 |            a subfigure can use 'subfigure pixels'.
 |      
 |          - An `.Artist`: *xy* is interpreted as a fraction of the artist's
 |            `~matplotlib.transforms.Bbox`. E.g. *(0, 0)* would be the lower
 |            left corner of the bounding box and *(0.5, 1)* would be the
 |            center top of the bounding box.
 |      
 |          - A `.Transform` to transform *xy* to screen coordinates.
 |      
 |          - A function with one of the following signatures::
 |      
 |              def transform(renderer) -> Bbox
 |              def transform(renderer) -> Transform
 |      
 |            where *renderer* is a `.RendererBase` subclass.
 |      
 |            The result of the function is interpreted like the `.Artist` and
 |            `.Transform` cases above.
 |      
 |          - A tuple *(xcoords, ycoords)* specifying separate coordinate
 |            systems for *x* and *y*. *xcoords* and *ycoords* must each be
 |            of one of the above described types.
 |      
 |          See :ref:`plotting-guide-annotation` for more details.
 |      
 |      textcoords : str or `.Artist` or `.Transform` or callable or (float, float), default: value of *xycoords*
 |          The coordinate system that *xytext* is given in.
 |      
 |          All *xycoords* values are valid as well as the following
 |          strings:
 |      
 |          =================   =========================================
 |          Value               Description
 |          =================   =========================================
 |          'offset points'     Offset (in points) from the *xy* value
 |          'offset pixels'     Offset (in pixels) from the *xy* value
 |          =================   =========================================
 |      
 |      arrowprops : dict, optional
 |          The properties used to draw a `.FancyArrowPatch` arrow between the
 |          positions *xy* and *xytext*. Note that the edge of the arrow
 |          pointing to *xytext* will be centered on the text itself and may
 |          not point directly to the coordinates given in *xytext*.
 |      
 |          If *arrowprops* does not contain the key 'arrowstyle' the
 |          allowed keys are:
 |      
 |          ==========   ======================================================
 |          Key          Description
 |          ==========   ======================================================
 |          width        The width of the arrow in points
 |          headwidth    The width of the base of the arrow head in points
 |          headlength   The length of the arrow head in points
 |          shrink       Fraction of total length to shrink from both ends
 |          ?            Any key to :class:`matplotlib.patches.FancyArrowPatch`
 |          ==========   ======================================================
 |      
 |          If *arrowprops* contains the key 'arrowstyle' the
 |          above keys are forbidden.  The allowed values of
 |          ``'arrowstyle'`` are:
 |      
 |          ============   =============================================
 |          Name           Attrs
 |          ============   =============================================
 |          ``'-'``        None
 |          ``'->'``       head_length=0.4,head_width=0.2
 |          ``'-['``       widthB=1.0,lengthB=0.2,angleB=None
 |          ``'|-|'``      widthA=1.0,widthB=1.0
 |          ``'-|>'``      head_length=0.4,head_width=0.2
 |          ``'<-'``       head_length=0.4,head_width=0.2
 |          ``'<->'``      head_length=0.4,head_width=0.2
 |          ``'<|-'``      head_length=0.4,head_width=0.2
 |          ``'<|-|>'``    head_length=0.4,head_width=0.2
 |          ``'fancy'``    head_length=0.4,head_width=0.4,tail_width=0.4
 |          ``'simple'``   head_length=0.5,head_width=0.5,tail_width=0.2
 |          ``'wedge'``    tail_width=0.3,shrink_factor=0.5
 |          ============   =============================================
 |      
 |          Valid keys for `~matplotlib.patches.FancyArrowPatch` are:
 |      
 |          ===============  ==================================================
 |          Key              Description
 |          ===============  ==================================================
 |          arrowstyle       the arrow style
 |          connectionstyle  the connection style
 |          relpos           default is (0.5, 0.5)
 |          patchA           default is bounding box of the text
 |          patchB           default is None
 |          shrinkA          default is 2 points
 |          shrinkB          default is 2 points
 |          mutation_scale   default is text size (in points)
 |          mutation_aspect  default is 1.
 |          ?                any key for :class:`matplotlib.patches.PathPatch`
 |          ===============  ==================================================
 |      
 |          Defaults to None, i.e. no arrow is drawn.
 |      
 |      annotation_clip : bool or None, default: None
 |          Whether to draw the annotation when the annotation point *xy* is
 |          outside the axes area.
 |      
 |          - If *True*, the annotation will only be drawn when *xy* is
 |            within the axes.
 |          - If *False*, the annotation will always be drawn.
 |          - If *None*, the annotation will only be drawn when *xy* is
 |            within the axes and *xycoords* is 'data'.
 |      
 |      **kwargs
 |          Additional kwargs are passed to `~matplotlib.text.Text`.
 |      
 |      Returns
 |      -------
 |      `.Annotation`
 |      
 |      See Also
 |      --------
 |      :ref:`plotting-guide-annotation`
 |  
 |  arrow(self, x, y, dx, dy, **kwargs)
 |      Add an arrow to the Axes.
 |      
 |      This draws an arrow from ``(x, y)`` to ``(x+dx, y+dy)``.
 |      
 |      Parameters
 |      ----------
 |      x, y : float
 |          The x and y coordinates of the arrow base.
 |      
 |      dx, dy : float
 |          The length of the arrow along x and y direction.
 |      
 |      width : float, default: 0.001
 |          Width of full arrow tail.
 |      
 |      length_includes_head : bool, default: False
 |          True if head is to be counted in calculating the length.
 |      
 |      head_width : float or None, default: 3*width
 |          Total width of the full arrow head.
 |      
 |      head_length : float or None, default: 1.5*head_width
 |          Length of arrow head.
 |      
 |      shape : {'full', 'left', 'right'}, default: 'full'
 |          Draw the left-half, right-half, or full arrow.
 |      
 |      overhang : float, default: 0
 |          Fraction that the arrow is swept back (0 overhang means
 |          triangular shape). Can be negative or greater than one.
 |      
 |      head_starts_at_zero : bool, default: False
 |          If True, the head starts being drawn at coordinate 0
 |          instead of ending at coordinate 0.
 |      
 |      **kwargs
 |          `.Patch` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: unknown
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color: color
 |          contains: unknown
 |          edgecolor or ec: color or None or 'auto'
 |          facecolor or fc: color or None
 |          figure: `.Figure`
 |          fill: bool
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float or None
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          visible: bool
 |          zorder: float
 |      
 |      Returns
 |      -------
 |      `.FancyArrow`
 |          The created `.FancyArrow` object.
 |      
 |      Notes
 |      -----
 |      The resulting arrow is affected by the Axes aspect ratio and limits.
 |      This may produce an arrow whose head is not square with its stem. To
 |      create an arrow whose head is square with its stem,
 |      use :meth:`annotate` for example:
 |      
 |      >>> ax.annotate("", xy=(0.5, 0.5), xytext=(0, 0),
 |      ...             arrowprops=dict(arrowstyle="->"))
 |  
 |  axhline(self, y=0, xmin=0, xmax=1, **kwargs)
 |      Add a horizontal line across the axis.
 |      
 |      Parameters
 |      ----------
 |      y : float, default: 0
 |          y position in data coordinates of the horizontal line.
 |      
 |      xmin : float, default: 0
 |          Should be between 0 and 1, 0 being the far left of the plot, 1 the
 |          far right of the plot.
 |      
 |      xmax : float, default: 1
 |          Should be between 0 and 1, 0 being the far left of the plot, 1 the
 |          far right of the plot.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.lines.Line2D`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Valid keyword arguments are `.Line2D` properties, with the
 |          exception of 'transform':
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      hlines : Add horizontal lines in data coordinates.
 |      axhspan : Add a horizontal span (rectangle) across the axis.
 |      axline : Add a line with an arbitrary slope.
 |      
 |      Examples
 |      --------
 |      * draw a thick red hline at 'y' = 0 that spans the xrange::
 |      
 |          >>> axhline(linewidth=4, color='r')
 |      
 |      * draw a default hline at 'y' = 1 that spans the xrange::
 |      
 |          >>> axhline(y=1)
 |      
 |      * draw a default hline at 'y' = .5 that spans the middle half of
 |        the xrange::
 |      
 |          >>> axhline(y=.5, xmin=0.25, xmax=0.75)
 |  
 |  axhspan(self, ymin, ymax, xmin=0, xmax=1, **kwargs)
 |      Add a horizontal span (rectangle) across the Axes.
 |      
 |      The rectangle spans from *ymin* to *ymax* vertically, and, by default,
 |      the whole x-axis horizontally.  The x-span can be set using *xmin*
 |      (default: 0) and *xmax* (default: 1) which are in axis units; e.g.
 |      ``xmin = 0.5`` always refers to the middle of the x-axis regardless of
 |      the limits set by `~.Axes.set_xlim`.
 |      
 |      Parameters
 |      ----------
 |      ymin : float
 |          Lower y-coordinate of the span, in data units.
 |      ymax : float
 |          Upper y-coordinate of the span, in data units.
 |      xmin : float, default: 0
 |          Lower x-coordinate of the span, in x-axis (0-1) units.
 |      xmax : float, default: 1
 |          Upper x-coordinate of the span, in x-axis (0-1) units.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.patches.Polygon`
 |          Horizontal span (rectangle) from (xmin, ymin) to (xmax, ymax).
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.patches.Polygon` properties
 |      
 |      Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: unknown
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color: color
 |          contains: unknown
 |          edgecolor or ec: color or None or 'auto'
 |          facecolor or fc: color or None
 |          figure: `.Figure`
 |          fill: bool
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float or None
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          visible: bool
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      axvspan : Add a vertical span across the Axes.
 |  
 |  axline(self, xy1, xy2=None, *, slope=None, **kwargs)
 |      Add an infinitely long straight line.
 |      
 |      The line can be defined either by two points *xy1* and *xy2*, or
 |      by one point *xy1* and a *slope*.
 |      
 |      This draws a straight line "on the screen", regardless of the x and y
 |      scales, and is thus also suitable for drawing exponential decays in
 |      semilog plots, power laws in loglog plots, etc. However, *slope*
 |      should only be used with linear scales; It has no clear meaning for
 |      all other scales, and thus the behavior is undefined. Please specify
 |      the line using the points *xy1*, *xy2* for non-linear scales.
 |      
 |      The *transform* keyword argument only applies to the points *xy1*,
 |      *xy2*. The *slope* (if given) is always in data coordinates. This can
 |      be used e.g. with ``ax.transAxes`` for drawing grid lines with a fixed
 |      slope.
 |      
 |      Parameters
 |      ----------
 |      xy1, xy2 : (float, float)
 |          Points for the line to pass through.
 |          Either *xy2* or *slope* has to be given.
 |      slope : float, optional
 |          The slope of the line. Either *xy2* or *slope* has to be given.
 |      
 |      Returns
 |      -------
 |      `.Line2D`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Valid kwargs are `.Line2D` properties
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      axhline : for horizontal lines
 |      axvline : for vertical lines
 |      
 |      Examples
 |      --------
 |      Draw a thick red line passing through (0, 0) and (1, 1)::
 |      
 |          >>> axline((0, 0), (1, 1), linewidth=4, color='r')
 |  
 |  axvline(self, x=0, ymin=0, ymax=1, **kwargs)
 |      Add a vertical line across the Axes.
 |      
 |      Parameters
 |      ----------
 |      x : float, default: 0
 |          x position in data coordinates of the vertical line.
 |      
 |      ymin : float, default: 0
 |          Should be between 0 and 1, 0 being the bottom of the plot, 1 the
 |          top of the plot.
 |      
 |      ymax : float, default: 1
 |          Should be between 0 and 1, 0 being the bottom of the plot, 1 the
 |          top of the plot.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.lines.Line2D`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Valid keyword arguments are `.Line2D` properties, with the
 |          exception of 'transform':
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      vlines : Add vertical lines in data coordinates.
 |      axvspan : Add a vertical span (rectangle) across the axis.
 |      axline : Add a line with an arbitrary slope.
 |      
 |      Examples
 |      --------
 |      * draw a thick red vline at *x* = 0 that spans the yrange::
 |      
 |          >>> axvline(linewidth=4, color='r')
 |      
 |      * draw a default vline at *x* = 1 that spans the yrange::
 |      
 |          >>> axvline(x=1)
 |      
 |      * draw a default vline at *x* = .5 that spans the middle half of
 |        the yrange::
 |      
 |          >>> axvline(x=.5, ymin=0.25, ymax=0.75)
 |  
 |  axvspan(self, xmin, xmax, ymin=0, ymax=1, **kwargs)
 |      Add a vertical span (rectangle) across the Axes.
 |      
 |      The rectangle spans from *xmin* to *xmax* horizontally, and, by
 |      default, the whole y-axis vertically.  The y-span can be set using
 |      *ymin* (default: 0) and *ymax* (default: 1) which are in axis units;
 |      e.g. ``ymin = 0.5`` always refers to the middle of the y-axis
 |      regardless of the limits set by `~.Axes.set_ylim`.
 |      
 |      Parameters
 |      ----------
 |      xmin : float
 |          Lower x-coordinate of the span, in data units.
 |      xmax : float
 |          Upper x-coordinate of the span, in data units.
 |      ymin : float, default: 0
 |          Lower y-coordinate of the span, in y-axis units (0-1).
 |      ymax : float, default: 1
 |          Upper y-coordinate of the span, in y-axis units (0-1).
 |      
 |      Returns
 |      -------
 |      `~matplotlib.patches.Polygon`
 |          Vertical span (rectangle) from (xmin, ymin) to (xmax, ymax).
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.patches.Polygon` properties
 |      
 |      Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: unknown
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color: color
 |          contains: unknown
 |          edgecolor or ec: color or None or 'auto'
 |          facecolor or fc: color or None
 |          figure: `.Figure`
 |          fill: bool
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float or None
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          visible: bool
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      axhspan : Add a horizontal span across the Axes.
 |      
 |      Examples
 |      --------
 |      Draw a vertical, green, translucent rectangle from x = 1.25 to
 |      x = 1.55 that spans the yrange of the Axes.
 |      
 |      >>> axvspan(1.25, 1.55, facecolor='g', alpha=0.5)
 |  
 |  bar(self, x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)
 |      Make a bar plot.
 |      
 |      The bars are positioned at *x* with the given *align*\ment. Their
 |      dimensions are given by *height* and *width*. The vertical baseline
 |      is *bottom* (default 0).
 |      
 |      Many parameters can take either a single value applying to all bars
 |      or a sequence of values, one for each bar.
 |      
 |      Parameters
 |      ----------
 |      x : float or array-like
 |          The x coordinates of the bars. See also *align* for the
 |          alignment of the bars to the coordinates.
 |      
 |      height : float or array-like
 |          The height(s) of the bars.
 |      
 |      width : float or array-like, default: 0.8
 |          The width(s) of the bars.
 |      
 |      bottom : float or array-like, default: 0
 |          The y coordinate(s) of the bars bases.
 |      
 |      align : {'center', 'edge'}, default: 'center'
 |          Alignment of the bars to the *x* coordinates:
 |      
 |          - 'center': Center the base on the *x* positions.
 |          - 'edge': Align the left edges of the bars with the *x* positions.
 |      
 |          To align the bars on the right edge pass a negative *width* and
 |          ``align='edge'``.
 |      
 |      Returns
 |      -------
 |      `.BarContainer`
 |          Container with all the bars and optionally errorbars.
 |      
 |      Other Parameters
 |      ----------------
 |      color : color or list of color, optional
 |          The colors of the bar faces.
 |      
 |      edgecolor : color or list of color, optional
 |          The colors of the bar edges.
 |      
 |      linewidth : float or array-like, optional
 |          Width of the bar edge(s). If 0, don't draw edges.
 |      
 |      tick_label : str or list of str, optional
 |          The tick labels of the bars.
 |          Default: None (Use default numeric labels.)
 |      
 |      xerr, yerr : float or array-like of shape(N,) or shape(2, N), optional
 |          If not *None*, add horizontal / vertical errorbars to the bar tips.
 |          The values are +/- sizes relative to the data:
 |      
 |          - scalar: symmetric +/- values for all bars
 |          - shape(N,): symmetric +/- values for each bar
 |          - shape(2, N): Separate - and + values for each bar. First row
 |            contains the lower errors, the second row contains the upper
 |            errors.
 |          - *None*: No errorbar. (Default)
 |      
 |          See :doc:`/gallery/statistics/errorbar_features`
 |          for an example on the usage of ``xerr`` and ``yerr``.
 |      
 |      ecolor : color or list of color, default: 'black'
 |          The line color of the errorbars.
 |      
 |      capsize : float, default: :rc:`errorbar.capsize`
 |         The length of the error bar caps in points.
 |      
 |      error_kw : dict, optional
 |          Dictionary of kwargs to be passed to the `~.Axes.errorbar`
 |          method. Values of *ecolor* or *capsize* defined here take
 |          precedence over the independent kwargs.
 |      
 |      log : bool, default: False
 |          If *True*, set the y-axis to be log scale.
 |      
 |      **kwargs : `.Rectangle` properties
 |      
 |      Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: unknown
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color: color
 |          contains: unknown
 |          edgecolor or ec: color or None or 'auto'
 |          facecolor or fc: color or None
 |          figure: `.Figure`
 |          fill: bool
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float or None
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          visible: bool
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      barh : Plot a horizontal bar plot.
 |      
 |      Notes
 |      -----
 |      Stacked bars can be achieved by passing individual *bottom* values per
 |      bar. See :doc:`/gallery/lines_bars_and_markers/bar_stacked`.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  bar_label(self, container, labels=None, *, fmt='%g', label_type='edge', padding=0, **kwargs)
 |      Label a bar plot.
 |      
 |      Adds labels to bars in the given `.BarContainer`.
 |      You may need to adjust the axis limits to fit the labels.
 |      
 |      Parameters
 |      ----------
 |      container : `.BarContainer`
 |          Container with all the bars and optionally errorbars, likely
 |          returned from `.bar` or `.barh`.
 |      
 |      labels : array-like, optional
 |          A list of label texts, that should be displayed. If not given, the
 |          label texts will be the data values formatted with *fmt*.
 |      
 |      fmt : str, default: '%g'
 |          A format string for the label.
 |      
 |      label_type : {'edge', 'center'}, default: 'edge'
 |          The label type. Possible values:
 |      
 |          - 'edge': label placed at the end-point of the bar segment, and the
 |            value displayed will be the position of that end-point.
 |          - 'center': label placed in the center of the bar segment, and the
 |            value displayed will be the length of that segment.
 |            (useful for stacked bars, i.e.,
 |            :doc:`/gallery/lines_bars_and_markers/bar_label_demo`)
 |      
 |      padding : float, default: 0
 |          Distance of label from the end of the bar, in points.
 |      
 |      **kwargs
 |          Any remaining keyword arguments are passed through to
 |          `.Axes.annotate`.
 |      
 |      Returns
 |      -------
 |      list of `.Text`
 |          A list of `.Text` instances for the labels.
 |  
 |  barbs(self, *args, data=None, **kw)
 |      Plot a 2D field of barbs.
 |      
 |      Call signature::
 |      
 |        barbs([X, Y], U, V, [C], **kw)
 |      
 |      Where *X*, *Y* define the barb locations, *U*, *V* define the barb
 |      directions, and *C* optionally sets the color.
 |      
 |      All arguments may be 1D or 2D. *U*, *V*, *C* may be masked arrays, but masked
 |      *X*, *Y* are not supported at present.
 |      
 |      Barbs are traditionally used in meteorology as a way to plot the speed
 |      and direction of wind observations, but can technically be used to
 |      plot any two dimensional vector quantity.  As opposed to arrows, which
 |      give vector magnitude by the length of the arrow, the barbs give more
 |      quantitative information about the vector magnitude by putting slanted
 |      lines or a triangle for various increments in magnitude, as show
 |      schematically below::
 |      
 |        :                   /\    \
 |        :                  /  \    \
 |        :                 /    \    \    \
 |        :                /      \    \    \
 |        :               ------------------------------
 |      
 |      The largest increment is given by a triangle (or "flag"). After those
 |      come full lines (barbs). The smallest increment is a half line.  There
 |      is only, of course, ever at most 1 half line.  If the magnitude is
 |      small and only needs a single half-line and no full lines or
 |      triangles, the half-line is offset from the end of the barb so that it
 |      can be easily distinguished from barbs with a single full line.  The
 |      magnitude for the barb shown above would nominally be 65, using the
 |      standard increments of 50, 10, and 5.
 |      
 |      See also https://en.wikipedia.org/wiki/Wind_barb.
 |      
 |      Parameters
 |      ----------
 |      X, Y : 1D or 2D array-like, optional
 |          The x and y coordinates of the barb locations. See *pivot* for how the
 |          barbs are drawn to the x, y positions.
 |      
 |          If not given, they will be generated as a uniform integer meshgrid based
 |          on the dimensions of *U* and *V*.
 |      
 |          If *X* and *Y* are 1D but *U*, *V* are 2D, *X*, *Y* are expanded to 2D
 |          using ``X, Y = np.meshgrid(X, Y)``. In this case ``len(X)`` and ``len(Y)``
 |          must match the column and row dimensions of *U* and *V*.
 |      
 |      U, V : 1D or 2D array-like
 |          The x and y components of the barb shaft.
 |      
 |      C : 1D or 2D array-like, optional
 |          Numeric data that defines the barb colors by colormapping via *norm* and
 |          *cmap*.
 |      
 |          This does not support explicit colors. If you want to set colors directly,
 |          use *barbcolor* instead.
 |      
 |      length : float, default: 7
 |          Length of the barb in points; the other parts of the barb
 |          are scaled against this.
 |      
 |      pivot : {'tip', 'middle'} or float, default: 'tip'
 |          The part of the arrow that is anchored to the *X*, *Y* grid. The barb
 |          rotates about this point. This can also be a number, which shifts the
 |          start of the barb that many points away from grid point.
 |      
 |      barbcolor : color or color sequence
 |          The color of all parts of the barb except for the flags.  This parameter
 |          is analogous to the *edgecolor* parameter for polygons, which can be used
 |          instead. However this parameter will override facecolor.
 |      
 |      flagcolor : color or color sequence
 |          The color of any flags on the barb.  This parameter is analogous to the
 |          *facecolor* parameter for polygons, which can be used instead. However,
 |          this parameter will override facecolor.  If this is not set (and *C* has
 |          not either) then *flagcolor* will be set to match *barbcolor* so that the
 |          barb has a uniform color. If *C* has been set, *flagcolor* has no effect.
 |      
 |      sizes : dict, optional
 |          A dictionary of coefficients specifying the ratio of a given
 |          feature to the length of the barb. Only those values one wishes to
 |          override need to be included.  These features include:
 |      
 |          - 'spacing' - space between features (flags, full/half barbs)
 |          - 'height' - height (distance from shaft to top) of a flag or full barb
 |          - 'width' - width of a flag, twice the width of a full barb
 |          - 'emptybarb' - radius of the circle used for low magnitudes
 |      
 |      fill_empty : bool, default: False
 |          Whether the empty barbs (circles) that are drawn should be filled with
 |          the flag color.  If they are not filled, the center is transparent.
 |      
 |      rounding : bool, default: True
 |          Whether the vector magnitude should be rounded when allocating barb
 |          components.  If True, the magnitude is rounded to the nearest multiple
 |          of the half-barb increment.  If False, the magnitude is simply truncated
 |          to the next lowest multiple.
 |      
 |      barb_increments : dict, optional
 |          A dictionary of increments specifying values to associate with
 |          different parts of the barb. Only those values one wishes to
 |          override need to be included.
 |      
 |          - 'half' - half barbs (Default is 5)
 |          - 'full' - full barbs (Default is 10)
 |          - 'flag' - flags (default is 50)
 |      
 |      flip_barb : bool or array-like of bool, default: False
 |          Whether the lines and flags should point opposite to normal.
 |          Normal behavior is for the barbs and lines to point right (comes from wind
 |          barbs having these features point towards low pressure in the Northern
 |          Hemisphere).
 |      
 |          A single value is applied to all barbs. Individual barbs can be flipped by
 |          passing a bool array of the same size as *U* and *V*.
 |      
 |      Returns
 |      -------
 |      barbs : `~matplotlib.quiver.Barbs`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          The barbs can further be customized using `.PolyCollection` keyword
 |          arguments:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: array-like or scalar or None
 |          animated: bool
 |          antialiased or aa or antialiaseds: bool or list of bools
 |          array: ndarray or None
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clim: (vmin: float, vmax: float)
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          cmap: `.Colormap` or str or None
 |          color: color or list of rgba tuples
 |          contains: unknown
 |          edgecolor or ec or edgecolors: color or list of colors or 'face'
 |          facecolor or facecolors or fc: color or list of colors
 |          figure: `.Figure`
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or dashes or linestyles or ls: str or tuple or list thereof
 |          linewidth or linewidths or lw: float or list of floats
 |          norm: `.Normalize` or None
 |          offset_position: unknown
 |          offsets: (N, 2) or (2,) array-like
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          urls: list of str or None
 |          visible: bool
 |          zorder: float
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  barh(self, y, width, height=0.8, left=None, *, align='center', **kwargs)
 |      Make a horizontal bar plot.
 |      
 |      The bars are positioned at *y* with the given *align*\ment. Their
 |      dimensions are given by *width* and *height*. The horizontal baseline
 |      is *left* (default 0).
 |      
 |      Many parameters can take either a single value applying to all bars
 |      or a sequence of values, one for each bar.
 |      
 |      Parameters
 |      ----------
 |      y : float or array-like
 |          The y coordinates of the bars. See also *align* for the
 |          alignment of the bars to the coordinates.
 |      
 |      width : float or array-like
 |          The width(s) of the bars.
 |      
 |      height : float or array-like, default: 0.8
 |          The heights of the bars.
 |      
 |      left : float or array-like, default: 0
 |          The x coordinates of the left sides of the bars.
 |      
 |      align : {'center', 'edge'}, default: 'center'
 |          Alignment of the base to the *y* coordinates*:
 |      
 |          - 'center': Center the bars on the *y* positions.
 |          - 'edge': Align the bottom edges of the bars with the *y*
 |            positions.
 |      
 |          To align the bars on the top edge pass a negative *height* and
 |          ``align='edge'``.
 |      
 |      Returns
 |      -------
 |      `.BarContainer`
 |          Container with all the bars and optionally errorbars.
 |      
 |      Other Parameters
 |      ----------------
 |      color : color or list of color, optional
 |          The colors of the bar faces.
 |      
 |      edgecolor : color or list of color, optional
 |          The colors of the bar edges.
 |      
 |      linewidth : float or array-like, optional
 |          Width of the bar edge(s). If 0, don't draw edges.
 |      
 |      tick_label : str or list of str, optional
 |          The tick labels of the bars.
 |          Default: None (Use default numeric labels.)
 |      
 |      xerr, yerr : float or array-like of shape(N,) or shape(2, N), optional
 |          If not ``None``, add horizontal / vertical errorbars to the
 |          bar tips. The values are +/- sizes relative to the data:
 |      
 |          - scalar: symmetric +/- values for all bars
 |          - shape(N,): symmetric +/- values for each bar
 |          - shape(2, N): Separate - and + values for each bar. First row
 |            contains the lower errors, the second row contains the upper
 |            errors.
 |          - *None*: No errorbar. (default)
 |      
 |          See :doc:`/gallery/statistics/errorbar_features`
 |          for an example on the usage of ``xerr`` and ``yerr``.
 |      
 |      ecolor : color or list of color, default: 'black'
 |          The line color of the errorbars.
 |      
 |      capsize : float, default: :rc:`errorbar.capsize`
 |         The length of the error bar caps in points.
 |      
 |      error_kw : dict, optional
 |          Dictionary of kwargs to be passed to the `~.Axes.errorbar`
 |          method. Values of *ecolor* or *capsize* defined here take
 |          precedence over the independent kwargs.
 |      
 |      log : bool, default: False
 |          If ``True``, set the x-axis to be log scale.
 |      
 |      **kwargs : `.Rectangle` properties
 |      
 |      Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: unknown
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color: color
 |          contains: unknown
 |          edgecolor or ec: color or None or 'auto'
 |          facecolor or fc: color or None
 |          figure: `.Figure`
 |          fill: bool
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float or None
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          visible: bool
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      bar : Plot a vertical bar plot.
 |      
 |      Notes
 |      -----
 |      Stacked bars can be achieved by passing individual *left* values per
 |      bar. See
 |      :doc:`/gallery/lines_bars_and_markers/horizontal_barchart_distribution`
 |      .
 |  
 |  boxplot(self, x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_ticks=True, autorange=False, zorder=None, *, data=None)
 |      Make a box and whisker plot.
 |      
 |      Make a box and whisker plot for each column of *x* or each
 |      vector in sequence *x*.  The box extends from the lower to
 |      upper quartile values of the data, with a line at the median.
 |      The whiskers extend from the box to show the range of the
 |      data.  Flier points are those past the end of the whiskers.
 |      
 |      Parameters
 |      ----------
 |      x : Array or a sequence of vectors.
 |          The input data.
 |      
 |      notch : bool, default: False
 |          Whether to draw a notched box plot (`True`), or a rectangular box
 |          plot (`False`).  The notches represent the confidence interval (CI)
 |          around the median.  The documentation for *bootstrap* describes how
 |          the locations of the notches are computed by default, but their
 |          locations may also be overridden by setting the *conf_intervals*
 |          parameter.
 |      
 |          .. note::
 |      
 |              In cases where the values of the CI are less than the
 |              lower quartile or greater than the upper quartile, the
 |              notches will extend beyond the box, giving it a
 |              distinctive "flipped" appearance. This is expected
 |              behavior and consistent with other statistical
 |              visualization packages.
 |      
 |      sym : str, optional
 |          The default symbol for flier points.  An empty string ('') hides
 |          the fliers.  If `None`, then the fliers default to 'b+'.  More
 |          control is provided by the *flierprops* parameter.
 |      
 |      vert : bool, default: True
 |          If `True`, draws vertical boxes.
 |          If `False`, draw horizontal boxes.
 |      
 |      whis : float or (float, float), default: 1.5
 |          The position of the whiskers.
 |      
 |          If a float, the lower whisker is at the lowest datum above
 |          ``Q1 - whis*(Q3-Q1)``, and the upper whisker at the highest datum
 |          below ``Q3 + whis*(Q3-Q1)``, where Q1 and Q3 are the first and
 |          third quartiles.  The default value of ``whis = 1.5`` corresponds
 |          to Tukey's original definition of boxplots.
 |      
 |          If a pair of floats, they indicate the percentiles at which to
 |          draw the whiskers (e.g., (5, 95)).  In particular, setting this to
 |          (0, 100) results in whiskers covering the whole range of the data.
 |      
 |          In the edge case where ``Q1 == Q3``, *whis* is automatically set
 |          to (0, 100) (cover the whole range of the data) if *autorange* is
 |          True.
 |      
 |          Beyond the whiskers, data are considered outliers and are plotted
 |          as individual points.
 |      
 |      bootstrap : int, optional
 |          Specifies whether to bootstrap the confidence intervals
 |          around the median for notched boxplots. If *bootstrap* is
 |          None, no bootstrapping is performed, and notches are
 |          calculated using a Gaussian-based asymptotic approximation
 |          (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and
 |          Kendall and Stuart, 1967). Otherwise, bootstrap specifies
 |          the number of times to bootstrap the median to determine its
 |          95% confidence intervals. Values between 1000 and 10000 are
 |          recommended.
 |      
 |      usermedians : 1D array-like, optional
 |          A 1D array-like of length ``len(x)``.  Each entry that is not
 |          `None` forces the value of the median for the corresponding
 |          dataset.  For entries that are `None`, the medians are computed
 |          by Matplotlib as normal.
 |      
 |      conf_intervals : array-like, optional
 |          A 2D array-like of shape ``(len(x), 2)``.  Each entry that is not
 |          None forces the location of the corresponding notch (which is
 |          only drawn if *notch* is `True`).  For entries that are `None`,
 |          the notches are computed by the method specified by the other
 |          parameters (e.g., *bootstrap*).
 |      
 |      positions : array-like, optional
 |          The positions of the boxes. The ticks and limits are
 |          automatically set to match the positions. Defaults to
 |          ``range(1, N+1)`` where N is the number of boxes to be drawn.
 |      
 |      widths : float or array-like
 |          The widths of the boxes.  The default is 0.5, or ``0.15*(distance
 |          between extreme positions)``, if that is smaller.
 |      
 |      patch_artist : bool, default: False
 |          If `False` produces boxes with the Line2D artist. Otherwise,
 |          boxes and drawn with Patch artists.
 |      
 |      labels : sequence, optional
 |          Labels for each dataset (one per dataset).
 |      
 |      manage_ticks : bool, default: True
 |          If True, the tick locations and labels will be adjusted to match
 |          the boxplot positions.
 |      
 |      autorange : bool, default: False
 |          When `True` and the data are distributed such that the 25th and
 |          75th percentiles are equal, *whis* is set to (0, 100) such
 |          that the whisker ends are at the minimum and maximum of the data.
 |      
 |      meanline : bool, default: False
 |          If `True` (and *showmeans* is `True`), will try to render the
 |          mean as a line spanning the full width of the box according to
 |          *meanprops* (see below).  Not recommended if *shownotches* is also
 |          True.  Otherwise, means will be shown as points.
 |      
 |      zorder : float, default: ``Line2D.zorder = 2``
 |          The zorder of the boxplot.
 |      
 |      Returns
 |      -------
 |      dict
 |        A dictionary mapping each component of the boxplot to a list
 |        of the `.Line2D` instances created. That dictionary has the
 |        following keys (assuming vertical boxplots):
 |      
 |        - ``boxes``: the main body of the boxplot showing the
 |          quartiles and the median's confidence intervals if
 |          enabled.
 |      
 |        - ``medians``: horizontal lines at the median of each box.
 |      
 |        - ``whiskers``: the vertical lines extending to the most
 |          extreme, non-outlier data points.
 |      
 |        - ``caps``: the horizontal lines at the ends of the
 |          whiskers.
 |      
 |        - ``fliers``: points representing data that extend beyond
 |          the whiskers (fliers).
 |      
 |        - ``means``: points or lines representing the means.
 |      
 |      Other Parameters
 |      ----------------
 |      showcaps : bool, default: True
 |          Show the caps on the ends of whiskers.
 |      showbox : bool, default: True
 |          Show the central box.
 |      showfliers : bool, default: True
 |          Show the outliers beyond the caps.
 |      showmeans : bool, default: False
 |          Show the arithmetic means.
 |      capprops : dict, default: None
 |          The style of the caps.
 |      boxprops : dict, default: None
 |          The style of the box.
 |      whiskerprops : dict, default: None
 |          The style of the whiskers.
 |      flierprops : dict, default: None
 |          The style of the fliers.
 |      medianprops : dict, default: None
 |          The style of the median.
 |      meanprops : dict, default: None
 |          The style of the mean.
 |      
 |      Notes
 |      -----
 |      Box plots provide insight into distribution properties of the data.
 |      However, they can be challenging to interpret for the unfamiliar
 |      reader. The figure below illustrates the different visual features of
 |      a box plot.
 |      
 |      .. image:: /_static/boxplot_explanation.png
 |         :alt: Illustration of box plot features
 |         :scale: 50 %
 |      
 |      The whiskers mark the range of the non-outlier data. The most common
 |      definition of non-outlier is ``[Q1 - 1.5xIQR, Q3 + 1.5xIQR]``, which
 |      is also the default in this function. Other whisker meanings can be
 |      applied via the *whis* parameter.
 |      
 |      See `Box plot <https://en.wikipedia.org/wiki/Box_plot>`_ on Wikipedia
 |      for further information.
 |      
 |      Violin plots (`~.Axes.violinplot`) add even more detail about the
 |      statistical distribution by plotting the kernel density estimation
 |      (KDE) as an estimation of the probability density function.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  broken_barh(self, xranges, yrange, *, data=None, **kwargs)
 |      Plot a horizontal sequence of rectangles.
 |      
 |      A rectangle is drawn for each element of *xranges*. All rectangles
 |      have the same vertical position and size defined by *yrange*.
 |      
 |      This is a convenience function for instantiating a
 |      `.BrokenBarHCollection`, adding it to the Axes and autoscaling the
 |      view.
 |      
 |      Parameters
 |      ----------
 |      xranges : sequence of tuples (*xmin*, *xwidth*)
 |          The x-positions and extends of the rectangles. For each tuple
 |          (*xmin*, *xwidth*) a rectangle is drawn from *xmin* to *xmin* +
 |          *xwidth*.
 |      yrange : (*ymin*, *yheight*)
 |          The y-position and extend for all the rectangles.
 |      
 |      Returns
 |      -------
 |      `~.collections.BrokenBarHCollection`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `.BrokenBarHCollection` properties
 |      
 |          Each *kwarg* can be either a single argument applying to all
 |          rectangles, e.g.::
 |      
 |              facecolors='black'
 |      
 |          or a sequence of arguments over which is cycled, e.g.::
 |      
 |              facecolors=('black', 'blue')
 |      
 |          would create interleaving black and blue rectangles.
 |      
 |          Supported keywords:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: array-like or scalar or None
 |          animated: bool
 |          antialiased or aa or antialiaseds: bool or list of bools
 |          array: ndarray or None
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clim: (vmin: float, vmax: float)
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          cmap: `.Colormap` or str or None
 |          color: color or list of rgba tuples
 |          contains: unknown
 |          edgecolor or ec or edgecolors: color or list of colors or 'face'
 |          facecolor or facecolors or fc: color or list of colors
 |          figure: `.Figure`
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or dashes or linestyles or ls: str or tuple or list thereof
 |          linewidth or linewidths or lw: float or list of floats
 |          norm: `.Normalize` or None
 |          offset_position: unknown
 |          offsets: (N, 2) or (2,) array-like
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          urls: list of str or None
 |          visible: bool
 |          zorder: float
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  bxp(self, bxpstats, positions=None, widths=None, vert=True, patch_artist=False, shownotches=False, showmeans=False, showcaps=True, showbox=True, showfliers=True, boxprops=None, whiskerprops=None, flierprops=None, medianprops=None, capprops=None, meanprops=None, meanline=False, manage_ticks=True, zorder=None)
 |      Drawing function for box and whisker plots.
 |      
 |      Make a box and whisker plot for each column of *x* or each
 |      vector in sequence *x*.  The box extends from the lower to
 |      upper quartile values of the data, with a line at the median.
 |      The whiskers extend from the box to show the range of the
 |      data.  Flier points are those past the end of the whiskers.
 |      
 |      Parameters
 |      ----------
 |      bxpstats : list of dicts
 |        A list of dictionaries containing stats for each boxplot.
 |        Required keys are:
 |      
 |        - ``med``: The median (scalar float).
 |      
 |        - ``q1``: The first quartile (25th percentile) (scalar
 |          float).
 |      
 |        - ``q3``: The third quartile (75th percentile) (scalar
 |          float).
 |      
 |        - ``whislo``: Lower bound of the lower whisker (scalar
 |          float).
 |      
 |        - ``whishi``: Upper bound of the upper whisker (scalar
 |          float).
 |      
 |        Optional keys are:
 |      
 |        - ``mean``: The mean (scalar float). Needed if
 |          ``showmeans=True``.
 |      
 |        - ``fliers``: Data beyond the whiskers (sequence of floats).
 |          Needed if ``showfliers=True``.
 |      
 |        - ``cilo`` & ``cihi``: Lower and upper confidence intervals
 |          about the median. Needed if ``shownotches=True``.
 |      
 |        - ``label``: Name of the dataset (string). If available,
 |          this will be used a tick label for the boxplot
 |      
 |      positions : array-like, default: [1, 2, ..., n]
 |        The positions of the boxes. The ticks and limits
 |        are automatically set to match the positions.
 |      
 |      widths : array-like, default: None
 |        Either a scalar or a vector and sets the width of each
 |        box. The default is ``0.15*(distance between extreme
 |        positions)``, clipped to no less than 0.15 and no more than
 |        0.5.
 |      
 |      vert : bool, default: True
 |        If `True` (default), makes the boxes vertical.  If `False`,
 |        makes horizontal boxes.
 |      
 |      patch_artist : bool, default: False
 |        If `False` produces boxes with the `.Line2D` artist.
 |        If `True` produces boxes with the `~matplotlib.patches.Patch` artist.
 |      
 |      shownotches : bool, default: False
 |        If `False` (default), produces a rectangular box plot.
 |        If `True`, will produce a notched box plot
 |      
 |      showmeans : bool, default: False
 |        If `True`, will toggle on the rendering of the means
 |      
 |      showcaps  : bool, default: True
 |        If `True`, will toggle on the rendering of the caps
 |      
 |      showbox  : bool, default: True
 |        If `True`, will toggle on the rendering of the box
 |      
 |      showfliers : bool, default: True
 |        If `True`, will toggle on the rendering of the fliers
 |      
 |      boxprops : dict or None (default)
 |        If provided, will set the plotting style of the boxes
 |      
 |      whiskerprops : dict or None (default)
 |        If provided, will set the plotting style of the whiskers
 |      
 |      capprops : dict or None (default)
 |        If provided, will set the plotting style of the caps
 |      
 |      flierprops : dict or None (default)
 |        If provided will set the plotting style of the fliers
 |      
 |      medianprops : dict or None (default)
 |        If provided, will set the plotting style of the medians
 |      
 |      meanprops : dict or None (default)
 |        If provided, will set the plotting style of the means
 |      
 |      meanline : bool, default: False
 |        If `True` (and *showmeans* is `True`), will try to render the mean
 |        as a line spanning the full width of the box according to
 |        *meanprops*. Not recommended if *shownotches* is also True.
 |        Otherwise, means will be shown as points.
 |      
 |      manage_ticks : bool, default: True
 |        If True, the tick locations and labels will be adjusted to match the
 |        boxplot positions.
 |      
 |      zorder : float, default: ``Line2D.zorder = 2``
 |        The zorder of the resulting boxplot.
 |      
 |      Returns
 |      -------
 |      dict
 |        A dictionary mapping each component of the boxplot to a list
 |        of the `.Line2D` instances created. That dictionary has the
 |        following keys (assuming vertical boxplots):
 |      
 |        - ``boxes``: the main body of the boxplot showing the
 |          quartiles and the median's confidence intervals if
 |          enabled.
 |      
 |        - ``medians``: horizontal lines at the median of each box.
 |      
 |        - ``whiskers``: the vertical lines extending to the most
 |          extreme, non-outlier data points.
 |      
 |        - ``caps``: the horizontal lines at the ends of the
 |          whiskers.
 |      
 |        - ``fliers``: points representing data that extend beyond
 |          the whiskers (fliers).
 |      
 |        - ``means``: points or lines representing the means.
 |      
 |      Examples
 |      --------
 |      .. plot:: gallery/statistics/bxp.py
 |  
 |  clabel(self, CS, levels=None, **kwargs)
 |      Label a contour plot.
 |      
 |      Adds labels to line contours in given `.ContourSet`.
 |      
 |      Parameters
 |      ----------
 |      CS : `~.ContourSet` instance
 |          Line contours to label.
 |      
 |      levels : array-like, optional
 |          A list of level values, that should be labeled. The list must be
 |          a subset of ``CS.levels``. If not given, all levels are labeled.
 |      
 |      **kwargs
 |          All other parameters are documented in `~.ContourLabeler.clabel`.
 |  
 |  cohere(self, x, y, NFFT=256, Fs=2, Fc=0, detrend=<function detrend_none at 0x7ff197e64d30>, window=<function window_hanning at 0x7ff197e64940>, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, *, data=None, **kwargs)
 |      Plot the coherence between *x* and *y*.
 |      
 |      Plot the coherence between *x* and *y*.  Coherence is the
 |      normalized cross spectral density:
 |      
 |      .. math::
 |      
 |        C_{xy} = \frac{|P_{xy}|^2}{P_{xx}P_{yy}}
 |      
 |      Parameters
 |      ----------
 |      Fs : float, default: 2
 |          The sampling frequency (samples per time unit).  It is used to calculate
 |          the Fourier frequencies, *freqs*, in cycles per time unit.
 |      
 |      window : callable or ndarray, default: `.window_hanning`
 |          A function or a vector of length *NFFT*.  To create window vectors see
 |          `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,
 |          `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a
 |          function is passed as the argument, it must take a data segment as an
 |          argument and return the windowed version of the segment.
 |      
 |      sides : {'default', 'onesided', 'twosided'}, optional
 |          Which sides of the spectrum to return. 'default' is one-sided for real
 |          data and two-sided for complex data. 'onesided' forces the return of a
 |          one-sided spectrum, while 'twosided' forces two-sided.
 |      
 |      pad_to : int, optional
 |          The number of points to which the data segment is padded when performing
 |          the FFT.  This can be different from *NFFT*, which specifies the number
 |          of data points used.  While not increasing the actual resolution of the
 |          spectrum (the minimum distance between resolvable peaks), this can give
 |          more points in the plot, allowing for more detail. This corresponds to
 |          the *n* parameter in the call to fft(). The default is None, which sets
 |          *pad_to* equal to *NFFT*
 |      
 |      NFFT : int, default: 256
 |          The number of data points used in each block for the FFT.  A power 2 is
 |          most efficient.  This should *NOT* be used to get zero padding, or the
 |          scaling of the result will be incorrect; use *pad_to* for this instead.
 |      
 |      detrend : {'none', 'mean', 'linear'} or callable, default: 'none'
 |          The function applied to each segment before fft-ing, designed to remove
 |          the mean or linear trend.  Unlike in MATLAB, where the *detrend* parameter
 |          is a vector, in Matplotlib is it a function.  The :mod:`~matplotlib.mlab`
 |          module defines `.detrend_none`, `.detrend_mean`, and `.detrend_linear`,
 |          but you can use a custom function as well.  You can also use a string to
 |          choose one of the functions: 'none' calls `.detrend_none`. 'mean' calls
 |          `.detrend_mean`. 'linear' calls `.detrend_linear`.
 |      
 |      scale_by_freq : bool, default: True
 |          Whether the resulting density values should be scaled by the scaling
 |          frequency, which gives density in units of Hz^-1.  This allows for
 |          integration over the returned frequency values.  The default is True for
 |          MATLAB compatibility.
 |      
 |      noverlap : int, default: 0 (no overlap)
 |          The number of points of overlap between blocks.
 |      
 |      Fc : int, default: 0
 |          The center frequency of *x*, which offsets the x extents of the
 |          plot to reflect the frequency range used when a signal is acquired
 |          and then filtered and downsampled to baseband.
 |      
 |      Returns
 |      -------
 |      Cxy : 1-D array
 |          The coherence vector.
 |      
 |      freqs : 1-D array
 |          The frequencies for the elements in *Cxy*.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Keyword arguments control the `.Line2D` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      References
 |      ----------
 |      Bendat & Piersol -- Random Data: Analysis and Measurement Procedures,
 |      John Wiley & Sons (1986)
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  contour(self, *args, data=None, **kwargs)
 |      Plot contour lines.
 |      
 |      Call signature::
 |      
 |          contour([X, Y,] Z, [levels], **kwargs)
 |      
 |      `.contour` and `.contourf` draw contour lines and filled contours,
 |      respectively.  Except as noted, function signatures and return values
 |      are the same for both versions.
 |      
 |      Parameters
 |      ----------
 |      X, Y : array-like, optional
 |          The coordinates of the values in *Z*.
 |      
 |          *X* and *Y* must both be 2D with the same shape as *Z* (e.g.
 |          created via `numpy.meshgrid`), or they must both be 1-D such
 |          that ``len(X) == M`` is the number of columns in *Z* and
 |          ``len(Y) == N`` is the number of rows in *Z*.
 |      
 |          If not given, they are assumed to be integer indices, i.e.
 |          ``X = range(M)``, ``Y = range(N)``.
 |      
 |      Z : (M, N) array-like
 |          The height values over which the contour is drawn.
 |      
 |      levels : int or array-like, optional
 |          Determines the number and positions of the contour lines / regions.
 |      
 |          If an int *n*, use `~matplotlib.ticker.MaxNLocator`, which tries
 |          to automatically choose no more than *n+1* "nice" contour levels
 |          between *vmin* and *vmax*.
 |      
 |          If array-like, draw contour lines at the specified levels.
 |          The values must be in increasing order.
 |      
 |      Returns
 |      -------
 |      `~.contour.QuadContourSet`
 |      
 |      Other Parameters
 |      ----------------
 |      corner_mask : bool, default: :rc:`contour.corner_mask`
 |          Enable/disable corner masking, which only has an effect if *Z* is
 |          a masked array.  If ``False``, any quad touching a masked point is
 |          masked out.  If ``True``, only the triangular corners of quads
 |          nearest those points are always masked out, other triangular
 |          corners comprising three unmasked points are contoured as usual.
 |      
 |      colors : color string or sequence of colors, optional
 |          The colors of the levels, i.e. the lines for `.contour` and the
 |          areas for `.contourf`.
 |      
 |          The sequence is cycled for the levels in ascending order. If the
 |          sequence is shorter than the number of levels, it's repeated.
 |      
 |          As a shortcut, single color strings may be used in place of
 |          one-element lists, i.e. ``'red'`` instead of ``['red']`` to color
 |          all levels with the same color. This shortcut does only work for
 |          color strings, not for other ways of specifying colors.
 |      
 |          By default (value *None*), the colormap specified by *cmap*
 |          will be used.
 |      
 |      alpha : float, default: 1
 |          The alpha blending value, between 0 (transparent) and 1 (opaque).
 |      
 |      cmap : str or `.Colormap`, default: :rc:`image.cmap`
 |          A `.Colormap` instance or registered colormap name. The colormap
 |          maps the level values to colors.
 |      
 |          If both *colors* and *cmap* are given, an error is raised.
 |      
 |      norm : `~matplotlib.colors.Normalize`, optional
 |          If a colormap is used, the `.Normalize` instance scales the level
 |          values to the canonical colormap range [0, 1] for mapping to
 |          colors. If not given, the default linear scaling is used.
 |      
 |      vmin, vmax : float, optional
 |          If not *None*, either or both of these values will be supplied to
 |          the `.Normalize` instance, overriding the default color scaling
 |          based on *levels*.
 |      
 |      origin : {*None*, 'upper', 'lower', 'image'}, default: None
 |          Determines the orientation and exact position of *Z* by specifying
 |          the position of ``Z[0, 0]``.  This is only relevant, if *X*, *Y*
 |          are not given.
 |      
 |          - *None*: ``Z[0, 0]`` is at X=0, Y=0 in the lower left corner.
 |          - 'lower': ``Z[0, 0]`` is at X=0.5, Y=0.5 in the lower left corner.
 |          - 'upper': ``Z[0, 0]`` is at X=N+0.5, Y=0.5 in the upper left
 |            corner.
 |          - 'image': Use the value from :rc:`image.origin`.
 |      
 |      extent : (x0, x1, y0, y1), optional
 |          If *origin* is not *None*, then *extent* is interpreted as in
 |          `.imshow`: it gives the outer pixel boundaries. In this case, the
 |          position of Z[0, 0] is the center of the pixel, not a corner. If
 |          *origin* is *None*, then (*x0*, *y0*) is the position of Z[0, 0],
 |          and (*x1*, *y1*) is the position of Z[-1, -1].
 |      
 |          This argument is ignored if *X* and *Y* are specified in the call
 |          to contour.
 |      
 |      locator : ticker.Locator subclass, optional
 |          The locator is used to determine the contour levels if they
 |          are not given explicitly via *levels*.
 |          Defaults to `~.ticker.MaxNLocator`.
 |      
 |      extend : {'neither', 'both', 'min', 'max'}, default: 'neither'
 |          Determines the ``contourf``-coloring of values that are outside the
 |          *levels* range.
 |      
 |          If 'neither', values outside the *levels* range are not colored.
 |          If 'min', 'max' or 'both', color the values below, above or below
 |          and above the *levels* range.
 |      
 |          Values below ``min(levels)`` and above ``max(levels)`` are mapped
 |          to the under/over values of the `.Colormap`. Note that most
 |          colormaps do not have dedicated colors for these by default, so
 |          that the over and under values are the edge values of the colormap.
 |          You may want to set these values explicitly using
 |          `.Colormap.set_under` and `.Colormap.set_over`.
 |      
 |          .. note::
 |      
 |              An existing `.QuadContourSet` does not get notified if
 |              properties of its colormap are changed. Therefore, an explicit
 |              call `.QuadContourSet.changed()` is needed after modifying the
 |              colormap. The explicit call can be left out, if a colorbar is
 |              assigned to the `.QuadContourSet` because it internally calls
 |              `.QuadContourSet.changed()`.
 |      
 |          Example::
 |      
 |              x = np.arange(1, 10)
 |              y = x.reshape(-1, 1)
 |              h = x * y
 |      
 |              cs = plt.contourf(h, levels=[10, 30, 50],
 |                  colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')
 |              cs.cmap.set_over('red')
 |              cs.cmap.set_under('blue')
 |              cs.changed()
 |      
 |      xunits, yunits : registered units, optional
 |          Override axis units by specifying an instance of a
 |          :class:`matplotlib.units.ConversionInterface`.
 |      
 |      antialiased : bool, optional
 |          Enable antialiasing, overriding the defaults.  For
 |          filled contours, the default is *True*.  For line contours,
 |          it is taken from :rc:`lines.antialiased`.
 |      
 |      nchunk : int >= 0, optional
 |          If 0, no subdivision of the domain.  Specify a positive integer to
 |          divide the domain into subdomains of *nchunk* by *nchunk* quads.
 |          Chunking reduces the maximum length of polygons generated by the
 |          contouring algorithm which reduces the rendering workload passed
 |          on to the backend and also requires slightly less RAM.  It can
 |          however introduce rendering artifacts at chunk boundaries depending
 |          on the backend, the *antialiased* flag and value of *alpha*.
 |      
 |      linewidths : float or array-like, default: :rc:`contour.linewidth`
 |          *Only applies to* `.contour`.
 |      
 |          The line width of the contour lines.
 |      
 |          If a number, all levels will be plotted with this linewidth.
 |      
 |          If a sequence, the levels in ascending order will be plotted with
 |          the linewidths in the order specified.
 |      
 |          If None, this falls back to :rc:`lines.linewidth`.
 |      
 |      linestyles : {*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional
 |          *Only applies to* `.contour`.
 |      
 |          If *linestyles* is *None*, the default is 'solid' unless the lines
 |          are monochrome.  In that case, negative contours will take their
 |          linestyle from :rc:`contour.negative_linestyle` setting.
 |      
 |          *linestyles* can also be an iterable of the above strings
 |          specifying a set of linestyles to be used. If this
 |          iterable is shorter than the number of contour levels
 |          it will be repeated as necessary.
 |      
 |      hatches : list[str], optional
 |          *Only applies to* `.contourf`.
 |      
 |          A list of cross hatch patterns to use on the filled areas.
 |          If None, no hatching will be added to the contour.
 |          Hatching is supported in the PostScript, PDF, SVG and Agg
 |          backends only.
 |      
 |      Notes
 |      -----
 |      1. `.contourf` differs from the MATLAB version in that it does not draw
 |         the polygon edges. To draw edges, add line contours with calls to
 |         `.contour`.
 |      
 |      2. `.contourf` fills intervals that are closed at the top; that is, for
 |         boundaries *z1* and *z2*, the filled region is::
 |      
 |            z1 < Z <= z2
 |      
 |         except for the lowest interval, which is closed on both sides (i.e.
 |         it includes the lowest value).
 |  
 |  contourf(self, *args, data=None, **kwargs)
 |      Plot filled contours.
 |      
 |      Call signature::
 |      
 |          contourf([X, Y,] Z, [levels], **kwargs)
 |      
 |      `.contour` and `.contourf` draw contour lines and filled contours,
 |      respectively.  Except as noted, function signatures and return values
 |      are the same for both versions.
 |      
 |      Parameters
 |      ----------
 |      X, Y : array-like, optional
 |          The coordinates of the values in *Z*.
 |      
 |          *X* and *Y* must both be 2D with the same shape as *Z* (e.g.
 |          created via `numpy.meshgrid`), or they must both be 1-D such
 |          that ``len(X) == M`` is the number of columns in *Z* and
 |          ``len(Y) == N`` is the number of rows in *Z*.
 |      
 |          If not given, they are assumed to be integer indices, i.e.
 |          ``X = range(M)``, ``Y = range(N)``.
 |      
 |      Z : (M, N) array-like
 |          The height values over which the contour is drawn.
 |      
 |      levels : int or array-like, optional
 |          Determines the number and positions of the contour lines / regions.
 |      
 |          If an int *n*, use `~matplotlib.ticker.MaxNLocator`, which tries
 |          to automatically choose no more than *n+1* "nice" contour levels
 |          between *vmin* and *vmax*.
 |      
 |          If array-like, draw contour lines at the specified levels.
 |          The values must be in increasing order.
 |      
 |      Returns
 |      -------
 |      `~.contour.QuadContourSet`
 |      
 |      Other Parameters
 |      ----------------
 |      corner_mask : bool, default: :rc:`contour.corner_mask`
 |          Enable/disable corner masking, which only has an effect if *Z* is
 |          a masked array.  If ``False``, any quad touching a masked point is
 |          masked out.  If ``True``, only the triangular corners of quads
 |          nearest those points are always masked out, other triangular
 |          corners comprising three unmasked points are contoured as usual.
 |      
 |      colors : color string or sequence of colors, optional
 |          The colors of the levels, i.e. the lines for `.contour` and the
 |          areas for `.contourf`.
 |      
 |          The sequence is cycled for the levels in ascending order. If the
 |          sequence is shorter than the number of levels, it's repeated.
 |      
 |          As a shortcut, single color strings may be used in place of
 |          one-element lists, i.e. ``'red'`` instead of ``['red']`` to color
 |          all levels with the same color. This shortcut does only work for
 |          color strings, not for other ways of specifying colors.
 |      
 |          By default (value *None*), the colormap specified by *cmap*
 |          will be used.
 |      
 |      alpha : float, default: 1
 |          The alpha blending value, between 0 (transparent) and 1 (opaque).
 |      
 |      cmap : str or `.Colormap`, default: :rc:`image.cmap`
 |          A `.Colormap` instance or registered colormap name. The colormap
 |          maps the level values to colors.
 |      
 |          If both *colors* and *cmap* are given, an error is raised.
 |      
 |      norm : `~matplotlib.colors.Normalize`, optional
 |          If a colormap is used, the `.Normalize` instance scales the level
 |          values to the canonical colormap range [0, 1] for mapping to
 |          colors. If not given, the default linear scaling is used.
 |      
 |      vmin, vmax : float, optional
 |          If not *None*, either or both of these values will be supplied to
 |          the `.Normalize` instance, overriding the default color scaling
 |          based on *levels*.
 |      
 |      origin : {*None*, 'upper', 'lower', 'image'}, default: None
 |          Determines the orientation and exact position of *Z* by specifying
 |          the position of ``Z[0, 0]``.  This is only relevant, if *X*, *Y*
 |          are not given.
 |      
 |          - *None*: ``Z[0, 0]`` is at X=0, Y=0 in the lower left corner.
 |          - 'lower': ``Z[0, 0]`` is at X=0.5, Y=0.5 in the lower left corner.
 |          - 'upper': ``Z[0, 0]`` is at X=N+0.5, Y=0.5 in the upper left
 |            corner.
 |          - 'image': Use the value from :rc:`image.origin`.
 |      
 |      extent : (x0, x1, y0, y1), optional
 |          If *origin* is not *None*, then *extent* is interpreted as in
 |          `.imshow`: it gives the outer pixel boundaries. In this case, the
 |          position of Z[0, 0] is the center of the pixel, not a corner. If
 |          *origin* is *None*, then (*x0*, *y0*) is the position of Z[0, 0],
 |          and (*x1*, *y1*) is the position of Z[-1, -1].
 |      
 |          This argument is ignored if *X* and *Y* are specified in the call
 |          to contour.
 |      
 |      locator : ticker.Locator subclass, optional
 |          The locator is used to determine the contour levels if they
 |          are not given explicitly via *levels*.
 |          Defaults to `~.ticker.MaxNLocator`.
 |      
 |      extend : {'neither', 'both', 'min', 'max'}, default: 'neither'
 |          Determines the ``contourf``-coloring of values that are outside the
 |          *levels* range.
 |      
 |          If 'neither', values outside the *levels* range are not colored.
 |          If 'min', 'max' or 'both', color the values below, above or below
 |          and above the *levels* range.
 |      
 |          Values below ``min(levels)`` and above ``max(levels)`` are mapped
 |          to the under/over values of the `.Colormap`. Note that most
 |          colormaps do not have dedicated colors for these by default, so
 |          that the over and under values are the edge values of the colormap.
 |          You may want to set these values explicitly using
 |          `.Colormap.set_under` and `.Colormap.set_over`.
 |      
 |          .. note::
 |      
 |              An existing `.QuadContourSet` does not get notified if
 |              properties of its colormap are changed. Therefore, an explicit
 |              call `.QuadContourSet.changed()` is needed after modifying the
 |              colormap. The explicit call can be left out, if a colorbar is
 |              assigned to the `.QuadContourSet` because it internally calls
 |              `.QuadContourSet.changed()`.
 |      
 |          Example::
 |      
 |              x = np.arange(1, 10)
 |              y = x.reshape(-1, 1)
 |              h = x * y
 |      
 |              cs = plt.contourf(h, levels=[10, 30, 50],
 |                  colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')
 |              cs.cmap.set_over('red')
 |              cs.cmap.set_under('blue')
 |              cs.changed()
 |      
 |      xunits, yunits : registered units, optional
 |          Override axis units by specifying an instance of a
 |          :class:`matplotlib.units.ConversionInterface`.
 |      
 |      antialiased : bool, optional
 |          Enable antialiasing, overriding the defaults.  For
 |          filled contours, the default is *True*.  For line contours,
 |          it is taken from :rc:`lines.antialiased`.
 |      
 |      nchunk : int >= 0, optional
 |          If 0, no subdivision of the domain.  Specify a positive integer to
 |          divide the domain into subdomains of *nchunk* by *nchunk* quads.
 |          Chunking reduces the maximum length of polygons generated by the
 |          contouring algorithm which reduces the rendering workload passed
 |          on to the backend and also requires slightly less RAM.  It can
 |          however introduce rendering artifacts at chunk boundaries depending
 |          on the backend, the *antialiased* flag and value of *alpha*.
 |      
 |      linewidths : float or array-like, default: :rc:`contour.linewidth`
 |          *Only applies to* `.contour`.
 |      
 |          The line width of the contour lines.
 |      
 |          If a number, all levels will be plotted with this linewidth.
 |      
 |          If a sequence, the levels in ascending order will be plotted with
 |          the linewidths in the order specified.
 |      
 |          If None, this falls back to :rc:`lines.linewidth`.
 |      
 |      linestyles : {*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional
 |          *Only applies to* `.contour`.
 |      
 |          If *linestyles* is *None*, the default is 'solid' unless the lines
 |          are monochrome.  In that case, negative contours will take their
 |          linestyle from :rc:`contour.negative_linestyle` setting.
 |      
 |          *linestyles* can also be an iterable of the above strings
 |          specifying a set of linestyles to be used. If this
 |          iterable is shorter than the number of contour levels
 |          it will be repeated as necessary.
 |      
 |      hatches : list[str], optional
 |          *Only applies to* `.contourf`.
 |      
 |          A list of cross hatch patterns to use on the filled areas.
 |          If None, no hatching will be added to the contour.
 |          Hatching is supported in the PostScript, PDF, SVG and Agg
 |          backends only.
 |      
 |      Notes
 |      -----
 |      1. `.contourf` differs from the MATLAB version in that it does not draw
 |         the polygon edges. To draw edges, add line contours with calls to
 |         `.contour`.
 |      
 |      2. `.contourf` fills intervals that are closed at the top; that is, for
 |         boundaries *z1* and *z2*, the filled region is::
 |      
 |            z1 < Z <= z2
 |      
 |         except for the lowest interval, which is closed on both sides (i.e.
 |         it includes the lowest value).
 |  
 |  csd(self, x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, *, data=None, **kwargs)
 |      Plot the cross-spectral density.
 |      
 |      The cross spectral density :math:`P_{xy}` by Welch's average
 |      periodogram method.  The vectors *x* and *y* are divided into
 |      *NFFT* length segments.  Each segment is detrended by function
 |      *detrend* and windowed by function *window*.  *noverlap* gives
 |      the length of the overlap between segments.  The product of
 |      the direct FFTs of *x* and *y* are averaged over each segment
 |      to compute :math:`P_{xy}`, with a scaling to correct for power
 |      loss due to windowing.
 |      
 |      If len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero
 |      padded to *NFFT*.
 |      
 |      Parameters
 |      ----------
 |      x, y : 1-D arrays or sequences
 |          Arrays or sequences containing the data.
 |      
 |      Fs : float, default: 2
 |          The sampling frequency (samples per time unit).  It is used to calculate
 |          the Fourier frequencies, *freqs*, in cycles per time unit.
 |      
 |      window : callable or ndarray, default: `.window_hanning`
 |          A function or a vector of length *NFFT*.  To create window vectors see
 |          `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,
 |          `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a
 |          function is passed as the argument, it must take a data segment as an
 |          argument and return the windowed version of the segment.
 |      
 |      sides : {'default', 'onesided', 'twosided'}, optional
 |          Which sides of the spectrum to return. 'default' is one-sided for real
 |          data and two-sided for complex data. 'onesided' forces the return of a
 |          one-sided spectrum, while 'twosided' forces two-sided.
 |      
 |      pad_to : int, optional
 |          The number of points to which the data segment is padded when performing
 |          the FFT.  This can be different from *NFFT*, which specifies the number
 |          of data points used.  While not increasing the actual resolution of the
 |          spectrum (the minimum distance between resolvable peaks), this can give
 |          more points in the plot, allowing for more detail. This corresponds to
 |          the *n* parameter in the call to fft(). The default is None, which sets
 |          *pad_to* equal to *NFFT*
 |      
 |      NFFT : int, default: 256
 |          The number of data points used in each block for the FFT.  A power 2 is
 |          most efficient.  This should *NOT* be used to get zero padding, or the
 |          scaling of the result will be incorrect; use *pad_to* for this instead.
 |      
 |      detrend : {'none', 'mean', 'linear'} or callable, default: 'none'
 |          The function applied to each segment before fft-ing, designed to remove
 |          the mean or linear trend.  Unlike in MATLAB, where the *detrend* parameter
 |          is a vector, in Matplotlib is it a function.  The :mod:`~matplotlib.mlab`
 |          module defines `.detrend_none`, `.detrend_mean`, and `.detrend_linear`,
 |          but you can use a custom function as well.  You can also use a string to
 |          choose one of the functions: 'none' calls `.detrend_none`. 'mean' calls
 |          `.detrend_mean`. 'linear' calls `.detrend_linear`.
 |      
 |      scale_by_freq : bool, default: True
 |          Whether the resulting density values should be scaled by the scaling
 |          frequency, which gives density in units of Hz^-1.  This allows for
 |          integration over the returned frequency values.  The default is True for
 |          MATLAB compatibility.
 |      
 |      noverlap : int, default: 0 (no overlap)
 |          The number of points of overlap between segments.
 |      
 |      Fc : int, default: 0
 |          The center frequency of *x*, which offsets the x extents of the
 |          plot to reflect the frequency range used when a signal is acquired
 |          and then filtered and downsampled to baseband.
 |      
 |      return_line : bool, default: False
 |          Whether to include the line object plotted in the returned values.
 |      
 |      Returns
 |      -------
 |      Pxy : 1-D array
 |          The values for the cross spectrum :math:`P_{xy}` before scaling
 |          (complex valued).
 |      
 |      freqs : 1-D array
 |          The frequencies corresponding to the elements in *Pxy*.
 |      
 |      line : `~matplotlib.lines.Line2D`
 |          The line created by this function.
 |          Only returned if *return_line* is True.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Keyword arguments control the `.Line2D` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      psd : is equivalent to setting ``y = x``.
 |      
 |      Notes
 |      -----
 |      For plotting, the power is plotted as
 |      :math:`10 \log_{10}(P_{xy})` for decibels, though :math:`P_{xy}` itself
 |      is returned.
 |      
 |      References
 |      ----------
 |      Bendat & Piersol -- Random Data: Analysis and Measurement Procedures,
 |      John Wiley & Sons (1986)
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  errorbar(self, x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None, capsize=None, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, errorevery=1, capthick=None, *, data=None, **kwargs)
 |      Plot y versus x as lines and/or markers with attached errorbars.
 |      
 |      *x*, *y* define the data locations, *xerr*, *yerr* define the errorbar
 |      sizes. By default, this draws the data markers/lines as well the
 |      errorbars. Use fmt='none' to draw errorbars without any data markers.
 |      
 |      Parameters
 |      ----------
 |      x, y : float or array-like
 |          The data positions.
 |      
 |      xerr, yerr : float or array-like, shape(N,) or shape(2, N), optional
 |          The errorbar sizes:
 |      
 |          - scalar: Symmetric +/- values for all data points.
 |          - shape(N,): Symmetric +/-values for each data point.
 |          - shape(2, N): Separate - and + values for each bar. First row
 |            contains the lower errors, the second row contains the upper
 |            errors.
 |          - *None*: No errorbar.
 |      
 |          Note that all error arrays should have *positive* values.
 |      
 |          See :doc:`/gallery/statistics/errorbar_features`
 |          for an example on the usage of ``xerr`` and ``yerr``.
 |      
 |      fmt : str, default: ''
 |          The format for the data points / data lines. See `.plot` for
 |          details.
 |      
 |          Use 'none' (case insensitive) to plot errorbars without any data
 |          markers.
 |      
 |      ecolor : color, default: None
 |          The color of the errorbar lines.  If None, use the color of the
 |          line connecting the markers.
 |      
 |      elinewidth : float, default: None
 |          The linewidth of the errorbar lines. If None, the linewidth of
 |          the current style is used.
 |      
 |      capsize : float, default: :rc:`errorbar.capsize`
 |          The length of the error bar caps in points.
 |      
 |      capthick : float, default: None
 |          An alias to the keyword argument *markeredgewidth* (a.k.a. *mew*).
 |          This setting is a more sensible name for the property that
 |          controls the thickness of the error bar cap in points. For
 |          backwards compatibility, if *mew* or *markeredgewidth* are given,
 |          then they will over-ride *capthick*. This may change in future
 |          releases.
 |      
 |      barsabove : bool, default: False
 |          If True, will plot the errorbars above the plot
 |          symbols. Default is below.
 |      
 |      lolims, uplims, xlolims, xuplims : bool, default: False
 |          These arguments can be used to indicate that a value gives only
 |          upper/lower limits.  In that case a caret symbol is used to
 |          indicate this. *lims*-arguments may be scalars, or array-likes of
 |          the same length as *xerr* and *yerr*.  To use limits with inverted
 |          axes, `~.Axes.set_xlim` or `~.Axes.set_ylim` must be called before
 |          :meth:`errorbar`.  Note the tricky parameter names: setting e.g.
 |          *lolims* to True means that the y-value is a *lower* limit of the
 |          True value, so, only an *upward*-pointing arrow will be drawn!
 |      
 |      errorevery : int or (int, int), default: 1
 |          draws error bars on a subset of the data. *errorevery* =N draws
 |          error bars on the points (x[::N], y[::N]).
 |          *errorevery* =(start, N) draws error bars on the points
 |          (x[start::N], y[start::N]). e.g. errorevery=(6, 3)
 |          adds error bars to the data at (x[6], x[9], x[12], x[15], ...).
 |          Used to avoid overlapping error bars when two series share x-axis
 |          values.
 |      
 |      Returns
 |      -------
 |      `.ErrorbarContainer`
 |          The container contains:
 |      
 |          - plotline: `.Line2D` instance of x, y plot markers and/or line.
 |          - caplines: A tuple of `.Line2D` instances of the error bar caps.
 |          - barlinecols: A tuple of `.LineCollection` with the horizontal and
 |            vertical error ranges.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          All other keyword arguments are passed on to the `~.Axes.plot` call
 |          drawing the markers. For example, this code makes big red squares
 |          with thick green edges::
 |      
 |              x, y, yerr = rand(3, 10)
 |              errorbar(x, y, yerr, marker='s', mfc='red',
 |                       mec='green', ms=20, mew=4)
 |      
 |          where *mfc*, *mec*, *ms* and *mew* are aliases for the longer
 |          property names, *markerfacecolor*, *markeredgecolor*, *markersize*
 |          and *markeredgewidth*.
 |      
 |          Valid kwargs for the marker properties are `.Line2D` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y*, *xerr*, *yerr*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  eventplot(self, positions, orientation='horizontal', lineoffsets=1, linelengths=1, linewidths=None, colors=None, linestyles='solid', *, data=None, **kwargs)
 |      Plot identical parallel lines at the given positions.
 |      
 |      This type of plot is commonly used in neuroscience for representing
 |      neural events, where it is usually called a spike raster, dot raster,
 |      or raster plot.
 |      
 |      However, it is useful in any situation where you wish to show the
 |      timing or position of multiple sets of discrete events, such as the
 |      arrival times of people to a business on each day of the month or the
 |      date of hurricanes each year of the last century.
 |      
 |      Parameters
 |      ----------
 |      positions : array-like or list of array-like
 |          A 1D array-like defines the positions of one sequence of events.
 |      
 |          Multiple groups of events may be passed as a list of array-likes.
 |          Each group can be styled independently by passing lists of values
 |          to *lineoffsets*, *linelengths*, *linewidths*, *colors* and
 |          *linestyles*.
 |      
 |          Note that *positions* can be a 2D array, but in practice different
 |          event groups usually have different counts so that one will use a
 |          list of different-length arrays rather than a 2D array.
 |      
 |      orientation : {'horizontal', 'vertical'}, default: 'horizontal'
 |          The direction of the event sequence:
 |      
 |          - 'horizontal': the events are arranged horizontally.
 |            The indicator lines are vertical.
 |          - 'vertical': the events are arranged vertically.
 |            The indicator lines are horizontal.
 |      
 |      lineoffsets : float or array-like, default: 1
 |          The offset of the center of the lines from the origin, in the
 |          direction orthogonal to *orientation*.
 |      
 |          If *positions* is 2D, this can be a sequence with length matching
 |          the length of *positions*.
 |      
 |      linelengths : float or array-like, default: 1
 |          The total height of the lines (i.e. the lines stretches from
 |          ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).
 |      
 |          If *positions* is 2D, this can be a sequence with length matching
 |          the length of *positions*.
 |      
 |      linewidths : float or array-like, default: :rc:`lines.linewidth`
 |          The line width(s) of the event lines, in points.
 |      
 |          If *positions* is 2D, this can be a sequence with length matching
 |          the length of *positions*.
 |      
 |      colors : color or list of colors, default: :rc:`lines.color`
 |          The color(s) of the event lines.
 |      
 |          If *positions* is 2D, this can be a sequence with length matching
 |          the length of *positions*.
 |      
 |      linestyles : str or tuple or list of such values, default: 'solid'
 |          Default is 'solid'. Valid strings are ['solid', 'dashed',
 |          'dashdot', 'dotted', '-', '--', '-.', ':']. Dash tuples
 |          should be of the form::
 |      
 |              (offset, onoffseq),
 |      
 |          where *onoffseq* is an even length tuple of on and off ink
 |          in points.
 |      
 |          If *positions* is 2D, this can be a sequence with length matching
 |          the length of *positions*.
 |      
 |      **kwargs
 |          Other keyword arguments are line collection properties.  See
 |          `.LineCollection` for a list of the valid properties.
 |      
 |      Returns
 |      -------
 |      list of `.EventCollection`
 |          The `.EventCollection` that were added.
 |      
 |      Notes
 |      -----
 |      For *linelengths*, *linewidths*, *colors*, and *linestyles*, if only
 |      a single value is given, that value is applied to all lines.  If an
 |      array-like is given, it must have the same length as *positions*, and
 |      each value will be applied to the corresponding row of the array.
 |      
 |      Examples
 |      --------
 |      .. plot:: gallery/lines_bars_and_markers/eventplot_demo.py
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *positions*, *lineoffsets*, *linelengths*, *linewidths*, *colors*, *linestyles*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  fill(self, *args, data=None, **kwargs)
 |      Plot filled polygons.
 |      
 |      Parameters
 |      ----------
 |      *args : sequence of x, y, [color]
 |          Each polygon is defined by the lists of *x* and *y* positions of
 |          its nodes, optionally followed by a *color* specifier. See
 |          :mod:`matplotlib.colors` for supported color specifiers. The
 |          standard color cycle is used for polygons without a color
 |          specifier.
 |      
 |          You can plot multiple polygons by providing multiple *x*, *y*,
 |          *[color]* groups.
 |      
 |          For example, each of the following is legal::
 |      
 |              ax.fill(x, y)                    # a polygon with default color
 |              ax.fill(x, y, "b")               # a blue polygon
 |              ax.fill(x, y, x2, y2)            # two polygons
 |              ax.fill(x, y, "b", x2, y2, "r")  # a blue and a red polygon
 |      
 |      data : indexable object, optional
 |          An object with labelled data. If given, provide the label names to
 |          plot in *x* and *y*, e.g.::
 |      
 |              ax.fill("time", "signal",
 |                      data={"time": [0, 1, 2], "signal": [0, 1, 0]})
 |      
 |      Returns
 |      -------
 |      list of `~matplotlib.patches.Polygon`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.patches.Polygon` properties
 |      
 |      Notes
 |      -----
 |      Use :meth:`fill_between` if you would like to fill the region between
 |      two curves.
 |  
 |  fill_between(self, x, y1, y2=0, where=None, interpolate=False, step=None, *, data=None, **kwargs)
 |      Fill the area between two horizontal curves.
 |      
 |      The curves are defined by the points (*x*, *y1*) and (*x*,
 |      *y2*).  This creates one or multiple polygons describing the filled
 |      area.
 |      
 |      You may exclude some horizontal sections from filling using *where*.
 |      
 |      By default, the edges connect the given points directly.  Use *step*
 |      if the filling should be a step function, i.e. constant in between
 |      *x*.
 |      
 |      Parameters
 |      ----------
 |      x : array (length N)
 |          The x coordinates of the nodes defining the curves.
 |      
 |      y1 : array (length N) or scalar
 |          The y coordinates of the nodes defining the first curve.
 |      
 |      y2 : array (length N) or scalar, default: 0
 |          The y coordinates of the nodes defining the second curve.
 |      
 |      where : array of bool (length N), optional
 |          Define *where* to exclude some horizontal regions from being filled.
 |          The filled regions are defined by the coordinates ``x[where]``.
 |          More precisely, fill between ``x[i]`` and ``x[i+1]`` if
 |          ``where[i] and where[i+1]``.  Note that this definition implies
 |          that an isolated *True* value between two *False* values in *where*
 |          will not result in filling.  Both sides of the *True* position
 |          remain unfilled due to the adjacent *False* values.
 |      
 |      interpolate : bool, default: False
 |          This option is only relevant if *where* is used and the two curves
 |          are crossing each other.
 |      
 |          Semantically, *where* is often used for *y1* > *y2* or
 |          similar.  By default, the nodes of the polygon defining the filled
 |          region will only be placed at the positions in the *x* array.
 |          Such a polygon cannot describe the above semantics close to the
 |          intersection.  The x-sections containing the intersection are
 |          simply clipped.
 |      
 |          Setting *interpolate* to *True* will calculate the actual
 |          intersection point and extend the filled region up to this point.
 |      
 |      step : {'pre', 'post', 'mid'}, optional
 |          Define *step* if the filling should be a step function,
 |          i.e. constant in between *x*.  The value determines where the
 |          step will occur:
 |      
 |          - 'pre': The y value is continued constantly to the left from
 |            every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the
 |            value ``y[i]``.
 |          - 'post': The y value is continued constantly to the right from
 |            every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the
 |            value ``y[i]``.
 |          - 'mid': Steps occur half-way between the *x* positions.
 |      
 |      Returns
 |      -------
 |      `.PolyCollection`
 |          A `.PolyCollection` containing the plotted polygons.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          All other keyword arguments are passed on to `.PolyCollection`.
 |          They control the `.Polygon` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: array-like or scalar or None
 |          animated: bool
 |          antialiased or aa or antialiaseds: bool or list of bools
 |          array: ndarray or None
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clim: (vmin: float, vmax: float)
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          cmap: `.Colormap` or str or None
 |          color: color or list of rgba tuples
 |          contains: unknown
 |          edgecolor or ec or edgecolors: color or list of colors or 'face'
 |          facecolor or facecolors or fc: color or list of colors
 |          figure: `.Figure`
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or dashes or linestyles or ls: str or tuple or list thereof
 |          linewidth or linewidths or lw: float or list of floats
 |          norm: `.Normalize` or None
 |          offset_position: unknown
 |          offsets: (N, 2) or (2,) array-like
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          urls: list of str or None
 |          visible: bool
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      fill_between : Fill between two sets of y-values.
 |      fill_betweenx : Fill between two sets of x-values.
 |      
 |      Notes
 |      -----
 |      .. [notes section required to get data note injection right]
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y1*, *y2*, *where*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  fill_betweenx(self, y, x1, x2=0, where=None, step=None, interpolate=False, *, data=None, **kwargs)
 |      Fill the area between two vertical curves.
 |      
 |      The curves are defined by the points (*y*, *x1*) and (*y*,
 |      *x2*).  This creates one or multiple polygons describing the filled
 |      area.
 |      
 |      You may exclude some vertical sections from filling using *where*.
 |      
 |      By default, the edges connect the given points directly.  Use *step*
 |      if the filling should be a step function, i.e. constant in between
 |      *y*.
 |      
 |      Parameters
 |      ----------
 |      y : array (length N)
 |          The y coordinates of the nodes defining the curves.
 |      
 |      x1 : array (length N) or scalar
 |          The x coordinates of the nodes defining the first curve.
 |      
 |      x2 : array (length N) or scalar, default: 0
 |          The x coordinates of the nodes defining the second curve.
 |      
 |      where : array of bool (length N), optional
 |          Define *where* to exclude some vertical regions from being filled.
 |          The filled regions are defined by the coordinates ``y[where]``.
 |          More precisely, fill between ``y[i]`` and ``y[i+1]`` if
 |          ``where[i] and where[i+1]``.  Note that this definition implies
 |          that an isolated *True* value between two *False* values in *where*
 |          will not result in filling.  Both sides of the *True* position
 |          remain unfilled due to the adjacent *False* values.
 |      
 |      interpolate : bool, default: False
 |          This option is only relevant if *where* is used and the two curves
 |          are crossing each other.
 |      
 |          Semantically, *where* is often used for *x1* > *x2* or
 |          similar.  By default, the nodes of the polygon defining the filled
 |          region will only be placed at the positions in the *y* array.
 |          Such a polygon cannot describe the above semantics close to the
 |          intersection.  The y-sections containing the intersection are
 |          simply clipped.
 |      
 |          Setting *interpolate* to *True* will calculate the actual
 |          intersection point and extend the filled region up to this point.
 |      
 |      step : {'pre', 'post', 'mid'}, optional
 |          Define *step* if the filling should be a step function,
 |          i.e. constant in between *y*.  The value determines where the
 |          step will occur:
 |      
 |          - 'pre': The y value is continued constantly to the left from
 |            every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the
 |            value ``y[i]``.
 |          - 'post': The y value is continued constantly to the right from
 |            every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the
 |            value ``y[i]``.
 |          - 'mid': Steps occur half-way between the *x* positions.
 |      
 |      Returns
 |      -------
 |      `.PolyCollection`
 |          A `.PolyCollection` containing the plotted polygons.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          All other keyword arguments are passed on to `.PolyCollection`.
 |          They control the `.Polygon` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: array-like or scalar or None
 |          animated: bool
 |          antialiased or aa or antialiaseds: bool or list of bools
 |          array: ndarray or None
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clim: (vmin: float, vmax: float)
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          cmap: `.Colormap` or str or None
 |          color: color or list of rgba tuples
 |          contains: unknown
 |          edgecolor or ec or edgecolors: color or list of colors or 'face'
 |          facecolor or facecolors or fc: color or list of colors
 |          figure: `.Figure`
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or dashes or linestyles or ls: str or tuple or list thereof
 |          linewidth or linewidths or lw: float or list of floats
 |          norm: `.Normalize` or None
 |          offset_position: unknown
 |          offsets: (N, 2) or (2,) array-like
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          urls: list of str or None
 |          visible: bool
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      fill_between : Fill between two sets of y-values.
 |      fill_betweenx : Fill between two sets of x-values.
 |      
 |      Notes
 |      -----
 |      .. [notes section required to get data note injection right]
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *y*, *x1*, *x2*, *where*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  get_legend_handles_labels(self, legend_handler_map=None)
 |      Return handles and labels for legend
 |      
 |      ``ax.legend()`` is equivalent to ::
 |      
 |        h, l = ax.get_legend_handles_labels()
 |        ax.legend(h, l)
 |  
 |  get_title(self, loc='center')
 |      Get an Axes title.
 |      
 |      Get one of the three available Axes titles. The available titles
 |      are positioned above the Axes in the center, flush with the left
 |      edge, and flush with the right edge.
 |      
 |      Parameters
 |      ----------
 |      loc : {'center', 'left', 'right'}, str, default: 'center'
 |          Which title to return.
 |      
 |      Returns
 |      -------
 |      str
 |          The title text string.
 |  
 |  hexbin(self, x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='face', reduce_C_function=<function mean at 0x7ff1d407b3a0>, mincnt=None, marginals=False, *, data=None, **kwargs)
 |      Make a 2D hexagonal binning plot of points *x*, *y*.
 |      
 |      If *C* is *None*, the value of the hexagon is determined by the number
 |      of points in the hexagon. Otherwise, *C* specifies values at the
 |      coordinate (x[i], y[i]). For each hexagon, these values are reduced
 |      using *reduce_C_function*.
 |      
 |      Parameters
 |      ----------
 |      x, y : array-like
 |          The data positions. *x* and *y* must be of the same length.
 |      
 |      C : array-like, optional
 |          If given, these values are accumulated in the bins. Otherwise,
 |          every point has a value of 1. Must be of the same length as *x*
 |          and *y*.
 |      
 |      gridsize : int or (int, int), default: 100
 |          If a single int, the number of hexagons in the *x*-direction.
 |          The number of hexagons in the *y*-direction is chosen such that
 |          the hexagons are approximately regular.
 |      
 |          Alternatively, if a tuple (*nx*, *ny*), the number of hexagons
 |          in the *x*-direction and the *y*-direction.
 |      
 |      bins : 'log' or int or sequence, default: None
 |          Discretization of the hexagon values.
 |      
 |          - If *None*, no binning is applied; the color of each hexagon
 |            directly corresponds to its count value.
 |          - If 'log', use a logarithmic scale for the colormap.
 |            Internally, :math:`log_{10}(i+1)` is used to determine the
 |            hexagon color. This is equivalent to ``norm=LogNorm()``.
 |          - If an integer, divide the counts in the specified number
 |            of bins, and color the hexagons accordingly.
 |          - If a sequence of values, the values of the lower bound of
 |            the bins to be used.
 |      
 |      xscale : {'linear', 'log'}, default: 'linear'
 |          Use a linear or log10 scale on the horizontal axis.
 |      
 |      yscale : {'linear', 'log'}, default: 'linear'
 |          Use a linear or log10 scale on the vertical axis.
 |      
 |      mincnt : int > 0, default: *None*
 |          If not *None*, only display cells with more than *mincnt*
 |          number of points in the cell.
 |      
 |      marginals : bool, default: *False*
 |          If marginals is *True*, plot the marginal density as
 |          colormapped rectangles along the bottom of the x-axis and
 |          left of the y-axis.
 |      
 |      extent : float, default: *None*
 |          The limits of the bins. The default assigns the limits
 |          based on *gridsize*, *x*, *y*, *xscale* and *yscale*.
 |      
 |          If *xscale* or *yscale* is set to 'log', the limits are
 |          expected to be the exponent for a power of 10. E.g. for
 |          x-limits of 1 and 50 in 'linear' scale and y-limits
 |          of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).
 |      
 |          Order of scalars is (left, right, bottom, top).
 |      
 |      Returns
 |      -------
 |      `~matplotlib.collections.PolyCollection`
 |          A `.PolyCollection` defining the hexagonal bins.
 |      
 |          - `.PolyCollection.get_offsets` contains a Mx2 array containing
 |            the x, y positions of the M hexagon centers.
 |          - `.PolyCollection.get_array` contains the values of the M
 |            hexagons.
 |      
 |          If *marginals* is *True*, horizontal
 |          bar and vertical bar (both PolyCollections) will be attached
 |          to the return collection as attributes *hbar* and *vbar*.
 |      
 |      Other Parameters
 |      ----------------
 |      cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
 |          The Colormap instance or registered colormap name used to map
 |          the bin values to colors.
 |      
 |      norm : `~matplotlib.colors.Normalize`, optional
 |          The Normalize instance scales the bin values to the canonical
 |          colormap range [0, 1] for mapping to colors. By default, the data
 |          range is mapped to the colorbar range using linear scaling.
 |      
 |      vmin, vmax : float, default: None
 |          The colorbar range. If *None*, suitable min/max values are
 |          automatically chosen by the `~.Normalize` instance (defaults to
 |          the respective min/max values of the bins in case of the default
 |          linear scaling).
 |          It is deprecated to use *vmin*/*vmax* when *norm* is given.
 |      
 |      alpha : float between 0 and 1, optional
 |          The alpha blending value, between 0 (transparent) and 1 (opaque).
 |      
 |      linewidths : float, default: *None*
 |          If *None*, defaults to 1.0.
 |      
 |      edgecolors : {'face', 'none', *None*} or color, default: 'face'
 |          The color of the hexagon edges. Possible values are:
 |      
 |          - 'face': Draw the edges in the same color as the fill color.
 |          - 'none': No edges are drawn. This can sometimes lead to unsightly
 |            unpainted pixels between the hexagons.
 |          - *None*: Draw outlines in the default color.
 |          - An explicit color.
 |      
 |      reduce_C_function : callable, default: `numpy.mean`
 |          The function to aggregate *C* within the bins. It is ignored if
 |          *C* is not given. This must have the signature::
 |      
 |              def reduce_C_function(C: array) -> float
 |      
 |          Commonly used functions are:
 |      
 |          - `numpy.mean`: average of the points
 |          - `numpy.sum`: integral of the point values
 |          - `numpy.amax`: value taken from the largest point
 |      
 |      **kwargs : `~matplotlib.collections.PolyCollection` properties
 |          All other keyword arguments are passed on to `.PolyCollection`:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: array-like or scalar or None
 |          animated: bool
 |          antialiased or aa or antialiaseds: bool or list of bools
 |          array: ndarray or None
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clim: (vmin: float, vmax: float)
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          cmap: `.Colormap` or str or None
 |          color: color or list of rgba tuples
 |          contains: unknown
 |          edgecolor or ec or edgecolors: color or list of colors or 'face'
 |          facecolor or facecolors or fc: color or list of colors
 |          figure: `.Figure`
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or dashes or linestyles or ls: str or tuple or list thereof
 |          linewidth or linewidths or lw: float or list of floats
 |          norm: `.Normalize` or None
 |          offset_position: unknown
 |          offsets: (N, 2) or (2,) array-like
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          urls: list of str or None
 |          visible: bool
 |          zorder: float
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y*, *C*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  hist(self, x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)
 |      Plot a histogram.
 |      
 |      Compute and draw the histogram of *x*.  The return value is a tuple
 |      (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*,
 |      *patches1*, ...]) if the input contains multiple data.  See the
 |      documentation of the *weights* parameter to draw a histogram of
 |      already-binned data.
 |      
 |      Multiple data can be provided via *x* as a list of datasets
 |      of potentially different length ([*x0*, *x1*, ...]), or as
 |      a 2D ndarray in which each column is a dataset.  Note that
 |      the ndarray form is transposed relative to the list form.
 |      
 |      Masked arrays are not supported.
 |      
 |      The *bins*, *range*, *weights*, and *density* parameters behave as in
 |      `numpy.histogram`.
 |      
 |      Parameters
 |      ----------
 |      x : (n,) array or sequence of (n,) arrays
 |          Input values, this takes either a single array or a sequence of
 |          arrays which are not required to be of the same length.
 |      
 |      bins : int or sequence or str, default: :rc:`hist.bins`
 |          If *bins* is an integer, it defines the number of equal-width bins
 |          in the range.
 |      
 |          If *bins* is a sequence, it defines the bin edges, including the
 |          left edge of the first bin and the right edge of the last bin;
 |          in this case, bins may be unequally spaced.  All but the last
 |          (righthand-most) bin is half-open.  In other words, if *bins* is::
 |      
 |              [1, 2, 3, 4]
 |      
 |          then the first bin is ``[1, 2)`` (including 1, but excluding 2) and
 |          the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which
 |          *includes* 4.
 |      
 |          If *bins* is a string, it is one of the binning strategies
 |          supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane',
 |          'scott', 'stone', 'rice', 'sturges', or 'sqrt'.
 |      
 |      range : tuple or None, default: None
 |          The lower and upper range of the bins. Lower and upper outliers
 |          are ignored. If not provided, *range* is ``(x.min(), x.max())``.
 |          Range has no effect if *bins* is a sequence.
 |      
 |          If *bins* is a sequence or *range* is specified, autoscaling
 |          is based on the specified bin range instead of the
 |          range of x.
 |      
 |      density : bool, default: False
 |          If ``True``, draw and return a probability density: each bin
 |          will display the bin's raw count divided by the total number of
 |          counts *and the bin width*
 |          (``density = counts / (sum(counts) * np.diff(bins))``),
 |          so that the area under the histogram integrates to 1
 |          (``np.sum(density * np.diff(bins)) == 1``).
 |      
 |          If *stacked* is also ``True``, the sum of the histograms is
 |          normalized to 1.
 |      
 |      weights : (n,) array-like or None, default: None
 |          An array of weights, of the same shape as *x*.  Each value in
 |          *x* only contributes its associated weight towards the bin count
 |          (instead of 1).  If *density* is ``True``, the weights are
 |          normalized, so that the integral of the density over the range
 |          remains 1.
 |      
 |          This parameter can be used to draw a histogram of data that has
 |          already been binned, e.g. using `numpy.histogram` (by treating each
 |          bin as a single point with a weight equal to its count) ::
 |      
 |              counts, bins = np.histogram(data)
 |              plt.hist(bins[:-1], bins, weights=counts)
 |      
 |          (or you may alternatively use `~.bar()`).
 |      
 |      cumulative : bool or -1, default: False
 |          If ``True``, then a histogram is computed where each bin gives the
 |          counts in that bin plus all bins for smaller values. The last bin
 |          gives the total number of datapoints.
 |      
 |          If *density* is also ``True`` then the histogram is normalized such
 |          that the last bin equals 1.
 |      
 |          If *cumulative* is a number less than 0 (e.g., -1), the direction
 |          of accumulation is reversed.  In this case, if *density* is also
 |          ``True``, then the histogram is normalized such that the first bin
 |          equals 1.
 |      
 |      bottom : array-like, scalar, or None, default: None
 |          Location of the bottom of each bin, ie. bins are drawn from
 |          ``bottom`` to ``bottom + hist(x, bins)`` If a scalar, the bottom
 |          of each bin is shifted by the same amount. If an array, each bin
 |          is shifted independently and the length of bottom must match the
 |          number of bins. If None, defaults to 0.
 |      
 |      histtype : {'bar', 'barstacked', 'step', 'stepfilled'}, default: 'bar'
 |          The type of histogram to draw.
 |      
 |          - 'bar' is a traditional bar-type histogram.  If multiple data
 |            are given the bars are arranged side by side.
 |          - 'barstacked' is a bar-type histogram where multiple
 |            data are stacked on top of each other.
 |          - 'step' generates a lineplot that is by default unfilled.
 |          - 'stepfilled' generates a lineplot that is by default filled.
 |      
 |      align : {'left', 'mid', 'right'}, default: 'mid'
 |          The horizontal alignment of the histogram bars.
 |      
 |          - 'left': bars are centered on the left bin edges.
 |          - 'mid': bars are centered between the bin edges.
 |          - 'right': bars are centered on the right bin edges.
 |      
 |      orientation : {'vertical', 'horizontal'}, default: 'vertical'
 |          If 'horizontal', `~.Axes.barh` will be used for bar-type histograms
 |          and the *bottom* kwarg will be the left edges.
 |      
 |      rwidth : float or None, default: None
 |          The relative width of the bars as a fraction of the bin width.  If
 |          ``None``, automatically compute the width.
 |      
 |          Ignored if *histtype* is 'step' or 'stepfilled'.
 |      
 |      log : bool, default: False
 |          If ``True``, the histogram axis will be set to a log scale.
 |      
 |      color : color or array-like of colors or None, default: None
 |          Color or sequence of colors, one per dataset.  Default (``None``)
 |          uses the standard line color sequence.
 |      
 |      label : str or None, default: None
 |          String, or sequence of strings to match multiple datasets.  Bar
 |          charts yield multiple patches per dataset, but only the first gets
 |          the label, so that `~.Axes.legend` will work as expected.
 |      
 |      stacked : bool, default: False
 |          If ``True``, multiple data are stacked on top of each other If
 |          ``False`` multiple data are arranged side by side if histtype is
 |          'bar' or on top of each other if histtype is 'step'
 |      
 |      Returns
 |      -------
 |      n : array or list of arrays
 |          The values of the histogram bins. See *density* and *weights* for a
 |          description of the possible semantics.  If input *x* is an array,
 |          then this is an array of length *nbins*. If input is a sequence of
 |          arrays ``[data1, data2, ...]``, then this is a list of arrays with
 |          the values of the histograms for each of the arrays in the same
 |          order.  The dtype of the array *n* (or of its element arrays) will
 |          always be float even if no weighting or normalization is used.
 |      
 |      bins : array
 |          The edges of the bins. Length nbins + 1 (nbins left edges and right
 |          edge of last bin).  Always a single array even when multiple data
 |          sets are passed in.
 |      
 |      patches : `.BarContainer` or list of a single `.Polygon` or list of such objects
 |          Container of individual artists used to create the histogram
 |          or list of such containers if there are multiple input datasets.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          `~matplotlib.patches.Patch` properties
 |      
 |      See Also
 |      --------
 |      hist2d : 2D histograms
 |      
 |      Notes
 |      -----
 |      For large numbers of bins (>1000), 'step' and 'stepfilled' can be
 |      significantly faster than 'bar' and 'barstacked'.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *weights*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  hist2d(self, x, y, bins=10, range=None, density=False, weights=None, cmin=None, cmax=None, *, data=None, **kwargs)
 |      Make a 2D histogram plot.
 |      
 |      Parameters
 |      ----------
 |      x, y : array-like, shape (n, )
 |          Input values
 |      
 |      bins : None or int or [int, int] or array-like or [array, array]
 |      
 |          The bin specification:
 |      
 |          - If int, the number of bins for the two dimensions
 |            (nx=ny=bins).
 |          - If ``[int, int]``, the number of bins in each dimension
 |            (nx, ny = bins).
 |          - If array-like, the bin edges for the two dimensions
 |            (x_edges=y_edges=bins).
 |          - If ``[array, array]``, the bin edges in each dimension
 |            (x_edges, y_edges = bins).
 |      
 |          The default value is 10.
 |      
 |      range : array-like shape(2, 2), optional
 |          The leftmost and rightmost edges of the bins along each dimension
 |          (if not specified explicitly in the bins parameters): ``[[xmin,
 |          xmax], [ymin, ymax]]``. All values outside of this range will be
 |          considered outliers and not tallied in the histogram.
 |      
 |      density : bool, default: False
 |          Normalize histogram.  See the documentation for the *density*
 |          parameter of `~.Axes.hist` for more details.
 |      
 |      weights : array-like, shape (n, ), optional
 |          An array of values w_i weighing each sample (x_i, y_i).
 |      
 |      cmin, cmax : float, default: None
 |          All bins that has count less than *cmin* or more than *cmax* will
 |          not be displayed (set to NaN before passing to imshow) and these
 |          count values in the return value count histogram will also be set
 |          to nan upon return.
 |      
 |      Returns
 |      -------
 |      h : 2D array
 |          The bi-dimensional histogram of samples x and y. Values in x are
 |          histogrammed along the first dimension and values in y are
 |          histogrammed along the second dimension.
 |      xedges : 1D array
 |          The bin edges along the x axis.
 |      yedges : 1D array
 |          The bin edges along the y axis.
 |      image : `~.matplotlib.collections.QuadMesh`
 |      
 |      Other Parameters
 |      ----------------
 |      cmap : Colormap or str, optional
 |          A `.colors.Colormap` instance.  If not set, use rc settings.
 |      
 |      norm : Normalize, optional
 |          A `.colors.Normalize` instance is used to
 |          scale luminance data to ``[0, 1]``. If not set, defaults to
 |          `.colors.Normalize()`.
 |      
 |      vmin/vmax : None or scalar, optional
 |          Arguments passed to the `~.colors.Normalize` instance.
 |      
 |      alpha : ``0 <= scalar <= 1`` or ``None``, optional
 |          The alpha blending value.
 |      
 |      **kwargs
 |          Additional parameters are passed along to the
 |          `~.Axes.pcolormesh` method and `~matplotlib.collections.QuadMesh`
 |          constructor.
 |      
 |      See Also
 |      --------
 |      hist : 1D histogram plotting
 |      
 |      Notes
 |      -----
 |      - Currently ``hist2d`` calculates its own axis limits, and any limits
 |        previously set are ignored.
 |      - Rendering the histogram with a logarithmic color scale is
 |        accomplished by passing a `.colors.LogNorm` instance to the *norm*
 |        keyword argument. Likewise, power-law normalization (similar
 |        in effect to gamma correction) can be accomplished with
 |        `.colors.PowerNorm`.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y*, *weights*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  hlines(self, y, xmin, xmax, colors=None, linestyles='solid', label='', *, data=None, **kwargs)
 |      Plot horizontal lines at each *y* from *xmin* to *xmax*.
 |      
 |      Parameters
 |      ----------
 |      y : float or array-like
 |          y-indexes where to plot the lines.
 |      
 |      xmin, xmax : float or array-like
 |          Respective beginning and end of each line. If scalars are
 |          provided, all lines will have same length.
 |      
 |      colors : list of colors, default: :rc:`lines.color`
 |      
 |      linestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional
 |      
 |      label : str, default: ''
 |      
 |      Returns
 |      -------
 |      `~matplotlib.collections.LineCollection`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs :  `~matplotlib.collections.LineCollection` properties.
 |      
 |      See Also
 |      --------
 |      vlines : vertical lines
 |      axhline : horizontal line across the Axes
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *y*, *xmin*, *xmax*, *colors*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  imshow(self, X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, *, filternorm=True, filterrad=4.0, resample=None, url=None, data=None, **kwargs)
 |      Display data as an image, i.e., on a 2D regular raster.
 |      
 |      The input may either be actual RGB(A) data, or 2D scalar data, which
 |      will be rendered as a pseudocolor image. For displaying a grayscale
 |      image set up the colormapping using the parameters
 |      ``cmap='gray', vmin=0, vmax=255``.
 |      
 |      The number of pixels used to render an image is set by the Axes size
 |      and the *dpi* of the figure. This can lead to aliasing artifacts when
 |      the image is resampled because the displayed image size will usually
 |      not match the size of *X* (see
 |      :doc:`/gallery/images_contours_and_fields/image_antialiasing`).
 |      The resampling can be controlled via the *interpolation* parameter
 |      and/or :rc:`image.interpolation`.
 |      
 |      Parameters
 |      ----------
 |      X : array-like or PIL image
 |          The image data. Supported array shapes are:
 |      
 |          - (M, N): an image with scalar data. The values are mapped to
 |            colors using normalization and a colormap. See parameters *norm*,
 |            *cmap*, *vmin*, *vmax*.
 |          - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).
 |          - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),
 |            i.e. including transparency.
 |      
 |          The first two dimensions (M, N) define the rows and columns of
 |          the image.
 |      
 |          Out-of-range RGB(A) values are clipped.
 |      
 |      cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
 |          The Colormap instance or registered colormap name used to map
 |          scalar data to colors. This parameter is ignored for RGB(A) data.
 |      
 |      norm : `~matplotlib.colors.Normalize`, optional
 |          The `.Normalize` instance used to scale scalar data to the [0, 1]
 |          range before mapping to colors using *cmap*. By default, a linear
 |          scaling mapping the lowest value to 0 and the highest to 1 is used.
 |          This parameter is ignored for RGB(A) data.
 |      
 |      aspect : {'equal', 'auto'} or float, default: :rc:`image.aspect`
 |          The aspect ratio of the Axes.  This parameter is particularly
 |          relevant for images since it determines whether data pixels are
 |          square.
 |      
 |          This parameter is a shortcut for explicitly calling
 |          `.Axes.set_aspect`. See there for further details.
 |      
 |          - 'equal': Ensures an aspect ratio of 1. Pixels will be square
 |            (unless pixel sizes are explicitly made non-square in data
 |            coordinates using *extent*).
 |          - 'auto': The Axes is kept fixed and the aspect is adjusted so
 |            that the data fit in the Axes. In general, this will result in
 |            non-square pixels.
 |      
 |      interpolation : str, default: :rc:`image.interpolation`
 |          The interpolation method used.
 |      
 |          Supported values are 'none', 'antialiased', 'nearest', 'bilinear',
 |          'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite',
 |          'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell',
 |          'sinc', 'lanczos', 'blackman'.
 |      
 |          If *interpolation* is 'none', then no interpolation is performed
 |          on the Agg, ps, pdf and svg backends. Other backends will fall back
 |          to 'nearest'. Note that most SVG renderers perform interpolation at
 |          rendering and that the default interpolation method they implement
 |          may differ.
 |      
 |          If *interpolation* is the default 'antialiased', then 'nearest'
 |          interpolation is used if the image is upsampled by more than a
 |          factor of three (i.e. the number of display pixels is at least
 |          three times the size of the data array).  If the upsampling rate is
 |          smaller than 3, or the image is downsampled, then 'hanning'
 |          interpolation is used to act as an anti-aliasing filter, unless the
 |          image happens to be upsampled by exactly a factor of two or one.
 |      
 |          See
 |          :doc:`/gallery/images_contours_and_fields/interpolation_methods`
 |          for an overview of the supported interpolation methods, and
 |          :doc:`/gallery/images_contours_and_fields/image_antialiasing` for
 |          a discussion of image antialiasing.
 |      
 |          Some interpolation methods require an additional radius parameter,
 |          which can be set by *filterrad*. Additionally, the antigrain image
 |          resize filter is controlled by the parameter *filternorm*.
 |      
 |      alpha : float or array-like, optional
 |          The alpha blending value, between 0 (transparent) and 1 (opaque).
 |          If *alpha* is an array, the alpha blending values are applied pixel
 |          by pixel, and *alpha* must have the same shape as *X*.
 |      
 |      vmin, vmax : float, optional
 |          When using scalar data and no explicit *norm*, *vmin* and *vmax*
 |          define the data range that the colormap covers. By default,
 |          the colormap covers the complete value range of the supplied
 |          data. It is deprecated to use *vmin*/*vmax* when *norm* is given.
 |          When using RGB(A) data, parameters *vmin*/*vmax* are ignored.
 |      
 |      origin : {'upper', 'lower'}, default: :rc:`image.origin`
 |          Place the [0, 0] index of the array in the upper left or lower
 |          left corner of the Axes. The convention (the default) 'upper' is
 |          typically used for matrices and images.
 |      
 |          Note that the vertical axis points upward for 'lower'
 |          but downward for 'upper'.
 |      
 |          See the :doc:`/tutorials/intermediate/imshow_extent` tutorial for
 |          examples and a more detailed description.
 |      
 |      extent : floats (left, right, bottom, top), optional
 |          The bounding box in data coordinates that the image will fill.
 |          The image is stretched individually along x and y to fill the box.
 |      
 |          The default extent is determined by the following conditions.
 |          Pixels have unit size in data coordinates. Their centers are on
 |          integer coordinates, and their center coordinates range from 0 to
 |          columns-1 horizontally and from 0 to rows-1 vertically.
 |      
 |          Note that the direction of the vertical axis and thus the default
 |          values for top and bottom depend on *origin*:
 |      
 |          - For ``origin == 'upper'`` the default is
 |            ``(-0.5, numcols-0.5, numrows-0.5, -0.5)``.
 |          - For ``origin == 'lower'`` the default is
 |            ``(-0.5, numcols-0.5, -0.5, numrows-0.5)``.
 |      
 |          See the :doc:`/tutorials/intermediate/imshow_extent` tutorial for
 |          examples and a more detailed description.
 |      
 |      filternorm : bool, default: True
 |          A parameter for the antigrain image resize filter (see the
 |          antigrain documentation).  If *filternorm* is set, the filter
 |          normalizes integer values and corrects the rounding errors. It
 |          doesn't do anything with the source floating point values, it
 |          corrects only integers according to the rule of 1.0 which means
 |          that any sum of pixel weights must be equal to 1.0.  So, the
 |          filter function must produce a graph of the proper shape.
 |      
 |      filterrad : float > 0, default: 4.0
 |          The filter radius for filters that have a radius parameter, i.e.
 |          when interpolation is one of: 'sinc', 'lanczos' or 'blackman'.
 |      
 |      resample : bool, default: :rc:`image.resample`
 |          When *True*, use a full resampling method.  When *False*, only
 |          resample when the output image is larger than the input image.
 |      
 |      url : str, optional
 |          Set the url of the created `.AxesImage`. See `.Artist.set_url`.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.image.AxesImage`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.artist.Artist` properties
 |          These parameters are passed on to the constructor of the
 |          `.AxesImage` artist.
 |      
 |      See Also
 |      --------
 |      matshow : Plot a matrix or an array as an image.
 |      
 |      Notes
 |      -----
 |      Unless *extent* is used, pixel centers will be located at integer
 |      coordinates. In other words: the origin will coincide with the center
 |      of pixel (0, 0).
 |      
 |      There are two common representations for RGB images with an alpha
 |      channel:
 |      
 |      -   Straight (unassociated) alpha: R, G, and B channels represent the
 |          color of the pixel, disregarding its opacity.
 |      -   Premultiplied (associated) alpha: R, G, and B channels represent
 |          the color of the pixel, adjusted for its opacity by multiplication.
 |      
 |      `~matplotlib.pyplot.imshow` expects RGB images adopting the straight
 |      (unassociated) alpha representation.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  indicate_inset(self, bounds, inset_ax=None, *, transform=None, facecolor='none', edgecolor='0.5', alpha=0.5, zorder=4.99, **kwargs)
 |      Add an inset indicator to the Axes.  This is a rectangle on the plot
 |      at the position indicated by *bounds* that optionally has lines that
 |      connect the rectangle to an inset Axes (`.Axes.inset_axes`).
 |      
 |      Warnings
 |      --------
 |      This method is experimental as of 3.0, and the API may change.
 |      
 |      Parameters
 |      ----------
 |      bounds : [x0, y0, width, height]
 |          Lower-left corner of rectangle to be marked, and its width
 |          and height.
 |      
 |      inset_ax : `.Axes`
 |          An optional inset Axes to draw connecting lines to.  Two lines are
 |          drawn connecting the indicator box to the inset Axes on corners
 |          chosen so as to not overlap with the indicator box.
 |      
 |      transform : `.Transform`
 |          Transform for the rectangle coordinates. Defaults to
 |          `ax.transAxes`, i.e. the units of *rect* are in Axes-relative
 |          coordinates.
 |      
 |      facecolor : color, default: 'none'
 |          Facecolor of the rectangle.
 |      
 |      edgecolor : color, default: '0.5'
 |          Color of the rectangle and color of the connecting lines.
 |      
 |      alpha : float, default: 0.5
 |          Transparency of the rectangle and connector lines.
 |      
 |      zorder : float, default: 4.99
 |          Drawing order of the rectangle and connector lines.  The default,
 |          4.99, is just below the default level of inset Axes.
 |      
 |      **kwargs
 |          Other keyword arguments are passed on to the `.Rectangle` patch:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: unknown
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color: color
 |          contains: unknown
 |          edgecolor or ec: color or None or 'auto'
 |          facecolor or fc: color or None
 |          figure: `.Figure`
 |          fill: bool
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float or None
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          visible: bool
 |          zorder: float
 |      
 |      Returns
 |      -------
 |      rectangle_patch : `.patches.Rectangle`
 |           The indicator frame.
 |      
 |      connector_lines : 4-tuple of `.patches.ConnectionPatch`
 |          The four connector lines connecting to (lower_left, upper_left,
 |          lower_right upper_right) corners of *inset_ax*. Two lines are
 |          set with visibility to *False*,  but the user can set the
 |          visibility to True if the automatic choice is not deemed correct.
 |  
 |  indicate_inset_zoom(self, inset_ax, **kwargs)
 |      Add an inset indicator rectangle to the Axes based on the axis
 |      limits for an *inset_ax* and draw connectors between *inset_ax*
 |      and the rectangle.
 |      
 |      Warnings
 |      --------
 |      This method is experimental as of 3.0, and the API may change.
 |      
 |      Parameters
 |      ----------
 |      inset_ax : `.Axes`
 |          Inset Axes to draw connecting lines to.  Two lines are
 |          drawn connecting the indicator box to the inset Axes on corners
 |          chosen so as to not overlap with the indicator box.
 |      
 |      **kwargs
 |          Other keyword arguments are passed on to `.Axes.indicate_inset`
 |      
 |      Returns
 |      -------
 |      rectangle_patch : `.patches.Rectangle`
 |           Rectangle artist.
 |      
 |      connector_lines : 4-tuple of `.patches.ConnectionPatch`
 |          Each of four connector lines coming from the rectangle drawn on
 |          this axis, in the order lower left, upper left, lower right,
 |          upper right.
 |          Two are set with visibility to *False*,  but the user can
 |          set the visibility to *True* if the automatic choice is not deemed
 |          correct.
 |  
 |  inset_axes(self, bounds, *, transform=None, zorder=5, **kwargs)
 |      Add a child inset Axes to this existing Axes.
 |      
 |      Warnings
 |      --------
 |      This method is experimental as of 3.0, and the API may change.
 |      
 |      Parameters
 |      ----------
 |      bounds : [x0, y0, width, height]
 |          Lower-left corner of inset Axes, and its width and height.
 |      
 |      transform : `.Transform`
 |          Defaults to `ax.transAxes`, i.e. the units of *rect* are in
 |          Axes-relative coordinates.
 |      
 |      zorder : number
 |          Defaults to 5 (same as `.Axes.legend`).  Adjust higher or lower
 |          to change whether it is above or below data plotted on the
 |          parent Axes.
 |      
 |      **kwargs
 |          Other keyword arguments are passed on to the child `.Axes`.
 |      
 |      Returns
 |      -------
 |      ax
 |          The created `~.axes.Axes` instance.
 |      
 |      Examples
 |      --------
 |      This example makes two inset Axes, the first is in Axes-relative
 |      coordinates, and the second in data-coordinates::
 |      
 |          fig, ax = plt.subplots()
 |          ax.plot(range(10))
 |          axin1 = ax.inset_axes([0.8, 0.1, 0.15, 0.15])
 |          axin2 = ax.inset_axes(
 |                  [5, 7, 2.3, 2.3], transform=ax.transData)
 |  
 |  legend(self, *args, **kwargs)
 |      Place a legend on the Axes.
 |      
 |      Call signatures::
 |      
 |          legend()
 |          legend(labels)
 |          legend(handles, labels)
 |      
 |      The call signatures correspond to these three different ways to use
 |      this method:
 |      
 |      **1. Automatic detection of elements to be shown in the legend**
 |      
 |      The elements to be added to the legend are automatically determined,
 |      when you do not pass in any extra arguments.
 |      
 |      In this case, the labels are taken from the artist. You can specify
 |      them either at artist creation or by calling the
 |      :meth:`~.Artist.set_label` method on the artist::
 |      
 |          ax.plot([1, 2, 3], label='Inline label')
 |          ax.legend()
 |      
 |      or::
 |      
 |          line, = ax.plot([1, 2, 3])
 |          line.set_label('Label via method')
 |          ax.legend()
 |      
 |      Specific lines can be excluded from the automatic legend element
 |      selection by defining a label starting with an underscore.
 |      This is default for all artists, so calling `.Axes.legend` without
 |      any arguments and without setting the labels manually will result in
 |      no legend being drawn.
 |      
 |      
 |      **2. Labeling existing plot elements**
 |      
 |      To make a legend for lines which already exist on the Axes
 |      (via plot for instance), simply call this function with an iterable
 |      of strings, one for each legend item. For example::
 |      
 |          ax.plot([1, 2, 3])
 |          ax.legend(['A simple line'])
 |      
 |      Note: This call signature is discouraged, because the relation between
 |      plot elements and labels is only implicit by their order and can
 |      easily be mixed up.
 |      
 |      
 |      **3. Explicitly defining the elements in the legend**
 |      
 |      For full control of which artists have a legend entry, it is possible
 |      to pass an iterable of legend artists followed by an iterable of
 |      legend labels respectively::
 |      
 |          ax.legend([line1, line2, line3], ['label1', 'label2', 'label3'])
 |      
 |      Parameters
 |      ----------
 |      handles : sequence of `.Artist`, optional
 |          A list of Artists (lines, patches) to be added to the legend.
 |          Use this together with *labels*, if you need full control on what
 |          is shown in the legend and the automatic mechanism described above
 |          is not sufficient.
 |      
 |          The length of handles and labels should be the same in this
 |          case. If they are not, they are truncated to the smaller length.
 |      
 |      labels : list of str, optional
 |          A list of labels to show next to the artists.
 |          Use this together with *handles*, if you need full control on what
 |          is shown in the legend and the automatic mechanism described above
 |          is not sufficient.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.legend.Legend`
 |      
 |      Other Parameters
 |      ----------------
 |      
 |      loc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, 'upper right' for figures)
 |          The location of the legend.
 |      
 |          The strings
 |          ``'upper left', 'upper right', 'lower left', 'lower right'``
 |          place the legend at the corresponding corner of the axes/figure.
 |      
 |          The strings
 |          ``'upper center', 'lower center', 'center left', 'center right'``
 |          place the legend at the center of the corresponding edge of the
 |          axes/figure.
 |      
 |          The string ``'center'`` places the legend at the center of the axes/figure.
 |      
 |          The string ``'best'`` places the legend at the location, among the nine
 |          locations defined so far, with the minimum overlap with other drawn
 |          artists.  This option can be quite slow for plots with large amounts of
 |          data; your plotting speed may benefit from providing a specific location.
 |      
 |          The location can also be a 2-tuple giving the coordinates of the lower-left
 |          corner of the legend in axes coordinates (in which case *bbox_to_anchor*
 |          will be ignored).
 |      
 |          For back-compatibility, ``'center right'`` (but no other location) can also
 |          be spelled ``'right'``, and each "string" locations can also be given as a
 |          numeric value:
 |      
 |              ===============   =============
 |              Location String   Location Code
 |              ===============   =============
 |              'best'            0
 |              'upper right'     1
 |              'upper left'      2
 |              'lower left'      3
 |              'lower right'     4
 |              'right'           5
 |              'center left'     6
 |              'center right'    7
 |              'lower center'    8
 |              'upper center'    9
 |              'center'          10
 |              ===============   =============
 |      
 |      bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats
 |          Box that is used to position the legend in conjunction with *loc*.
 |          Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or
 |          `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary
 |          placement of the legend.
 |      
 |          Bbox coordinates are interpreted in the coordinate system given by
 |          *bbox_transform*, with the default transform
 |          Axes or Figure coordinates, depending on which ``legend`` is called.
 |      
 |          If a 4-tuple or `.BboxBase` is given, then it specifies the bbox
 |          ``(x, y, width, height)`` that the legend is placed in.
 |          To put the legend in the best location in the bottom right
 |          quadrant of the axes (or figure)::
 |      
 |              loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)
 |      
 |          A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at
 |          x, y.  For example, to put the legend's upper right-hand corner in the
 |          center of the axes (or figure) the following keywords can be used::
 |      
 |              loc='upper right', bbox_to_anchor=(0.5, 0.5)
 |      
 |      ncol : int, default: 1
 |          The number of columns that the legend has.
 |      
 |      prop : None or `matplotlib.font_manager.FontProperties` or dict
 |          The font properties of the legend. If None (default), the current
 |          :data:`matplotlib.rcParams` will be used.
 |      
 |      fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}
 |          The font size of the legend. If the value is numeric the size will be the
 |          absolute font size in points. String values are relative to the current
 |          default font size. This argument is only used if *prop* is not specified.
 |      
 |      labelcolor : str or list
 |          The color of the text in the legend. Either a valid color string
 |          (for example, 'red'), or a list of color strings. The labelcolor can
 |          also be made to match the color of the line or marker using 'linecolor',
 |          'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').
 |      
 |      numpoints : int, default: :rc:`legend.numpoints`
 |          The number of marker points in the legend when creating a legend
 |          entry for a `.Line2D` (line).
 |      
 |      scatterpoints : int, default: :rc:`legend.scatterpoints`
 |          The number of marker points in the legend when creating
 |          a legend entry for a `.PathCollection` (scatter plot).
 |      
 |      scatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``
 |          The vertical offset (relative to the font size) for the markers
 |          created for a scatter plot legend entry. 0.0 is at the base the
 |          legend text, and 1.0 is at the top. To draw all markers at the
 |          same height, set to ``[0.5]``.
 |      
 |      markerscale : float, default: :rc:`legend.markerscale`
 |          The relative size of legend markers compared with the originally
 |          drawn ones.
 |      
 |      markerfirst : bool, default: True
 |          If *True*, legend marker is placed to the left of the legend label.
 |          If *False*, legend marker is placed to the right of the legend label.
 |      
 |      frameon : bool, default: :rc:`legend.frameon`
 |          Whether the legend should be drawn on a patch (frame).
 |      
 |      fancybox : bool, default: :rc:`legend.fancybox`
 |          Whether round edges should be enabled around the `~.FancyBboxPatch` which
 |          makes up the legend's background.
 |      
 |      shadow : bool, default: :rc:`legend.shadow`
 |          Whether to draw a shadow behind the legend.
 |      
 |      framealpha : float, default: :rc:`legend.framealpha`
 |          The alpha transparency of the legend's background.
 |          If *shadow* is activated and *framealpha* is ``None``, the default value is
 |          ignored.
 |      
 |      facecolor : "inherit" or color, default: :rc:`legend.facecolor`
 |          The legend's background color.
 |          If ``"inherit"``, use :rc:`axes.facecolor`.
 |      
 |      edgecolor : "inherit" or color, default: :rc:`legend.edgecolor`
 |          The legend's background patch edge color.
 |          If ``"inherit"``, use take :rc:`axes.edgecolor`.
 |      
 |      mode : {"expand", None}
 |          If *mode* is set to ``"expand"`` the legend will be horizontally
 |          expanded to fill the axes area (or *bbox_to_anchor* if defines
 |          the legend's size).
 |      
 |      bbox_transform : None or `matplotlib.transforms.Transform`
 |          The transform for the bounding box (*bbox_to_anchor*). For a value
 |          of ``None`` (default) the Axes'
 |          :data:`~matplotlib.axes.Axes.transAxes` transform will be used.
 |      
 |      title : str or None
 |          The legend's title. Default is no title (``None``).
 |      
 |      title_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`
 |          The font size of the legend's title.
 |      
 |      borderpad : float, default: :rc:`legend.borderpad`
 |          The fractional whitespace inside the legend border, in font-size units.
 |      
 |      labelspacing : float, default: :rc:`legend.labelspacing`
 |          The vertical space between the legend entries, in font-size units.
 |      
 |      handlelength : float, default: :rc:`legend.handlelength`
 |          The length of the legend handles, in font-size units.
 |      
 |      handletextpad : float, default: :rc:`legend.handletextpad`
 |          The pad between the legend handle and text, in font-size units.
 |      
 |      borderaxespad : float, default: :rc:`legend.borderaxespad`
 |          The pad between the axes and legend border, in font-size units.
 |      
 |      columnspacing : float, default: :rc:`legend.columnspacing`
 |          The spacing between columns, in font-size units.
 |      
 |      handler_map : dict or None
 |          The custom dictionary mapping instances or types to a legend
 |          handler. This *handler_map* updates the default handler map
 |          found at `matplotlib.legend.Legend.get_legend_handler_map`.
 |      
 |      
 |      See Also
 |      --------
 |      .Figure.legend
 |      
 |      Notes
 |      -----
 |      Some artists are not supported by this function.  See
 |      :doc:`/tutorials/intermediate/legend_guide` for details.
 |      
 |      Examples
 |      --------
 |      .. plot:: gallery/text_labels_and_annotations/legend.py
 |  
 |  loglog(self, *args, **kwargs)
 |      Make a plot with log scaling on both the x and y axis.
 |      
 |      Call signatures::
 |      
 |          loglog([x], y, [fmt], data=None, **kwargs)
 |          loglog([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)
 |      
 |      This is just a thin wrapper around `.plot` which additionally changes
 |      both the x-axis and the y-axis to log scaling. All of the concepts and
 |      parameters of plot can be used here as well.
 |      
 |      The additional parameters *base*, *subs* and *nonpositive* control the
 |      x/y-axis properties. They are just forwarded to `.Axes.set_xscale` and
 |      `.Axes.set_yscale`. To use different properties on the x-axis and the
 |      y-axis, use e.g.
 |      ``ax.set_xscale("log", base=10); ax.set_yscale("log", base=2)``.
 |      
 |      Parameters
 |      ----------
 |      base : float, default: 10
 |          Base of the logarithm.
 |      
 |      subs : sequence, optional
 |          The location of the minor ticks. If *None*, reasonable locations
 |          are automatically chosen depending on the number of decades in the
 |          plot. See `.Axes.set_xscale`/`.Axes.set_yscale` for details.
 |      
 |      nonpositive : {'mask', 'clip'}, default: 'mask'
 |          Non-positive values can be masked as invalid, or clipped to a very
 |          small positive number.
 |      
 |      Returns
 |      -------
 |      list of `~.Line2D`
 |          Objects representing the plotted data.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          All parameters supported by `.plot`.
 |  
 |  magnitude_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, scale=None, *, data=None, **kwargs)
 |      Plot the magnitude spectrum.
 |      
 |      Compute the magnitude spectrum of *x*.  Data is padded to a
 |      length of *pad_to* and the windowing function *window* is applied to
 |      the signal.
 |      
 |      Parameters
 |      ----------
 |      x : 1-D array or sequence
 |          Array or sequence containing the data.
 |      
 |      Fs : float, default: 2
 |          The sampling frequency (samples per time unit).  It is used to calculate
 |          the Fourier frequencies, *freqs*, in cycles per time unit.
 |      
 |      window : callable or ndarray, default: `.window_hanning`
 |          A function or a vector of length *NFFT*.  To create window vectors see
 |          `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,
 |          `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a
 |          function is passed as the argument, it must take a data segment as an
 |          argument and return the windowed version of the segment.
 |      
 |      sides : {'default', 'onesided', 'twosided'}, optional
 |          Which sides of the spectrum to return. 'default' is one-sided for real
 |          data and two-sided for complex data. 'onesided' forces the return of a
 |          one-sided spectrum, while 'twosided' forces two-sided.
 |      
 |      pad_to : int, optional
 |          The number of points to which the data segment is padded when performing
 |          the FFT.  While not increasing the actual resolution of the spectrum (the
 |          minimum distance between resolvable peaks), this can give more points in
 |          the plot, allowing for more detail. This corresponds to the *n* parameter
 |          in the call to fft().  The default is None, which sets *pad_to* equal to
 |          the length of the input signal (i.e. no padding).
 |      
 |      scale : {'default', 'linear', 'dB'}
 |          The scaling of the values in the *spec*.  'linear' is no scaling.
 |          'dB' returns the values in dB scale, i.e., the dB amplitude
 |          (20 * log10). 'default' is 'linear'.
 |      
 |      Fc : int, default: 0
 |          The center frequency of *x*, which offsets the x extents of the
 |          plot to reflect the frequency range used when a signal is acquired
 |          and then filtered and downsampled to baseband.
 |      
 |      Returns
 |      -------
 |      spectrum : 1-D array
 |          The values for the magnitude spectrum before scaling (real valued).
 |      
 |      freqs : 1-D array
 |          The frequencies corresponding to the elements in *spectrum*.
 |      
 |      line : `~matplotlib.lines.Line2D`
 |          The line created by this function.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Keyword arguments control the `.Line2D` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      psd
 |          Plots the power spectral density.
 |      angle_spectrum
 |          Plots the angles of the corresponding frequencies.
 |      phase_spectrum
 |          Plots the phase (unwrapped angle) of the corresponding frequencies.
 |      specgram
 |          Can plot the magnitude spectrum of segments within the signal in a
 |          colormap.
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  matshow(self, Z, **kwargs)
 |      Plot the values of a 2D matrix or array as color-coded image.
 |      
 |      The matrix will be shown the way it would be printed, with the first
 |      row at the top.  Row and column numbering is zero-based.
 |      
 |      Parameters
 |      ----------
 |      Z : (M, N) array-like
 |          The matrix to be displayed.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.image.AxesImage`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.axes.Axes.imshow` arguments
 |      
 |      See Also
 |      --------
 |      imshow : More general function to plot data on a 2D regular raster.
 |      
 |      Notes
 |      -----
 |      This is just a convenience function wrapping `.imshow` to set useful
 |      defaults for displaying a matrix. In particular:
 |      
 |      - Set ``origin='upper'``.
 |      - Set ``interpolation='nearest'``.
 |      - Set ``aspect='equal'``.
 |      - Ticks are placed to the left and above.
 |      - Ticks are formatted to show integer indices.
 |  
 |  pcolor(self, *args, shading=None, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, data=None, **kwargs)
 |      Create a pseudocolor plot with a non-regular rectangular grid.
 |      
 |      Call signature::
 |      
 |          pcolor([X, Y,] C, **kwargs)
 |      
 |      *X* and *Y* can be used to specify the corners of the quadrilaterals.
 |      
 |      .. hint::
 |      
 |          ``pcolor()`` can be very slow for large arrays. In most
 |          cases you should use the similar but much faster
 |          `~.Axes.pcolormesh` instead. See
 |          :ref:`Differences between pcolor() and pcolormesh()
 |          <differences-pcolor-pcolormesh>` for a discussion of the
 |          differences.
 |      
 |      Parameters
 |      ----------
 |      C : 2D array-like
 |          The color-mapped values.
 |      
 |      X, Y : array-like, optional
 |          The coordinates of the corners of quadrilaterals of a pcolormesh::
 |      
 |              (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])
 |                                    +-----+
 |                                    |     |
 |                                    +-----+
 |                  (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])
 |      
 |          Note that the column index corresponds to the x-coordinate, and
 |          the row index corresponds to y. For details, see the
 |          :ref:`Notes <axes-pcolormesh-grid-orientation>` section below.
 |      
 |          If ``shading='flat'`` the dimensions of *X* and *Y* should be one
 |          greater than those of *C*, and the quadrilateral is colored due
 |          to the value at ``C[i, j]``.  If *X*, *Y* and *C* have equal
 |          dimensions, a warning will be raised and the last row and column
 |          of *C* will be ignored.
 |      
 |          If ``shading='nearest'``, the dimensions of *X* and *Y* should be
 |          the same as those of *C* (if not, a ValueError will be raised). The
 |          color ``C[i, j]`` will be centered on ``(X[i, j], Y[i, j])``.
 |      
 |          If *X* and/or *Y* are 1-D arrays or column vectors they will be
 |          expanded as needed into the appropriate 2D arrays, making a
 |          rectangular grid.
 |      
 |      shading : {'flat', 'nearest', 'auto'}, optional
 |          The fill style for the quadrilateral; defaults to 'flat' or
 |          :rc:`pcolor.shading`. Possible values:
 |      
 |          - 'flat': A solid color is used for each quad. The color of the
 |            quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by
 |            ``C[i, j]``. The dimensions of *X* and *Y* should be
 |            one greater than those of *C*; if they are the same as *C*,
 |            then a deprecation warning is raised, and the last row
 |            and column of *C* are dropped.
 |          - 'nearest': Each grid point will have a color centered on it,
 |            extending halfway between the adjacent grid centers.  The
 |            dimensions of *X* and *Y* must be the same as *C*.
 |          - 'auto': Choose 'flat' if dimensions of *X* and *Y* are one
 |            larger than *C*.  Choose 'nearest' if dimensions are the same.
 |      
 |          See :doc:`/gallery/images_contours_and_fields/pcolormesh_grids`
 |          for more description.
 |      
 |      cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
 |          A Colormap instance or registered colormap name. The colormap
 |          maps the *C* values to colors.
 |      
 |      norm : `~matplotlib.colors.Normalize`, optional
 |          The Normalize instance scales the data values to the canonical
 |          colormap range [0, 1] for mapping to colors. By default, the data
 |          range is mapped to the colorbar range using linear scaling.
 |      
 |      vmin, vmax : float, default: None
 |          The colorbar range. If *None*, suitable min/max values are
 |          automatically chosen by the `~.Normalize` instance (defaults to
 |          the respective min/max values of *C* in case of the default linear
 |          scaling).
 |          It is deprecated to use *vmin*/*vmax* when *norm* is given.
 |      
 |      edgecolors : {'none', None, 'face', color, color sequence}, optional
 |          The color of the edges. Defaults to 'none'. Possible values:
 |      
 |          - 'none' or '': No edge.
 |          - *None*: :rc:`patch.edgecolor` will be used. Note that currently
 |            :rc:`patch.force_edgecolor` has to be True for this to work.
 |          - 'face': Use the adjacent face color.
 |          - A color or sequence of colors will set the edge color.
 |      
 |          The singular form *edgecolor* works as an alias.
 |      
 |      alpha : float, default: None
 |          The alpha blending value of the face color, between 0 (transparent)
 |          and 1 (opaque). Note: The edgecolor is currently not affected by
 |          this.
 |      
 |      snap : bool, default: False
 |          Whether to snap the mesh to pixel boundaries.
 |      
 |      Returns
 |      -------
 |      `matplotlib.collections.Collection`
 |      
 |      Other Parameters
 |      ----------------
 |      antialiaseds : bool, default: False
 |          The default *antialiaseds* is False if the default
 |          *edgecolors*\ ="none" is used.  This eliminates artificial lines
 |          at patch boundaries, and works regardless of the value of alpha.
 |          If *edgecolors* is not "none", then the default *antialiaseds*
 |          is taken from :rc:`patch.antialiased`.
 |          Stroking the edges may be preferred if *alpha* is 1, but will
 |          cause artifacts otherwise.
 |      
 |      **kwargs
 |          Additionally, the following arguments are allowed. They are passed
 |          along to the `~matplotlib.collections.PolyCollection` constructor:
 |      
 |      Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: array-like or scalar or None
 |          animated: bool
 |          antialiased or aa or antialiaseds: bool or list of bools
 |          array: ndarray or None
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clim: (vmin: float, vmax: float)
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          cmap: `.Colormap` or str or None
 |          color: color or list of rgba tuples
 |          contains: unknown
 |          edgecolor or ec or edgecolors: color or list of colors or 'face'
 |          facecolor or facecolors or fc: color or list of colors
 |          figure: `.Figure`
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or dashes or linestyles or ls: str or tuple or list thereof
 |          linewidth or linewidths or lw: float or list of floats
 |          norm: `.Normalize` or None
 |          offset_position: unknown
 |          offsets: (N, 2) or (2,) array-like
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          urls: list of str or None
 |          visible: bool
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      pcolormesh : for an explanation of the differences between
 |          pcolor and pcolormesh.
 |      imshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a
 |          faster alternative.
 |      
 |      Notes
 |      -----
 |      **Masked arrays**
 |      
 |      *X*, *Y* and *C* may be masked arrays. If either ``C[i, j]``, or one
 |      of the vertices surrounding ``C[i, j]`` (*X* or *Y* at
 |      ``[i, j], [i+1, j], [i, j+1], [i+1, j+1]``) is masked, nothing is
 |      plotted.
 |      
 |      .. _axes-pcolor-grid-orientation:
 |      
 |      **Grid orientation**
 |      
 |      The grid orientation follows the standard matrix convention: An array
 |      *C* with shape (nrows, ncolumns) is plotted with the column number as
 |      *X* and the row number as *Y*.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  pcolorfast(self, *args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, data=None, **kwargs)
 |      Create a pseudocolor plot with a non-regular rectangular grid.
 |      
 |      Call signature::
 |      
 |        ax.pcolorfast([X, Y], C, /, **kwargs)
 |      
 |      This method is similar to `~.Axes.pcolor` and `~.Axes.pcolormesh`.
 |      It's designed to provide the fastest pcolor-type plotting with the
 |      Agg backend. To achieve this, it uses different algorithms internally
 |      depending on the complexity of the input grid (regular rectangular,
 |      non-regular rectangular or arbitrary quadrilateral).
 |      
 |      .. warning::
 |      
 |         This method is experimental. Compared to `~.Axes.pcolor` or
 |         `~.Axes.pcolormesh` it has some limitations:
 |      
 |         - It supports only flat shading (no outlines)
 |         - It lacks support for log scaling of the axes.
 |         - It does not have a have a pyplot wrapper.
 |      
 |      Parameters
 |      ----------
 |      C : array-like
 |          The image data. Supported array shapes are:
 |      
 |          - (M, N): an image with scalar data. The data is visualized
 |            using a colormap.
 |          - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).
 |          - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),
 |            i.e. including transparency.
 |      
 |          The first two dimensions (M, N) define the rows and columns of
 |          the image.
 |      
 |          This parameter can only be passed positionally.
 |      
 |      X, Y : tuple or array-like, default: ``(0, N)``, ``(0, M)``
 |          *X* and *Y* are used to specify the coordinates of the
 |          quadrilaterals. There are different ways to do this:
 |      
 |          - Use tuples ``X=(xmin, xmax)`` and ``Y=(ymin, ymax)`` to define
 |            a *uniform rectangular grid*.
 |      
 |            The tuples define the outer edges of the grid. All individual
 |            quadrilaterals will be of the same size. This is the fastest
 |            version.
 |      
 |          - Use 1D arrays *X*, *Y* to specify a *non-uniform rectangular
 |            grid*.
 |      
 |            In this case *X* and *Y* have to be monotonic 1D arrays of length
 |            *N+1* and *M+1*, specifying the x and y boundaries of the cells.
 |      
 |            The speed is intermediate. Note: The grid is checked, and if
 |            found to be uniform the fast version is used.
 |      
 |          - Use 2D arrays *X*, *Y* if you need an *arbitrary quadrilateral
 |            grid* (i.e. if the quadrilaterals are not rectangular).
 |      
 |            In this case *X* and *Y* are 2D arrays with shape (M + 1, N + 1),
 |            specifying the x and y coordinates of the corners of the colored
 |            quadrilaterals.
 |      
 |            This is the most general, but the slowest to render.  It may
 |            produce faster and more compact output using ps, pdf, and
 |            svg backends, however.
 |      
 |          These arguments can only be passed positionally.
 |      
 |      cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
 |          A Colormap instance or registered colormap name. The colormap
 |          maps the *C* values to colors.
 |      
 |      norm : `~matplotlib.colors.Normalize`, optional
 |          The Normalize instance scales the data values to the canonical
 |          colormap range [0, 1] for mapping to colors. By default, the data
 |          range is mapped to the colorbar range using linear scaling.
 |      
 |      vmin, vmax : float, default: None
 |          The colorbar range. If *None*, suitable min/max values are
 |          automatically chosen by the `~.Normalize` instance (defaults to
 |          the respective min/max values of *C* in case of the default linear
 |          scaling).
 |          It is deprecated to use *vmin*/*vmax* when *norm* is given.
 |      
 |      alpha : float, default: None
 |          The alpha blending value, between 0 (transparent) and 1 (opaque).
 |      
 |      snap : bool, default: False
 |          Whether to snap the mesh to pixel boundaries.
 |      
 |      Returns
 |      -------
 |      `.AxesImage` or `.PcolorImage` or `.QuadMesh`
 |          The return type depends on the type of grid:
 |      
 |          - `.AxesImage` for a regular rectangular grid.
 |          - `.PcolorImage` for a non-regular rectangular grid.
 |          - `.QuadMesh` for a non-rectangular grid.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Supported additional parameters depend on the type of grid.
 |          See return types of *image* for further description.
 |      
 |      Notes
 |      -----
 |      .. [notes section required to get data note injection right]
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  pcolormesh(self, *args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, shading=None, antialiased=False, data=None, **kwargs)
 |      Create a pseudocolor plot with a non-regular rectangular grid.
 |      
 |      Call signature::
 |      
 |          pcolormesh([X, Y,] C, **kwargs)
 |      
 |      *X* and *Y* can be used to specify the corners of the quadrilaterals.
 |      
 |      .. hint::
 |      
 |         `~.Axes.pcolormesh` is similar to `~.Axes.pcolor`. It is much faster
 |         and preferred in most cases. For a detailed discussion on the
 |         differences see :ref:`Differences between pcolor() and pcolormesh()
 |         <differences-pcolor-pcolormesh>`.
 |      
 |      Parameters
 |      ----------
 |      C : 2D array-like
 |          The color-mapped values.
 |      
 |      X, Y : array-like, optional
 |          The coordinates of the corners of quadrilaterals of a pcolormesh::
 |      
 |              (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])
 |                                    +-----+
 |                                    |     |
 |                                    +-----+
 |                  (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])
 |      
 |          Note that the column index corresponds to the x-coordinate, and
 |          the row index corresponds to y. For details, see the
 |          :ref:`Notes <axes-pcolormesh-grid-orientation>` section below.
 |      
 |          If ``shading='flat'`` the dimensions of *X* and *Y* should be one
 |          greater than those of *C*, and the quadrilateral is colored due
 |          to the value at ``C[i, j]``.  If *X*, *Y* and *C* have equal
 |          dimensions, a warning will be raised and the last row and column
 |          of *C* will be ignored.
 |      
 |          If ``shading='nearest'`` or ``'gouraud'``, the dimensions of *X*
 |          and *Y* should be the same as those of *C* (if not, a ValueError
 |          will be raised).  For ``'nearest'`` the color ``C[i, j]`` is
 |          centered on ``(X[i, j], Y[i, j])``.  For ``'gouraud'``, a smooth
 |          interpolation is caried out between the quadrilateral corners.
 |      
 |          If *X* and/or *Y* are 1-D arrays or column vectors they will be
 |          expanded as needed into the appropriate 2D arrays, making a
 |          rectangular grid.
 |      
 |      cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
 |          A Colormap instance or registered colormap name. The colormap
 |          maps the *C* values to colors.
 |      
 |      norm : `~matplotlib.colors.Normalize`, optional
 |          The Normalize instance scales the data values to the canonical
 |          colormap range [0, 1] for mapping to colors. By default, the data
 |          range is mapped to the colorbar range using linear scaling.
 |      
 |      vmin, vmax : float, default: None
 |          The colorbar range. If *None*, suitable min/max values are
 |          automatically chosen by the `~.Normalize` instance (defaults to
 |          the respective min/max values of *C* in case of the default linear
 |          scaling).
 |          It is deprecated to use *vmin*/*vmax* when *norm* is given.
 |      
 |      edgecolors : {'none', None, 'face', color, color sequence}, optional
 |          The color of the edges. Defaults to 'none'. Possible values:
 |      
 |          - 'none' or '': No edge.
 |          - *None*: :rc:`patch.edgecolor` will be used. Note that currently
 |            :rc:`patch.force_edgecolor` has to be True for this to work.
 |          - 'face': Use the adjacent face color.
 |          - A color or sequence of colors will set the edge color.
 |      
 |          The singular form *edgecolor* works as an alias.
 |      
 |      alpha : float, default: None
 |          The alpha blending value, between 0 (transparent) and 1 (opaque).
 |      
 |      shading : {'flat', 'nearest', 'gouraud', 'auto'}, optional
 |          The fill style for the quadrilateral; defaults to
 |          'flat' or :rc:`pcolor.shading`. Possible values:
 |      
 |          - 'flat': A solid color is used for each quad. The color of the
 |            quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by
 |            ``C[i, j]``. The dimensions of *X* and *Y* should be
 |            one greater than those of *C*; if they are the same as *C*,
 |            then a deprecation warning is raised, and the last row
 |            and column of *C* are dropped.
 |          - 'nearest': Each grid point will have a color centered on it,
 |            extending halfway between the adjacent grid centers.  The
 |            dimensions of *X* and *Y* must be the same as *C*.
 |          - 'gouraud': Each quad will be Gouraud shaded: The color of the
 |            corners (i', j') are given by ``C[i', j']``. The color values of
 |            the area in between is interpolated from the corner values.
 |            The dimensions of *X* and *Y* must be the same as *C*. When
 |            Gouraud shading is used, *edgecolors* is ignored.
 |          - 'auto': Choose 'flat' if dimensions of *X* and *Y* are one
 |            larger than *C*.  Choose 'nearest' if dimensions are the same.
 |      
 |          See :doc:`/gallery/images_contours_and_fields/pcolormesh_grids`
 |          for more description.
 |      
 |      snap : bool, default: False
 |          Whether to snap the mesh to pixel boundaries.
 |      
 |      rasterized: bool, optional
 |          Rasterize the pcolormesh when drawing vector graphics.  This can
 |          speed up rendering and produce smaller files for large data sets.
 |          See also :doc:`/gallery/misc/rasterization_demo`.
 |      
 |      Returns
 |      -------
 |      `matplotlib.collections.QuadMesh`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Additionally, the following arguments are allowed. They are passed
 |          along to the `~matplotlib.collections.QuadMesh` constructor:
 |      
 |      Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: array-like or scalar or None
 |          animated: bool
 |          antialiased or aa or antialiaseds: bool or list of bools
 |          array: ndarray or None
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clim: (vmin: float, vmax: float)
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          cmap: `.Colormap` or str or None
 |          color: color or list of rgba tuples
 |          contains: unknown
 |          edgecolor or ec or edgecolors: color or list of colors or 'face'
 |          facecolor or facecolors or fc: color or list of colors
 |          figure: `.Figure`
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or dashes or linestyles or ls: str or tuple or list thereof
 |          linewidth or linewidths or lw: float or list of floats
 |          norm: `.Normalize` or None
 |          offset_position: unknown
 |          offsets: (N, 2) or (2,) array-like
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          urls: list of str or None
 |          visible: bool
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      pcolor : An alternative implementation with slightly different
 |          features. For a detailed discussion on the differences see
 |          :ref:`Differences between pcolor() and pcolormesh()
 |          <differences-pcolor-pcolormesh>`.
 |      imshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a
 |          faster alternative.
 |      
 |      Notes
 |      -----
 |      **Masked arrays**
 |      
 |      *C* may be a masked array. If ``C[i, j]`` is masked, the corresponding
 |      quadrilateral will be transparent. Masking of *X* and *Y* is not
 |      supported. Use `~.Axes.pcolor` if you need this functionality.
 |      
 |      .. _axes-pcolormesh-grid-orientation:
 |      
 |      **Grid orientation**
 |      
 |      The grid orientation follows the standard matrix convention: An array
 |      *C* with shape (nrows, ncolumns) is plotted with the column number as
 |      *X* and the row number as *Y*.
 |      
 |      .. _differences-pcolor-pcolormesh:
 |      
 |      **Differences between pcolor() and pcolormesh()**
 |      
 |      Both methods are used to create a pseudocolor plot of a 2D array
 |      using quadrilaterals.
 |      
 |      The main difference lies in the created object and internal data
 |      handling:
 |      While `~.Axes.pcolor` returns a `.PolyCollection`, `~.Axes.pcolormesh`
 |      returns a `.QuadMesh`. The latter is more specialized for the given
 |      purpose and thus is faster. It should almost always be preferred.
 |      
 |      There is also a slight difference in the handling of masked arrays.
 |      Both `~.Axes.pcolor` and `~.Axes.pcolormesh` support masked arrays
 |      for *C*. However, only `~.Axes.pcolor` supports masked arrays for *X*
 |      and *Y*. The reason lies in the internal handling of the masked values.
 |      `~.Axes.pcolor` leaves out the respective polygons from the
 |      PolyCollection. `~.Axes.pcolormesh` sets the facecolor of the masked
 |      elements to transparent. You can see the difference when using
 |      edgecolors. While all edges are drawn irrespective of masking in a
 |      QuadMesh, the edge between two adjacent masked quadrilaterals in
 |      `~.Axes.pcolor` is not drawn as the corresponding polygons do not
 |      exist in the PolyCollection.
 |      
 |      Another difference is the support of Gouraud shading in
 |      `~.Axes.pcolormesh`, which is not available with `~.Axes.pcolor`.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  phase_spectrum(self, x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, *, data=None, **kwargs)
 |      Plot the phase spectrum.
 |      
 |      Compute the phase spectrum (unwrapped angle spectrum) of *x*.
 |      Data is padded to a length of *pad_to* and the windowing function
 |      *window* is applied to the signal.
 |      
 |      Parameters
 |      ----------
 |      x : 1-D array or sequence
 |          Array or sequence containing the data
 |      
 |      Fs : float, default: 2
 |          The sampling frequency (samples per time unit).  It is used to calculate
 |          the Fourier frequencies, *freqs*, in cycles per time unit.
 |      
 |      window : callable or ndarray, default: `.window_hanning`
 |          A function or a vector of length *NFFT*.  To create window vectors see
 |          `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,
 |          `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a
 |          function is passed as the argument, it must take a data segment as an
 |          argument and return the windowed version of the segment.
 |      
 |      sides : {'default', 'onesided', 'twosided'}, optional
 |          Which sides of the spectrum to return. 'default' is one-sided for real
 |          data and two-sided for complex data. 'onesided' forces the return of a
 |          one-sided spectrum, while 'twosided' forces two-sided.
 |      
 |      pad_to : int, optional
 |          The number of points to which the data segment is padded when performing
 |          the FFT.  While not increasing the actual resolution of the spectrum (the
 |          minimum distance between resolvable peaks), this can give more points in
 |          the plot, allowing for more detail. This corresponds to the *n* parameter
 |          in the call to fft().  The default is None, which sets *pad_to* equal to
 |          the length of the input signal (i.e. no padding).
 |      
 |      Fc : int, default: 0
 |          The center frequency of *x*, which offsets the x extents of the
 |          plot to reflect the frequency range used when a signal is acquired
 |          and then filtered and downsampled to baseband.
 |      
 |      Returns
 |      -------
 |      spectrum : 1-D array
 |          The values for the phase spectrum in radians (real valued).
 |      
 |      freqs : 1-D array
 |          The frequencies corresponding to the elements in *spectrum*.
 |      
 |      line : `~matplotlib.lines.Line2D`
 |          The line created by this function.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Keyword arguments control the `.Line2D` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      magnitude_spectrum
 |          Plots the magnitudes of the corresponding frequencies.
 |      angle_spectrum
 |          Plots the wrapped version of this function.
 |      specgram
 |          Can plot the phase spectrum of segments within the signal in a
 |          colormap.
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  pie(self, x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=0, radius=1, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False, rotatelabels=False, *, normalize=None, data=None)
 |      Plot a pie chart.
 |      
 |      Make a pie chart of array *x*.  The fractional area of each wedge is
 |      given by ``x/sum(x)``.  If ``sum(x) < 1``, then the values of *x* give
 |      the fractional area directly and the array will not be normalized. The
 |      resulting pie will have an empty wedge of size ``1 - sum(x)``.
 |      
 |      The wedges are plotted counterclockwise, by default starting from the
 |      x-axis.
 |      
 |      Parameters
 |      ----------
 |      x : 1D array-like
 |          The wedge sizes.
 |      
 |      explode : array-like, default: None
 |          If not *None*, is a ``len(x)`` array which specifies the fraction
 |          of the radius with which to offset each wedge.
 |      
 |      labels : list, default: None
 |          A sequence of strings providing the labels for each wedge
 |      
 |      colors : array-like, default: None
 |          A sequence of colors through which the pie chart will cycle.  If
 |          *None*, will use the colors in the currently active cycle.
 |      
 |      autopct : None or str or callable, default: None
 |          If not *None*, is a string or function used to label the wedges
 |          with their numeric value.  The label will be placed inside the
 |          wedge.  If it is a format string, the label will be ``fmt % pct``.
 |          If it is a function, it will be called.
 |      
 |      pctdistance : float, default: 0.6
 |          The ratio between the center of each pie slice and the start of
 |          the text generated by *autopct*.  Ignored if *autopct* is *None*.
 |      
 |      shadow : bool, default: False
 |          Draw a shadow beneath the pie.
 |      
 |      normalize : None or bool, default: None
 |          When *True*, always make a full pie by normalizing x so that
 |          ``sum(x) == 1``. *False* makes a partial pie if ``sum(x) <= 1``
 |          and raises a `ValueError` for ``sum(x) > 1``.
 |      
 |          When *None*, defaults to *True* if ``sum(x) >= 1`` and *False* if
 |          ``sum(x) < 1``.
 |      
 |          Please note that the previous default value of *None* is now
 |          deprecated, and the default will change to *True* in the next
 |          release. Please pass ``normalize=False`` explicitly if you want to
 |          draw a partial pie.
 |      
 |      labeldistance : float or None, default: 1.1
 |          The radial distance at which the pie labels are drawn.
 |          If set to ``None``, label are not drawn, but are stored for use in
 |          ``legend()``
 |      
 |      startangle : float, default: 0 degrees
 |          The angle by which the start of the pie is rotated,
 |          counterclockwise from the x-axis.
 |      
 |      radius : float, default: 1
 |          The radius of the pie.
 |      
 |      counterclock : bool, default: True
 |          Specify fractions direction, clockwise or counterclockwise.
 |      
 |      wedgeprops : dict, default: None
 |          Dict of arguments passed to the wedge objects making the pie.
 |          For example, you can pass in ``wedgeprops = {'linewidth': 3}``
 |          to set the width of the wedge border lines equal to 3.
 |          For more details, look at the doc/arguments of the wedge object.
 |          By default ``clip_on=False``.
 |      
 |      textprops : dict, default: None
 |          Dict of arguments to pass to the text objects.
 |      
 |      center : (float, float), default: (0, 0)
 |          The coordinates of the center of the chart.
 |      
 |      frame : bool, default: False
 |          Plot Axes frame with the chart if true.
 |      
 |      rotatelabels : bool, default: False
 |          Rotate each label to the angle of the corresponding slice if true.
 |      
 |      Returns
 |      -------
 |      patches : list
 |          A sequence of `matplotlib.patches.Wedge` instances
 |      
 |      texts : list
 |          A list of the label `.Text` instances.
 |      
 |      autotexts : list
 |          A list of `.Text` instances for the numeric labels. This will only
 |          be returned if the parameter *autopct* is not *None*.
 |      
 |      Notes
 |      -----
 |      The pie chart will probably look best if the figure and Axes are
 |      square, or the Axes aspect is equal.
 |      This method sets the aspect ratio of the axis to "equal".
 |      The Axes aspect ratio can be controlled with `.Axes.set_aspect`.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *explode*, *labels*, *colors*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  plot(self, *args, scalex=True, scaley=True, data=None, **kwargs)
 |      Plot y versus x as lines and/or markers.
 |      
 |      Call signatures::
 |      
 |          plot([x], y, [fmt], *, data=None, **kwargs)
 |          plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)
 |      
 |      The coordinates of the points or line nodes are given by *x*, *y*.
 |      
 |      The optional parameter *fmt* is a convenient way for defining basic
 |      formatting like color, marker and linestyle. It's a shortcut string
 |      notation described in the *Notes* section below.
 |      
 |      >>> plot(x, y)        # plot x and y using default line style and color
 |      >>> plot(x, y, 'bo')  # plot x and y using blue circle markers
 |      >>> plot(y)           # plot y using x as index array 0..N-1
 |      >>> plot(y, 'r+')     # ditto, but with red plusses
 |      
 |      You can use `.Line2D` properties as keyword arguments for more
 |      control on the appearance. Line properties and *fmt* can be mixed.
 |      The following two calls yield identical results:
 |      
 |      >>> plot(x, y, 'go--', linewidth=2, markersize=12)
 |      >>> plot(x, y, color='green', marker='o', linestyle='dashed',
 |      ...      linewidth=2, markersize=12)
 |      
 |      When conflicting with *fmt*, keyword arguments take precedence.
 |      
 |      
 |      **Plotting labelled data**
 |      
 |      There's a convenient way for plotting objects with labelled data (i.e.
 |      data that can be accessed by index ``obj['y']``). Instead of giving
 |      the data in *x* and *y*, you can provide the object in the *data*
 |      parameter and just give the labels for *x* and *y*::
 |      
 |      >>> plot('xlabel', 'ylabel', data=obj)
 |      
 |      All indexable objects are supported. This could e.g. be a `dict`, a
 |      `pandas.DataFrame` or a structured numpy array.
 |      
 |      
 |      **Plotting multiple sets of data**
 |      
 |      There are various ways to plot multiple sets of data.
 |      
 |      - The most straight forward way is just to call `plot` multiple times.
 |        Example:
 |      
 |        >>> plot(x1, y1, 'bo')
 |        >>> plot(x2, y2, 'go')
 |      
 |      - If *x* and/or *y* are 2D arrays a separate data set will be drawn
 |        for every column. If both *x* and *y* are 2D, they must have the
 |        same shape. If only one of them is 2D with shape (N, m) the other
 |        must have length N and will be used for every data set m.
 |      
 |        Example:
 |      
 |        >>> x = [1, 2, 3]
 |        >>> y = np.array([[1, 2], [3, 4], [5, 6]])
 |        >>> plot(x, y)
 |      
 |        is equivalent to:
 |      
 |        >>> for col in range(y.shape[1]):
 |        ...     plot(x, y[:, col])
 |      
 |      - The third way is to specify multiple sets of *[x]*, *y*, *[fmt]*
 |        groups::
 |      
 |        >>> plot(x1, y1, 'g^', x2, y2, 'g-')
 |      
 |        In this case, any additional keyword argument applies to all
 |        datasets. Also this syntax cannot be combined with the *data*
 |        parameter.
 |      
 |      By default, each line is assigned a different style specified by a
 |      'style cycle'. The *fmt* and line property parameters are only
 |      necessary if you want explicit deviations from these defaults.
 |      Alternatively, you can also change the style cycle using
 |      :rc:`axes.prop_cycle`.
 |      
 |      
 |      Parameters
 |      ----------
 |      x, y : array-like or scalar
 |          The horizontal / vertical coordinates of the data points.
 |          *x* values are optional and default to ``range(len(y))``.
 |      
 |          Commonly, these parameters are 1D arrays.
 |      
 |          They can also be scalars, or two-dimensional (in that case, the
 |          columns represent separate data sets).
 |      
 |          These arguments cannot be passed as keywords.
 |      
 |      fmt : str, optional
 |          A format string, e.g. 'ro' for red circles. See the *Notes*
 |          section for a full description of the format strings.
 |      
 |          Format strings are just an abbreviation for quickly setting
 |          basic line properties. All of these and more can also be
 |          controlled by keyword arguments.
 |      
 |          This argument cannot be passed as keyword.
 |      
 |      data : indexable object, optional
 |          An object with labelled data. If given, provide the label names to
 |          plot in *x* and *y*.
 |      
 |          .. note::
 |              Technically there's a slight ambiguity in calls where the
 |              second label is a valid *fmt*. ``plot('n', 'o', data=obj)``
 |              could be ``plt(x, y)`` or ``plt(y, fmt)``. In such cases,
 |              the former interpretation is chosen, but a warning is issued.
 |              You may suppress the warning by adding an empty format string
 |              ``plot('n', 'o', '', data=obj)``.
 |      
 |      Returns
 |      -------
 |      list of `.Line2D`
 |          A list of lines representing the plotted data.
 |      
 |      Other Parameters
 |      ----------------
 |      scalex, scaley : bool, default: True
 |          These parameters determine if the view limits are adapted to the
 |          data limits. The values are passed on to `autoscale_view`.
 |      
 |      **kwargs : `.Line2D` properties, optional
 |          *kwargs* are used to specify properties like a line label (for
 |          auto legends), linewidth, antialiasing, marker face color.
 |          Example::
 |      
 |          >>> plot([1, 2, 3], [1, 2, 3], 'go-', label='line 1', linewidth=2)
 |          >>> plot([1, 2, 3], [1, 4, 9], 'rs', label='line 2')
 |      
 |          If you specify multiple lines with one plot call, the kwargs apply
 |          to all those lines. In case the label object is iterable, each
 |          element is used as labels for each set of data.
 |      
 |          Here is a list of available `.Line2D` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      scatter : XY scatter plot with markers of varying size and/or color (
 |          sometimes also called bubble chart).
 |      
 |      Notes
 |      -----
 |      **Format Strings**
 |      
 |      A format string consists of a part for color, marker and line::
 |      
 |          fmt = '[marker][line][color]'
 |      
 |      Each of them is optional. If not provided, the value from the style
 |      cycle is used. Exception: If ``line`` is given, but no ``marker``,
 |      the data will be a line without markers.
 |      
 |      Other combinations such as ``[color][marker][line]`` are also
 |      supported, but note that their parsing may be ambiguous.
 |      
 |      **Markers**
 |      
 |      =============   ===============================
 |      character       description
 |      =============   ===============================
 |      ``'.'``         point marker
 |      ``','``         pixel marker
 |      ``'o'``         circle marker
 |      ``'v'``         triangle_down marker
 |      ``'^'``         triangle_up marker
 |      ``'<'``         triangle_left marker
 |      ``'>'``         triangle_right marker
 |      ``'1'``         tri_down marker
 |      ``'2'``         tri_up marker
 |      ``'3'``         tri_left marker
 |      ``'4'``         tri_right marker
 |      ``'8'``         octagon marker
 |      ``'s'``         square marker
 |      ``'p'``         pentagon marker
 |      ``'P'``         plus (filled) marker
 |      ``'*'``         star marker
 |      ``'h'``         hexagon1 marker
 |      ``'H'``         hexagon2 marker
 |      ``'+'``         plus marker
 |      ``'x'``         x marker
 |      ``'X'``         x (filled) marker
 |      ``'D'``         diamond marker
 |      ``'d'``         thin_diamond marker
 |      ``'|'``         vline marker
 |      ``'_'``         hline marker
 |      =============   ===============================
 |      
 |      **Line Styles**
 |      
 |      =============    ===============================
 |      character        description
 |      =============    ===============================
 |      ``'-'``          solid line style
 |      ``'--'``         dashed line style
 |      ``'-.'``         dash-dot line style
 |      ``':'``          dotted line style
 |      =============    ===============================
 |      
 |      Example format strings::
 |      
 |          'b'    # blue markers with default shape
 |          'or'   # red circles
 |          '-g'   # green solid line
 |          '--'   # dashed line with default color
 |          '^k:'  # black triangle_up markers connected by a dotted line
 |      
 |      **Colors**
 |      
 |      The supported color abbreviations are the single letter codes
 |      
 |      =============    ===============================
 |      character        color
 |      =============    ===============================
 |      ``'b'``          blue
 |      ``'g'``          green
 |      ``'r'``          red
 |      ``'c'``          cyan
 |      ``'m'``          magenta
 |      ``'y'``          yellow
 |      ``'k'``          black
 |      ``'w'``          white
 |      =============    ===============================
 |      
 |      and the ``'CN'`` colors that index into the default property cycle.
 |      
 |      If the color is the only part of the format string, you can
 |      additionally use any  `matplotlib.colors` spec, e.g. full names
 |      (``'green'``) or hex strings (``'#008000'``).
 |  
 |  plot_date(self, x, y, fmt='o', tz=None, xdate=True, ydate=False, *, data=None, **kwargs)
 |      Plot co-ercing the axis to treat floats as dates.
 |      
 |      Similar to `.plot`, this plots *y* vs. *x* as lines or markers.
 |      However, the axis labels are formatted as dates depending on *xdate*
 |      and *ydate*.  Note that `.plot` will work with `datetime` and
 |      `numpy.datetime64` objects without resorting to this method.
 |      
 |      Parameters
 |      ----------
 |      x, y : array-like
 |          The coordinates of the data points. If *xdate* or *ydate* is
 |          *True*, the respective values *x* or *y* are interpreted as
 |          :ref:`Matplotlib dates <date-format>`.
 |      
 |      fmt : str, optional
 |          The plot format string. For details, see the corresponding
 |          parameter in `.plot`.
 |      
 |      tz : timezone string or `datetime.tzinfo`, default: :rc:`timezone`
 |          The time zone to use in labeling dates.
 |      
 |      xdate : bool, default: True
 |          If *True*, the *x*-axis will be interpreted as Matplotlib dates.
 |      
 |      ydate : bool, default: False
 |          If *True*, the *y*-axis will be interpreted as Matplotlib dates.
 |      
 |      Returns
 |      -------
 |      list of `~.Line2D`
 |          Objects representing the plotted data.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Keyword arguments control the `.Line2D` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      matplotlib.dates : Helper functions on dates.
 |      matplotlib.dates.date2num : Convert dates to num.
 |      matplotlib.dates.num2date : Convert num to dates.
 |      matplotlib.dates.drange : Create an equally spaced sequence of dates.
 |      
 |      Notes
 |      -----
 |      If you are using custom date tickers and formatters, it may be
 |      necessary to set the formatters/locators after the call to
 |      `.plot_date`. `.plot_date` will set the default tick locator to
 |      `.AutoDateLocator` (if the tick locator is not already set to a
 |      `.DateLocator` instance) and the default tick formatter to
 |      `.AutoDateFormatter` (if the tick formatter is not already set to a
 |      `.DateFormatter` instance).
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  psd(self, x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, *, data=None, **kwargs)
 |      Plot the power spectral density.
 |      
 |      The power spectral density :math:`P_{xx}` by Welch's average
 |      periodogram method.  The vector *x* is divided into *NFFT* length
 |      segments.  Each segment is detrended by function *detrend* and
 |      windowed by function *window*.  *noverlap* gives the length of
 |      the overlap between segments.  The :math:`|\mathrm{fft}(i)|^2`
 |      of each segment :math:`i` are averaged to compute :math:`P_{xx}`,
 |      with a scaling to correct for power loss due to windowing.
 |      
 |      If len(*x*) < *NFFT*, it will be zero padded to *NFFT*.
 |      
 |      Parameters
 |      ----------
 |      x : 1-D array or sequence
 |          Array or sequence containing the data
 |      
 |      Fs : float, default: 2
 |          The sampling frequency (samples per time unit).  It is used to calculate
 |          the Fourier frequencies, *freqs*, in cycles per time unit.
 |      
 |      window : callable or ndarray, default: `.window_hanning`
 |          A function or a vector of length *NFFT*.  To create window vectors see
 |          `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,
 |          `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a
 |          function is passed as the argument, it must take a data segment as an
 |          argument and return the windowed version of the segment.
 |      
 |      sides : {'default', 'onesided', 'twosided'}, optional
 |          Which sides of the spectrum to return. 'default' is one-sided for real
 |          data and two-sided for complex data. 'onesided' forces the return of a
 |          one-sided spectrum, while 'twosided' forces two-sided.
 |      
 |      pad_to : int, optional
 |          The number of points to which the data segment is padded when performing
 |          the FFT.  This can be different from *NFFT*, which specifies the number
 |          of data points used.  While not increasing the actual resolution of the
 |          spectrum (the minimum distance between resolvable peaks), this can give
 |          more points in the plot, allowing for more detail. This corresponds to
 |          the *n* parameter in the call to fft(). The default is None, which sets
 |          *pad_to* equal to *NFFT*
 |      
 |      NFFT : int, default: 256
 |          The number of data points used in each block for the FFT.  A power 2 is
 |          most efficient.  This should *NOT* be used to get zero padding, or the
 |          scaling of the result will be incorrect; use *pad_to* for this instead.
 |      
 |      detrend : {'none', 'mean', 'linear'} or callable, default: 'none'
 |          The function applied to each segment before fft-ing, designed to remove
 |          the mean or linear trend.  Unlike in MATLAB, where the *detrend* parameter
 |          is a vector, in Matplotlib is it a function.  The :mod:`~matplotlib.mlab`
 |          module defines `.detrend_none`, `.detrend_mean`, and `.detrend_linear`,
 |          but you can use a custom function as well.  You can also use a string to
 |          choose one of the functions: 'none' calls `.detrend_none`. 'mean' calls
 |          `.detrend_mean`. 'linear' calls `.detrend_linear`.
 |      
 |      scale_by_freq : bool, default: True
 |          Whether the resulting density values should be scaled by the scaling
 |          frequency, which gives density in units of Hz^-1.  This allows for
 |          integration over the returned frequency values.  The default is True for
 |          MATLAB compatibility.
 |      
 |      noverlap : int, default: 0 (no overlap)
 |          The number of points of overlap between segments.
 |      
 |      Fc : int, default: 0
 |          The center frequency of *x*, which offsets the x extents of the
 |          plot to reflect the frequency range used when a signal is acquired
 |          and then filtered and downsampled to baseband.
 |      
 |      return_line : bool, default: False
 |          Whether to include the line object plotted in the returned values.
 |      
 |      Returns
 |      -------
 |      Pxx : 1-D array
 |          The values for the power spectrum :math:`P_{xx}` before scaling
 |          (real valued).
 |      
 |      freqs : 1-D array
 |          The frequencies corresponding to the elements in *Pxx*.
 |      
 |      line : `~matplotlib.lines.Line2D`
 |          The line created by this function.
 |          Only returned if *return_line* is True.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Keyword arguments control the `.Line2D` properties:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      specgram
 |          Differs in the default overlap; in not returning the mean of the
 |          segment periodograms; in returning the times of the segments; and
 |          in plotting a colormap instead of a line.
 |      magnitude_spectrum
 |          Plots the magnitude spectrum.
 |      csd
 |          Plots the spectral density between two signals.
 |      
 |      Notes
 |      -----
 |      For plotting, the power is plotted as
 |      :math:`10\log_{10}(P_{xx})` for decibels, though *Pxx* itself
 |      is returned.
 |      
 |      References
 |      ----------
 |      Bendat & Piersol -- Random Data: Analysis and Measurement Procedures,
 |      John Wiley & Sons (1986)
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  quiver(self, *args, data=None, **kw)
 |      Plot a 2D field of arrows.
 |      
 |      Call signature::
 |      
 |        quiver([X, Y], U, V, [C], **kw)
 |      
 |      *X*, *Y* define the arrow locations, *U*, *V* define the arrow directions, and
 |      *C* optionally sets the color.
 |      
 |      **Arrow size**
 |      
 |      The default settings auto-scales the length of the arrows to a reasonable size.
 |      To change this behavior see the *scale* and *scale_units* parameters.
 |      
 |      **Arrow shape**
 |      
 |      The defaults give a slightly swept-back arrow; to make the head a
 |      triangle, make *headaxislength* the same as *headlength*. To make the
 |      arrow more pointed, reduce *headwidth* or increase *headlength* and
 |      *headaxislength*. To make the head smaller relative to the shaft,
 |      scale down all the head parameters. You will probably do best to leave
 |      minshaft alone.
 |      
 |      **Arrow outline**
 |      
 |      *linewidths* and *edgecolors* can be used to customize the arrow
 |      outlines.
 |      
 |      Parameters
 |      ----------
 |      X, Y : 1D or 2D array-like, optional
 |          The x and y coordinates of the arrow locations.
 |      
 |          If not given, they will be generated as a uniform integer meshgrid based
 |          on the dimensions of *U* and *V*.
 |      
 |          If *X* and *Y* are 1D but *U*, *V* are 2D, *X*, *Y* are expanded to 2D
 |          using ``X, Y = np.meshgrid(X, Y)``. In this case ``len(X)`` and ``len(Y)``
 |          must match the column and row dimensions of *U* and *V*.
 |      
 |      U, V : 1D or 2D array-like
 |          The x and y direction components of the arrow vectors.
 |      
 |          They must have the same number of elements, matching the number of arrow
 |          locations. *U* and *V* may be masked. Only locations unmasked in
 |          *U*, *V*, and *C* will be drawn.
 |      
 |      C : 1D or 2D array-like, optional
 |          Numeric data that defines the arrow colors by colormapping via *norm* and
 |          *cmap*.
 |      
 |          This does not support explicit colors. If you want to set colors directly,
 |          use *color* instead.  The size of *C* must match the number of arrow
 |          locations.
 |      
 |      units : {'width', 'height', 'dots', 'inches', 'x', 'y', 'xy'}, default: 'width'
 |          The arrow dimensions (except for *length*) are measured in multiples of
 |          this unit.
 |      
 |          The following values are supported:
 |      
 |          - 'width', 'height': The width or height of the axis.
 |          - 'dots', 'inches': Pixels or inches based on the figure dpi.
 |          - 'x', 'y', 'xy': *X*, *Y* or :math:`\sqrt{X^2 + Y^2}` in data units.
 |      
 |          The arrows scale differently depending on the units.  For
 |          'x' or 'y', the arrows get larger as one zooms in; for other
 |          units, the arrow size is independent of the zoom state.  For
 |          'width or 'height', the arrow size increases with the width and
 |          height of the axes, respectively, when the window is resized;
 |          for 'dots' or 'inches', resizing does not change the arrows.
 |      
 |      angles : {'uv', 'xy'} or array-like, default: 'uv'
 |          Method for determining the angle of the arrows.
 |      
 |          - 'uv': The arrow axis aspect ratio is 1 so that
 |            if *U* == *V* the orientation of the arrow on the plot is 45 degrees
 |            counter-clockwise from the horizontal axis (positive to the right).
 |      
 |            Use this if the arrows symbolize a quantity that is not based on
 |            *X*, *Y* data coordinates.
 |      
 |          - 'xy': Arrows point from (x, y) to (x+u, y+v).
 |            Use this for plotting a gradient field, for example.
 |      
 |          - Alternatively, arbitrary angles may be specified explicitly as an array
 |            of values in degrees, counter-clockwise from the horizontal axis.
 |      
 |            In this case *U*, *V* is only used to determine the length of the
 |            arrows.
 |      
 |          Note: inverting a data axis will correspondingly invert the
 |          arrows only with ``angles='xy'``.
 |      
 |      scale : float, optional
 |          Number of data units per arrow length unit, e.g., m/s per plot width; a
 |          smaller scale parameter makes the arrow longer. Default is *None*.
 |      
 |          If *None*, a simple autoscaling algorithm is used, based on the average
 |          vector length and the number of vectors. The arrow length unit is given by
 |          the *scale_units* parameter.
 |      
 |      scale_units : {'width', 'height', 'dots', 'inches', 'x', 'y', 'xy'}, optional
 |          If the *scale* kwarg is *None*, the arrow length unit. Default is *None*.
 |      
 |          e.g. *scale_units* is 'inches', *scale* is 2.0, and ``(u, v) = (1, 0)``,
 |          then the vector will be 0.5 inches long.
 |      
 |          If *scale_units* is 'width' or 'height', then the vector will be half the
 |          width/height of the axes.
 |      
 |          If *scale_units* is 'x' then the vector will be 0.5 x-axis
 |          units. To plot vectors in the x-y plane, with u and v having
 |          the same units as x and y, use
 |          ``angles='xy', scale_units='xy', scale=1``.
 |      
 |      width : float, optional
 |          Shaft width in arrow units; default depends on choice of units,
 |          above, and number of vectors; a typical starting value is about
 |          0.005 times the width of the plot.
 |      
 |      headwidth : float, default: 3
 |          Head width as multiple of shaft width.
 |      
 |      headlength : float, default: 5
 |          Head length as multiple of shaft width.
 |      
 |      headaxislength : float, default: 4.5
 |          Head length at shaft intersection.
 |      
 |      minshaft : float, default: 1
 |          Length below which arrow scales, in units of head length. Do not
 |          set this to less than 1, or small arrows will look terrible!
 |      
 |      minlength : float, default: 1
 |          Minimum length as a multiple of shaft width; if an arrow length
 |          is less than this, plot a dot (hexagon) of this diameter instead.
 |      
 |      pivot : {'tail', 'mid', 'middle', 'tip'}, default: 'tail'
 |          The part of the arrow that is anchored to the *X*, *Y* grid. The arrow
 |          rotates about this point.
 |      
 |          'mid' is a synonym for 'middle'.
 |      
 |      color : color or color sequence, optional
 |          Explicit color(s) for the arrows. If *C* has been set, *color* has no
 |          effect.
 |      
 |          This is a synonym for the `~.PolyCollection` *facecolor* parameter.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.collections.PolyCollection` properties, optional
 |          All other keyword arguments are passed on to `.PolyCollection`:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: array-like or scalar or None
 |          animated: bool
 |          antialiased or aa or antialiaseds: bool or list of bools
 |          array: ndarray or None
 |          capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          clim: (vmin: float, vmax: float)
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          cmap: `.Colormap` or str or None
 |          color: color or list of rgba tuples
 |          contains: unknown
 |          edgecolor or ec or edgecolors: color or list of colors or 'face'
 |          facecolor or facecolors or fc: color or list of colors
 |          figure: `.Figure`
 |          gid: str
 |          hatch: {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}
 |          in_layout: bool
 |          joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          label: object
 |          linestyle or dashes or linestyles or ls: str or tuple or list thereof
 |          linewidth or linewidths or lw: float or list of floats
 |          norm: `.Normalize` or None
 |          offset_position: unknown
 |          offsets: (N, 2) or (2,) array-like
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          urls: list of str or None
 |          visible: bool
 |          zorder: float
 |      
 |      See Also
 |      --------
 |      .Axes.quiverkey : Add a key to a quiver plot.
 |  
 |  quiverkey(self, Q, X, Y, U, label, **kw)
 |      Add a key to a quiver plot.
 |      
 |      The positioning of the key depends on *X*, *Y*, *coordinates*, and
 |      *labelpos*.  If *labelpos* is 'N' or 'S', *X*, *Y* give the position of
 |      the middle of the key arrow.  If *labelpos* is 'E', *X*, *Y* positions
 |      the head, and if *labelpos* is 'W', *X*, *Y* positions the tail; in
 |      either of these two cases, *X*, *Y* is somewhere in the middle of the
 |      arrow+label key object.
 |      
 |      Parameters
 |      ----------
 |      Q : `matplotlib.quiver.Quiver`
 |          A `.Quiver` object as returned by a call to `~.Axes.quiver()`.
 |      X, Y : float
 |          The location of the key.
 |      U : float
 |          The length of the key.
 |      label : str
 |          The key label (e.g., length and units of the key).
 |      angle : float, default: 0
 |          The angle of the key arrow, in degrees anti-clockwise from the
 |          x-axis.
 |      coordinates : {'axes', 'figure', 'data', 'inches'}, default: 'axes'
 |          Coordinate system and units for *X*, *Y*: 'axes' and 'figure' are
 |          normalized coordinate systems with (0, 0) in the lower left and
 |          (1, 1) in the upper right; 'data' are the axes data coordinates
 |          (used for the locations of the vectors in the quiver plot itself);
 |          'inches' is position in the figure in inches, with (0, 0) at the
 |          lower left corner.
 |      color : color
 |          Overrides face and edge colors from *Q*.
 |      labelpos : {'N', 'S', 'E', 'W'}
 |          Position the label above, below, to the right, to the left of the
 |          arrow, respectively.
 |      labelsep : float, default: 0.1
 |          Distance in inches between the arrow and the label.
 |      labelcolor : color, default: :rc:`text.color`
 |          Label color.
 |      fontproperties : dict, optional
 |          A dictionary with keyword arguments accepted by the
 |          `~matplotlib.font_manager.FontProperties` initializer:
 |          *family*, *style*, *variant*, *size*, *weight*.
 |      **kwargs
 |          Any additional keyword arguments are used to override vector
 |          properties taken from *Q*.
 |  
 |  scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs)
 |      A scatter plot of *y* vs. *x* with varying marker size and/or color.
 |      
 |      Parameters
 |      ----------
 |      x, y : float or array-like, shape (n, )
 |          The data positions.
 |      
 |      s : float or array-like, shape (n, ), optional
 |          The marker size in points**2.
 |          Default is ``rcParams['lines.markersize'] ** 2``.
 |      
 |      c : array-like or list of colors or color, optional
 |          The marker colors. Possible values:
 |      
 |          - A scalar or sequence of n numbers to be mapped to colors using
 |            *cmap* and *norm*.
 |          - A 2D array in which the rows are RGB or RGBA.
 |          - A sequence of colors of length n.
 |          - A single color format string.
 |      
 |          Note that *c* should not be a single numeric RGB or RGBA sequence
 |          because that is indistinguishable from an array of values to be
 |          colormapped. If you want to specify the same RGB or RGBA value for
 |          all points, use a 2D array with a single row.  Otherwise, value-
 |          matching will have precedence in case of a size matching with *x*
 |          and *y*.
 |      
 |          If you wish to specify a single color for all points
 |          prefer the *color* keyword argument.
 |      
 |          Defaults to `None`. In that case the marker color is determined
 |          by the value of *color*, *facecolor* or *facecolors*. In case
 |          those are not specified or `None`, the marker color is determined
 |          by the next color of the ``Axes``' current "shape and fill" color
 |          cycle. This cycle defaults to :rc:`axes.prop_cycle`.
 |      
 |      marker : `~.markers.MarkerStyle`, default: :rc:`scatter.marker`
 |          The marker style. *marker* can be either an instance of the class
 |          or the text shorthand for a particular marker.
 |          See :mod:`matplotlib.markers` for more information about marker
 |          styles.
 |      
 |      cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
 |          A `.Colormap` instance or registered colormap name. *cmap* is only
 |          used if *c* is an array of floats.
 |      
 |      norm : `~matplotlib.colors.Normalize`, default: None
 |          If *c* is an array of floats, *norm* is used to scale the color
 |          data, *c*, in the range 0 to 1, in order to map into the colormap
 |          *cmap*.
 |          If *None*, use the default `.colors.Normalize`.
 |      
 |      vmin, vmax : float, default: None
 |          *vmin* and *vmax* are used in conjunction with the default norm to
 |          map the color array *c* to the colormap *cmap*. If None, the
 |          respective min and max of the color array is used.
 |          It is deprecated to use *vmin*/*vmax* when *norm* is given.
 |      
 |      alpha : float, default: None
 |          The alpha blending value, between 0 (transparent) and 1 (opaque).
 |      
 |      linewidths : float or array-like, default: :rc:`lines.linewidth`
 |          The linewidth of the marker edges. Note: The default *edgecolors*
 |          is 'face'. You may want to change this as well.
 |      
 |      edgecolors : {'face', 'none', *None*} or color or sequence of color, default: :rc:`scatter.edgecolors`
 |          The edge color of the marker. Possible values:
 |      
 |          - 'face': The edge color will always be the same as the face color.
 |          - 'none': No patch boundary will be drawn.
 |          - A color or sequence of colors.
 |      
 |          For non-filled markers, *edgecolors* is ignored. Instead, the color
 |          is determined like with 'face', i.e. from *c*, *colors*, or
 |          *facecolors*.
 |      
 |      plotnonfinite : bool, default: False
 |          Whether to plot points with nonfinite *c* (i.e. ``inf``, ``-inf``
 |          or ``nan``). If ``True`` the points are drawn with the *bad*
 |          colormap color (see `.Colormap.set_bad`).
 |      
 |      Returns
 |      -------
 |      `~matplotlib.collections.PathCollection`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.collections.Collection` properties
 |      
 |      See Also
 |      --------
 |      plot : To plot scatter plots when markers are identical in size and
 |          color.
 |      
 |      Notes
 |      -----
 |      * The `.plot` function will be faster for scatterplots where markers
 |        don't vary in size or color.
 |      
 |      * Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in which
 |        case all masks will be combined and only unmasked points will be
 |        plotted.
 |      
 |      * Fundamentally, scatter works with 1D arrays; *x*, *y*, *s*, and *c*
 |        may be input as N-D arrays, but within scatter they will be
 |        flattened. The exception is *c*, which will be flattened only if its
 |        size matches the size of *x* and *y*.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y*, *s*, *linewidths*, *edgecolors*, *c*, *facecolor*, *facecolors*, *color*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  secondary_xaxis(self, location, *, functions=None, **kwargs)
 |      Add a second x-axis to this Axes.
 |      
 |      For example if we want to have a second scale for the data plotted on
 |      the xaxis.
 |      
 |      
 |      Warnings
 |      --------
 |      This method is experimental as of 3.1, and the API may change.
 |      
 |      Parameters
 |      ----------
 |      location : {'top', 'bottom', 'left', 'right'} or float
 |          The position to put the secondary axis.  Strings can be 'top' or
 |          'bottom' for orientation='x' and 'right' or 'left' for
 |          orientation='y'. A float indicates the relative position on the
 |          parent axes to put the new axes, 0.0 being the bottom (or left)
 |          and 1.0 being the top (or right).
 |      
 |      functions : 2-tuple of func, or Transform with an inverse
 |      
 |          If a 2-tuple of functions, the user specifies the transform
 |          function and its inverse.  i.e.
 |          ``functions=(lambda x: 2 / x, lambda x: 2 / x)`` would be an
 |          reciprocal transform with a factor of 2.
 |      
 |          The user can also directly supply a subclass of
 |          `.transforms.Transform` so long as it has an inverse.
 |      
 |          See :doc:`/gallery/subplots_axes_and_figures/secondary_axis`
 |          for examples of making these conversions.
 |      
 |      Returns
 |      -------
 |      ax : axes._secondary_axes.SecondaryAxis
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.axes.Axes` properties.
 |          Other miscellaneous axes parameters.
 |      
 |      
 |      Examples
 |      --------
 |      The main axis shows frequency, and the secondary axis shows period.
 |      
 |      .. plot::
 |      
 |          fig, ax = plt.subplots()
 |          ax.loglog(range(1, 360, 5), range(1, 360, 5))
 |          ax.set_xlabel('frequency [Hz]')
 |      
 |          def invert(x):
 |              # 1/x with special treatment of x == 0
 |              x = np.array(x).astype(float)
 |              near_zero = np.isclose(x, 0)
 |              x[near_zero] = np.inf
 |              x[~near_zero] = 1 / x[~near_zero]
 |              return x
 |      
 |          # the inverse of 1/x is itself
 |          secax = ax.secondary_xaxis('top', functions=(invert, invert))
 |          secax.set_xlabel('Period [s]')
 |          plt.show()
 |  
 |  secondary_yaxis(self, location, *, functions=None, **kwargs)
 |      Add a second y-axis to this Axes.
 |      
 |      For example if we want to have a second scale for the data plotted on
 |      the yaxis.
 |      
 |      
 |      Warnings
 |      --------
 |      This method is experimental as of 3.1, and the API may change.
 |      
 |      Parameters
 |      ----------
 |      location : {'top', 'bottom', 'left', 'right'} or float
 |          The position to put the secondary axis.  Strings can be 'top' or
 |          'bottom' for orientation='x' and 'right' or 'left' for
 |          orientation='y'. A float indicates the relative position on the
 |          parent axes to put the new axes, 0.0 being the bottom (or left)
 |          and 1.0 being the top (or right).
 |      
 |      functions : 2-tuple of func, or Transform with an inverse
 |      
 |          If a 2-tuple of functions, the user specifies the transform
 |          function and its inverse.  i.e.
 |          ``functions=(lambda x: 2 / x, lambda x: 2 / x)`` would be an
 |          reciprocal transform with a factor of 2.
 |      
 |          The user can also directly supply a subclass of
 |          `.transforms.Transform` so long as it has an inverse.
 |      
 |          See :doc:`/gallery/subplots_axes_and_figures/secondary_axis`
 |          for examples of making these conversions.
 |      
 |      Returns
 |      -------
 |      ax : axes._secondary_axes.SecondaryAxis
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.axes.Axes` properties.
 |          Other miscellaneous axes parameters.
 |      
 |      
 |      Examples
 |      --------
 |      Add a secondary Axes that converts from radians to degrees
 |      
 |      .. plot::
 |      
 |          fig, ax = plt.subplots()
 |          ax.plot(range(1, 360, 5), range(1, 360, 5))
 |          ax.set_ylabel('degrees')
 |          secax = ax.secondary_yaxis('right', functions=(np.deg2rad,
 |                                                         np.rad2deg))
 |          secax.set_ylabel('radians')
 |  
 |  semilogx(self, *args, **kwargs)
 |      Make a plot with log scaling on the x axis.
 |      
 |      Call signatures::
 |      
 |          semilogx([x], y, [fmt], data=None, **kwargs)
 |          semilogx([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)
 |      
 |      This is just a thin wrapper around `.plot` which additionally changes
 |      the x-axis to log scaling. All of the concepts and parameters of plot
 |      can be used here as well.
 |      
 |      The additional parameters *base*, *subs*, and *nonpositive* control the
 |      x-axis properties. They are just forwarded to `.Axes.set_xscale`.
 |      
 |      Parameters
 |      ----------
 |      base : float, default: 10
 |          Base of the x logarithm.
 |      
 |      subs : array-like, optional
 |          The location of the minor xticks. If *None*, reasonable locations
 |          are automatically chosen depending on the number of decades in the
 |          plot. See `.Axes.set_xscale` for details.
 |      
 |      nonpositive : {'mask', 'clip'}, default: 'mask'
 |          Non-positive values in x can be masked as invalid, or clipped to a
 |          very small positive number.
 |      
 |      Returns
 |      -------
 |      list of `~.Line2D`
 |          Objects representing the plotted data.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          All parameters supported by `.plot`.
 |  
 |  semilogy(self, *args, **kwargs)
 |      Make a plot with log scaling on the y axis.
 |      
 |      Call signatures::
 |      
 |          semilogy([x], y, [fmt], data=None, **kwargs)
 |          semilogy([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)
 |      
 |      This is just a thin wrapper around `.plot` which additionally changes
 |      the y-axis to log scaling. All of the concepts and parameters of plot
 |      can be used here as well.
 |      
 |      The additional parameters *base*, *subs*, and *nonpositive* control the
 |      y-axis properties. They are just forwarded to `.Axes.set_yscale`.
 |      
 |      Parameters
 |      ----------
 |      base : float, default: 10
 |          Base of the y logarithm.
 |      
 |      subs : array-like, optional
 |          The location of the minor yticks. If *None*, reasonable locations
 |          are automatically chosen depending on the number of decades in the
 |          plot. See `.Axes.set_yscale` for details.
 |      
 |      nonpositive : {'mask', 'clip'}, default: 'mask'
 |          Non-positive values in y can be masked as invalid, or clipped to a
 |          very small positive number.
 |      
 |      Returns
 |      -------
 |      list of `~.Line2D`
 |          Objects representing the plotted data.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          All parameters supported by `.plot`.
 |  
 |  set_title(self, label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)
 |      Set a title for the Axes.
 |      
 |      Set one of the three available Axes titles. The available titles
 |      are positioned above the Axes in the center, flush with the left
 |      edge, and flush with the right edge.
 |      
 |      Parameters
 |      ----------
 |      label : str
 |          Text to use for the title
 |      
 |      fontdict : dict
 |          A dictionary controlling the appearance of the title text,
 |          the default *fontdict* is::
 |      
 |             {'fontsize': rcParams['axes.titlesize'],
 |              'fontweight': rcParams['axes.titleweight'],
 |              'color': rcParams['axes.titlecolor'],
 |              'verticalalignment': 'baseline',
 |              'horizontalalignment': loc}
 |      
 |      loc : {'center', 'left', 'right'}, default: :rc:`axes.titlelocation`
 |          Which title to set.
 |      
 |      y : float, default: :rc:`axes.titley`
 |          Vertical Axes loation for the title (1.0 is the top).  If
 |          None (the default), y is determined automatically to avoid
 |          decorators on the Axes.
 |      
 |      pad : float, default: :rc:`axes.titlepad`
 |          The offset of the title from the top of the Axes, in points.
 |      
 |      Returns
 |      -------
 |      `.Text`
 |          The matplotlib text instance representing the title
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `.Text` properties
 |          Other keyword arguments are text properties, see `.Text` for a list
 |          of valid text properties.
 |  
 |  specgram(self, x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None, scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None, *, data=None, **kwargs)
 |      Plot a spectrogram.
 |      
 |      Compute and plot a spectrogram of data in *x*.  Data are split into
 |      *NFFT* length segments and the spectrum of each section is
 |      computed.  The windowing function *window* is applied to each
 |      segment, and the amount of overlap of each segment is
 |      specified with *noverlap*. The spectrogram is plotted as a colormap
 |      (using imshow).
 |      
 |      Parameters
 |      ----------
 |      x : 1-D array or sequence
 |          Array or sequence containing the data.
 |      
 |      Fs : float, default: 2
 |          The sampling frequency (samples per time unit).  It is used to calculate
 |          the Fourier frequencies, *freqs*, in cycles per time unit.
 |      
 |      window : callable or ndarray, default: `.window_hanning`
 |          A function or a vector of length *NFFT*.  To create window vectors see
 |          `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,
 |          `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a
 |          function is passed as the argument, it must take a data segment as an
 |          argument and return the windowed version of the segment.
 |      
 |      sides : {'default', 'onesided', 'twosided'}, optional
 |          Which sides of the spectrum to return. 'default' is one-sided for real
 |          data and two-sided for complex data. 'onesided' forces the return of a
 |          one-sided spectrum, while 'twosided' forces two-sided.
 |      
 |      pad_to : int, optional
 |          The number of points to which the data segment is padded when performing
 |          the FFT.  This can be different from *NFFT*, which specifies the number
 |          of data points used.  While not increasing the actual resolution of the
 |          spectrum (the minimum distance between resolvable peaks), this can give
 |          more points in the plot, allowing for more detail. This corresponds to
 |          the *n* parameter in the call to fft(). The default is None, which sets
 |          *pad_to* equal to *NFFT*
 |      
 |      NFFT : int, default: 256
 |          The number of data points used in each block for the FFT.  A power 2 is
 |          most efficient.  This should *NOT* be used to get zero padding, or the
 |          scaling of the result will be incorrect; use *pad_to* for this instead.
 |      
 |      detrend : {'none', 'mean', 'linear'} or callable, default: 'none'
 |          The function applied to each segment before fft-ing, designed to remove
 |          the mean or linear trend.  Unlike in MATLAB, where the *detrend* parameter
 |          is a vector, in Matplotlib is it a function.  The :mod:`~matplotlib.mlab`
 |          module defines `.detrend_none`, `.detrend_mean`, and `.detrend_linear`,
 |          but you can use a custom function as well.  You can also use a string to
 |          choose one of the functions: 'none' calls `.detrend_none`. 'mean' calls
 |          `.detrend_mean`. 'linear' calls `.detrend_linear`.
 |      
 |      scale_by_freq : bool, default: True
 |          Whether the resulting density values should be scaled by the scaling
 |          frequency, which gives density in units of Hz^-1.  This allows for
 |          integration over the returned frequency values.  The default is True for
 |          MATLAB compatibility.
 |      
 |      mode : {'default', 'psd', 'magnitude', 'angle', 'phase'}
 |          What sort of spectrum to use.  Default is 'psd', which takes the
 |          power spectral density.  'magnitude' returns the magnitude
 |          spectrum.  'angle' returns the phase spectrum without unwrapping.
 |          'phase' returns the phase spectrum with unwrapping.
 |      
 |      noverlap : int, default: 128
 |          The number of points of overlap between blocks.
 |      
 |      scale : {'default', 'linear', 'dB'}
 |          The scaling of the values in the *spec*.  'linear' is no scaling.
 |          'dB' returns the values in dB scale.  When *mode* is 'psd',
 |          this is dB power (10 * log10).  Otherwise this is dB amplitude
 |          (20 * log10). 'default' is 'dB' if *mode* is 'psd' or
 |          'magnitude' and 'linear' otherwise.  This must be 'linear'
 |          if *mode* is 'angle' or 'phase'.
 |      
 |      Fc : int, default: 0
 |          The center frequency of *x*, which offsets the x extents of the
 |          plot to reflect the frequency range used when a signal is acquired
 |          and then filtered and downsampled to baseband.
 |      
 |      cmap : `.Colormap`, default: :rc:`image.cmap`
 |      
 |      xextent : *None* or (xmin, xmax)
 |          The image extent along the x-axis. The default sets *xmin* to the
 |          left border of the first bin (*spectrum* column) and *xmax* to the
 |          right border of the last bin. Note that for *noverlap>0* the width
 |          of the bins is smaller than those of the segments.
 |      
 |      **kwargs
 |          Additional keyword arguments are passed on to `~.axes.Axes.imshow`
 |          which makes the specgram image. The origin keyword argument
 |          is not supported.
 |      
 |      Returns
 |      -------
 |      spectrum : 2D array
 |          Columns are the periodograms of successive segments.
 |      
 |      freqs : 1-D array
 |          The frequencies corresponding to the rows in *spectrum*.
 |      
 |      t : 1-D array
 |          The times corresponding to midpoints of segments (i.e., the columns
 |          in *spectrum*).
 |      
 |      im : `.AxesImage`
 |          The image created by imshow containing the spectrogram.
 |      
 |      See Also
 |      --------
 |      psd
 |          Differs in the default overlap; in returning the mean of the
 |          segment periodograms; in not returning times; and in generating a
 |          line plot instead of colormap.
 |      magnitude_spectrum
 |          A single spectrum, similar to having a single segment when *mode*
 |          is 'magnitude'. Plots a line instead of a colormap.
 |      angle_spectrum
 |          A single spectrum, similar to having a single segment when *mode*
 |          is 'angle'. Plots a line instead of a colormap.
 |      phase_spectrum
 |          A single spectrum, similar to having a single segment when *mode*
 |          is 'phase'. Plots a line instead of a colormap.
 |      
 |      Notes
 |      -----
 |      The parameters *detrend* and *scale_by_freq* do only apply when *mode*
 |      is set to 'psd'.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  spy(self, Z, precision=0, marker=None, markersize=None, aspect='equal', origin='upper', **kwargs)
 |      Plot the sparsity pattern of a 2D array.
 |      
 |      This visualizes the non-zero values of the array.
 |      
 |      Two plotting styles are available: image and marker. Both
 |      are available for full arrays, but only the marker style
 |      works for `scipy.sparse.spmatrix` instances.
 |      
 |      **Image style**
 |      
 |      If *marker* and *markersize* are *None*, `~.Axes.imshow` is used. Any
 |      extra remaining keyword arguments are passed to this method.
 |      
 |      **Marker style**
 |      
 |      If *Z* is a `scipy.sparse.spmatrix` or *marker* or *markersize* are
 |      *None*, a `.Line2D` object will be returned with the value of marker
 |      determining the marker type, and any remaining keyword arguments
 |      passed to `~.Axes.plot`.
 |      
 |      Parameters
 |      ----------
 |      Z : (M, N) array-like
 |          The array to be plotted.
 |      
 |      precision : float or 'present', default: 0
 |          If *precision* is 0, any non-zero value will be plotted. Otherwise,
 |          values of :math:`|Z| > precision` will be plotted.
 |      
 |          For `scipy.sparse.spmatrix` instances, you can also
 |          pass 'present'. In this case any value present in the array
 |          will be plotted, even if it is identically zero.
 |      
 |      aspect : {'equal', 'auto', None} or float, default: 'equal'
 |          The aspect ratio of the Axes.  This parameter is particularly
 |          relevant for images since it determines whether data pixels are
 |          square.
 |      
 |          This parameter is a shortcut for explicitly calling
 |          `.Axes.set_aspect`. See there for further details.
 |      
 |          - 'equal': Ensures an aspect ratio of 1. Pixels will be square.
 |          - 'auto': The Axes is kept fixed and the aspect is adjusted so
 |            that the data fit in the Axes. In general, this will result in
 |            non-square pixels.
 |          - *None*: Use :rc:`image.aspect`.
 |      
 |      origin : {'upper', 'lower'}, default: :rc:`image.origin`
 |          Place the [0, 0] index of the array in the upper left or lower left
 |          corner of the Axes. The convention 'upper' is typically used for
 |          matrices and images.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.image.AxesImage` or `.Line2D`
 |          The return type depends on the plotting style (see above).
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          The supported additional parameters depend on the plotting style.
 |      
 |          For the image style, you can pass the following additional
 |          parameters of `~.Axes.imshow`:
 |      
 |          - *cmap*
 |          - *alpha*
 |          - *url*
 |          - any `.Artist` properties (passed on to the `.AxesImage`)
 |      
 |          For the marker style, you can pass any `.Line2D` property except
 |          for *linestyle*:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |  
 |  stackplot(axes, x, *args, labels=(), colors=None, baseline='zero', data=None, **kwargs)
 |      Draw a stacked area plot.
 |      
 |      Parameters
 |      ----------
 |      x : (N,) array-like
 |      
 |      y : (M, N) array-like
 |          The data is assumed to be unstacked. Each of the following
 |          calls is legal::
 |      
 |              stackplot(x, y)           # where y has shape (M, N)
 |              stackplot(x, y1, y2, y3)  # where y1, y2, y3, y4 have length N
 |      
 |      baseline : {'zero', 'sym', 'wiggle', 'weighted_wiggle'}
 |          Method used to calculate the baseline:
 |      
 |          - ``'zero'``: Constant zero baseline, i.e. a simple stacked plot.
 |          - ``'sym'``:  Symmetric around zero and is sometimes called
 |            'ThemeRiver'.
 |          - ``'wiggle'``: Minimizes the sum of the squared slopes.
 |          - ``'weighted_wiggle'``: Does the same but weights to account for
 |            size of each layer. It is also called 'Streamgraph'-layout. More
 |            details can be found at http://leebyron.com/streamgraph/.
 |      
 |      labels : list of str, optional
 |          A sequence of labels to assign to each data series. If unspecified,
 |          then no labels will be applied to artists.
 |      
 |      colors : list of color, optional
 |          A sequence of colors to be cycled through and used to color the stacked
 |          areas. The sequence need not be exactly the same length as the number
 |          of provided *y*, in which case the colors will repeat from the
 |          beginning.
 |      
 |          If not specified, the colors from the Axes property cycle will be used.
 |      
 |      **kwargs
 |          All other keyword arguments are passed to `.Axes.fill_between`.
 |      
 |      Returns
 |      -------
 |      list of `.PolyCollection`
 |          A list of `.PolyCollection` instances, one for each element in the
 |          stacked area plot.
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  stairs(self, values, edges=None, *, orientation='vertical', baseline=0, fill=False, data=None, **kwargs)
 |      A stepwise constant function as a line with bounding edges
 |      or a filled plot.
 |      
 |      Parameters
 |      ----------
 |      values : array-like
 |          The step heights.
 |      
 |      edges : array-like
 |          The edge positions, with ``len(edges) == len(vals) + 1``,
 |          between which the curve takes on vals values.
 |      
 |      orientation : {'vertical', 'horizontal'}, default: 'vertical'
 |          The direction of the steps. Vertical means that *values* are along
 |          the y-axis, and edges are along the x-axis.
 |      
 |      baseline : float, array-like or None, default: 0
 |          The bottom value of the bounding edges or when
 |          ``fill=True``, position of lower edge. If *fill* is
 |          True or an array is passed to *baseline*, a closed
 |          path is drawn.
 |      
 |      fill : bool, default: False
 |          Whether the area under the step curve should be filled.
 |      
 |      Returns
 |      -------
 |      StepPatch : `matplotlib.patches.StepPatch`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          `~matplotlib.patches.StepPatch` properties
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  stem(self, *args, linefmt=None, markerfmt=None, basefmt=None, bottom=0, label=None, use_line_collection=True, orientation='vertical', data=None)
 |      Create a stem plot.
 |      
 |      A stem plot draws lines perpendicular to a baseline at each location
 |      *locs* from the baseline to *heads*, and places a marker there. For
 |      vertical stem plots (the default), the *locs* are *x* positions, and
 |      the *heads* are *y* values. For horizontal stem plots, the *locs* are
 |      *y* positions, and the *heads* are *x* values.
 |      
 |      Call signature::
 |      
 |        stem([locs,] heads, linefmt=None, markerfmt=None, basefmt=None)
 |      
 |      The *locs*-positions are optional. The formats may be provided either
 |      as positional or as keyword-arguments.
 |      
 |      Parameters
 |      ----------
 |      locs : array-like, default: (0, 1, ..., len(heads) - 1)
 |          For vertical stem plots, the x-positions of the stems.
 |          For horizontal stem plots, the y-positions of the stems.
 |      
 |      heads : array-like
 |          For vertical stem plots, the y-values of the stem heads.
 |          For horizontal stem plots, the x-values of the stem heads.
 |      
 |      linefmt : str, optional
 |          A string defining the color and/or linestyle of the vertical lines:
 |      
 |          =========  =============
 |          Character  Line Style
 |          =========  =============
 |          ``'-'``    solid line
 |          ``'--'``   dashed line
 |          ``'-.'``   dash-dot line
 |          ``':'``    dotted line
 |          =========  =============
 |      
 |          Default: 'C0-', i.e. solid line with the first color of the color
 |          cycle.
 |      
 |          Note: Markers specified through this parameter (e.g. 'x') will be
 |          silently ignored (unless using ``use_line_collection=False``).
 |          Instead, markers should be specified using *markerfmt*.
 |      
 |      markerfmt : str, optional
 |          A string defining the color and/or shape of the markers at the stem
 |          heads.  Default: 'C0o', i.e. filled circles with the first color of
 |          the color cycle.
 |      
 |      basefmt : str, default: 'C3-' ('C2-' in classic mode)
 |          A format string defining the properties of the baseline.
 |      
 |      orientation : str, default: 'vertical'
 |          If 'vertical', will produce a plot with stems oriented vertically,
 |          otherwise the stems will be oriented horizontally.
 |      
 |      bottom : float, default: 0
 |          The y/x-position of the baseline (depending on orientation).
 |      
 |      label : str, default: None
 |          The label to use for the stems in legends.
 |      
 |      use_line_collection : bool, default: True
 |          If ``True``, store and plot the stem lines as a
 |          `~.collections.LineCollection` instead of individual lines, which
 |          significantly increases performance.  If ``False``, defaults to the
 |          old behavior of using a list of `.Line2D` objects.  This parameter
 |          may be deprecated in the future.
 |      
 |      Returns
 |      -------
 |      `.StemContainer`
 |          The container may be treated like a tuple
 |          (*markerline*, *stemlines*, *baseline*)
 |      
 |      Notes
 |      -----
 |      .. seealso::
 |          The MATLAB function
 |          `stem <https://www.mathworks.com/help/matlab/ref/stem.html>`_
 |          which inspired this method.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          every other argument can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception).
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  step(self, x, y, *args, where='pre', data=None, **kwargs)
 |      Make a step plot.
 |      
 |      Call signatures::
 |      
 |          step(x, y, [fmt], *, data=None, where='pre', **kwargs)
 |          step(x, y, [fmt], x2, y2, [fmt2], ..., *, where='pre', **kwargs)
 |      
 |      This is just a thin wrapper around `.plot` which changes some
 |      formatting options. Most of the concepts and parameters of plot can be
 |      used here as well.
 |      
 |      .. note::
 |      
 |          This method uses a standard plot with a step drawstyle: The *x*
 |          values are the reference positions and steps extend left/right/both
 |          directions depending on *where*.
 |      
 |          For the common case where you know the values and edges of the
 |          steps, use `~.Axes.stairs` instead.
 |      
 |      Parameters
 |      ----------
 |      x : array-like
 |          1D sequence of x positions. It is assumed, but not checked, that
 |          it is uniformly increasing.
 |      
 |      y : array-like
 |          1D sequence of y levels.
 |      
 |      fmt : str, optional
 |          A format string, e.g. 'g' for a green line. See `.plot` for a more
 |          detailed description.
 |      
 |          Note: While full format strings are accepted, it is recommended to
 |          only specify the color. Line styles are currently ignored (use
 |          the keyword argument *linestyle* instead). Markers are accepted
 |          and plotted on the given positions, however, this is a rarely
 |          needed feature for step plots.
 |      
 |      data : indexable object, optional
 |          An object with labelled data. If given, provide the label names to
 |          plot in *x* and *y*.
 |      
 |      where : {'pre', 'post', 'mid'}, default: 'pre'
 |          Define where the steps should be placed:
 |      
 |          - 'pre': The y value is continued constantly to the left from
 |            every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the
 |            value ``y[i]``.
 |          - 'post': The y value is continued constantly to the right from
 |            every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the
 |            value ``y[i]``.
 |          - 'mid': Steps occur half-way between the *x* positions.
 |      
 |      Returns
 |      -------
 |      list of `.Line2D`
 |          Objects representing the plotted data.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Additional parameters are the same as those for `.plot`.
 |      
 |      Notes
 |      -----
 |      .. [notes section required to get data note injection right]
 |  
 |  streamplot(axes, x, y, u, v, density=1, linewidth=None, color=None, cmap=None, norm=None, arrowsize=1, arrowstyle='-|>', minlength=0.1, transform=None, zorder=None, start_points=None, maxlength=4.0, integration_direction='both', *, data=None)
 |      Draw streamlines of a vector flow.
 |      
 |      Parameters
 |      ----------
 |      x, y : 1D/2D arrays
 |          Evenly spaced strictly increasing arrays to make a grid.
 |      u, v : 2D arrays
 |          *x* and *y*-velocities. The number of rows and columns must match
 |          the length of *y* and *x*, respectively.
 |      density : float or (float, float)
 |          Controls the closeness of streamlines. When ``density = 1``, the domain
 |          is divided into a 30x30 grid. *density* linearly scales this grid.
 |          Each cell in the grid can have, at most, one traversing streamline.
 |          For different densities in each direction, use a tuple
 |          (density_x, density_y).
 |      linewidth : float or 2D array
 |          The width of the stream lines. With a 2D array the line width can be
 |          varied across the grid. The array must have the same shape as *u*
 |          and *v*.
 |      color : color or 2D array
 |          The streamline color. If given an array, its values are converted to
 |          colors using *cmap* and *norm*.  The array must have the same shape
 |          as *u* and *v*.
 |      cmap : `~matplotlib.colors.Colormap`
 |          Colormap used to plot streamlines and arrows. This is only used if
 |          *color* is an array.
 |      norm : `~matplotlib.colors.Normalize`
 |          Normalize object used to scale luminance data to 0, 1. If ``None``,
 |          stretch (min, max) to (0, 1). This is only used if *color* is an array.
 |      arrowsize : float
 |          Scaling factor for the arrow size.
 |      arrowstyle : str
 |          Arrow style specification.
 |          See `~matplotlib.patches.FancyArrowPatch`.
 |      minlength : float
 |          Minimum length of streamline in axes coordinates.
 |      start_points : Nx2 array
 |          Coordinates of starting points for the streamlines in data coordinates
 |          (the same coordinates as the *x* and *y* arrays).
 |      zorder : int
 |          The zorder of the stream lines and arrows.
 |          Artists with lower zorder values are drawn first.
 |      maxlength : float
 |          Maximum length of streamline in axes coordinates.
 |      integration_direction : {'forward', 'backward', 'both'}, default: 'both'
 |          Integrate the streamline in forward, backward or both directions.
 |      
 |      Returns
 |      -------
 |      StreamplotSet
 |          Container object with attributes
 |      
 |          - ``lines``: `.LineCollection` of streamlines
 |      
 |          - ``arrows``: `.PatchCollection` containing `.FancyArrowPatch`
 |            objects representing the arrows half-way along stream lines.
 |      
 |          This container will probably change in the future to allow changes
 |          to the colormap, alpha, etc. for both lines and arrows, but these
 |          changes should be backward compatible.
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y*, *u*, *v*, *start_points*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  table(ax, cellText=None, cellColours=None, cellLoc='right', colWidths=None, rowLabels=None, rowColours=None, rowLoc='left', colLabels=None, colColours=None, colLoc='center', loc='bottom', bbox=None, edges='closed', **kwargs)
 |      Add a table to an `~.axes.Axes`.
 |      
 |      At least one of *cellText* or *cellColours* must be specified. These
 |      parameters must be 2D lists, in which the outer lists define the rows and
 |      the inner list define the column values per row. Each row must have the
 |      same number of elements.
 |      
 |      The table can optionally have row and column headers, which are configured
 |      using *rowLabels*, *rowColours*, *rowLoc* and *colLabels*, *colColours*,
 |      *colLoc* respectively.
 |      
 |      For finer grained control over tables, use the `.Table` class and add it to
 |      the axes with `.Axes.add_table`.
 |      
 |      Parameters
 |      ----------
 |      cellText : 2D list of str, optional
 |          The texts to place into the table cells.
 |      
 |          *Note*: Line breaks in the strings are currently not accounted for and
 |          will result in the text exceeding the cell boundaries.
 |      
 |      cellColours : 2D list of colors, optional
 |          The background colors of the cells.
 |      
 |      cellLoc : {'left', 'center', 'right'}, default: 'right'
 |          The alignment of the text within the cells.
 |      
 |      colWidths : list of float, optional
 |          The column widths in units of the axes. If not given, all columns will
 |          have a width of *1 / ncols*.
 |      
 |      rowLabels : list of str, optional
 |          The text of the row header cells.
 |      
 |      rowColours : list of colors, optional
 |          The colors of the row header cells.
 |      
 |      rowLoc : {'left', 'center', 'right'}, default: 'left'
 |          The text alignment of the row header cells.
 |      
 |      colLabels : list of str, optional
 |          The text of the column header cells.
 |      
 |      colColours : list of colors, optional
 |          The colors of the column header cells.
 |      
 |      colLoc : {'left', 'center', 'right'}, default: 'left'
 |          The text alignment of the column header cells.
 |      
 |      loc : str, optional
 |          The position of the cell with respect to *ax*. This must be one of
 |          the `~.Table.codes`.
 |      
 |      bbox : `.Bbox`, optional
 |          A bounding box to draw the table into. If this is not *None*, this
 |          overrides *loc*.
 |      
 |      edges : substring of 'BRTL' or {'open', 'closed', 'horizontal', 'vertical'}
 |          The cell edges to be drawn with a line. See also
 |          `~.Cell.visible_edges`.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.table.Table`
 |          The created table.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          `.Table` properties.
 |      
 |      Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          contains: unknown
 |          figure: `.Figure`
 |          fontsize: float
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          transform: `.Transform`
 |          url: str
 |          visible: bool
 |          zorder: float
 |  
 |  text(self, x, y, s, fontdict=None, **kwargs)
 |      Add text to the Axes.
 |      
 |      Add the text *s* to the Axes at location *x*, *y* in data coordinates.
 |      
 |      Parameters
 |      ----------
 |      x, y : float
 |          The position to place the text. By default, this is in data
 |          coordinates. The coordinate system can be changed using the
 |          *transform* parameter.
 |      
 |      s : str
 |          The text.
 |      
 |      fontdict : dict, default: None
 |          A dictionary to override the default text properties. If fontdict
 |          is None, the defaults are determined by `.rcParams`.
 |      
 |      Returns
 |      -------
 |      `.Text`
 |          The created `.Text` instance.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.text.Text` properties.
 |          Other miscellaneous text parameters.
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          backgroundcolor: color
 |          bbox: dict with properties for `.patches.FancyBboxPatch`
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          figure: `.Figure`
 |          fontfamily or family: {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}
 |          fontproperties or font or font_properties: `.font_manager.FontProperties` or `str` or `pathlib.Path`
 |          fontsize or size: float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}
 |          fontstretch or stretch: {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}
 |          fontstyle or style: {'normal', 'italic', 'oblique'}
 |          fontvariant or variant: {'normal', 'small-caps'}
 |          fontweight or weight: {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}
 |          gid: str
 |          horizontalalignment or ha: {'center', 'right', 'left'}
 |          in_layout: bool
 |          label: object
 |          linespacing: float (multiple of font size)
 |          math_fontfamily: str
 |          multialignment or ma: {'left', 'right', 'center'}
 |          path_effects: `.AbstractPathEffect`
 |          picker: None or bool or float or callable
 |          position: (float, float)
 |          rasterized: bool
 |          rotation: float or {'vertical', 'horizontal'}
 |          rotation_mode: {None, 'default', 'anchor'}
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          text: object
 |          transform: `.Transform`
 |          transform_rotates_text: bool
 |          url: str
 |          usetex: bool or None
 |          verticalalignment or va: {'center', 'top', 'bottom', 'baseline', 'center_baseline'}
 |          visible: bool
 |          wrap: bool
 |          x: float
 |          y: float
 |          zorder: float
 |      
 |      Examples
 |      --------
 |      Individual keyword arguments can be used to override any given
 |      parameter::
 |      
 |          >>> text(x, y, s, fontsize=12)
 |      
 |      The default transform specifies that text is in data coords,
 |      alternatively, you can specify text in axis coords ((0, 0) is
 |      lower-left and (1, 1) is upper-right).  The example below places
 |      text in the center of the Axes::
 |      
 |          >>> text(0.5, 0.5, 'matplotlib', horizontalalignment='center',
 |          ...      verticalalignment='center', transform=ax.transAxes)
 |      
 |      You can put a rectangular box around the text instance (e.g., to
 |      set a background color) by using the keyword *bbox*.  *bbox* is
 |      a dictionary of `~matplotlib.patches.Rectangle`
 |      properties.  For example::
 |      
 |          >>> text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))
 |  
 |  tricontour(ax, *args, **kwargs)
 |      Draw contour lines on an unstructured triangular grid.
 |      
 |      The triangulation can be specified in one of two ways; either ::
 |      
 |          tricontour(triangulation, ...)
 |      
 |      where *triangulation* is a `.Triangulation` object, or ::
 |      
 |          tricontour(x, y, ...)
 |          tricontour(x, y, triangles, ...)
 |          tricontour(x, y, triangles=triangles, ...)
 |          tricontour(x, y, mask=mask, ...)
 |          tricontour(x, y, triangles, mask=mask, ...)
 |      
 |      in which case a `.Triangulation` object will be created.  See that class'
 |      docstring for an explanation of these cases.
 |      
 |      The remaining arguments may be::
 |      
 |          tricontour(..., Z)
 |      
 |      where *Z* is the array of values to contour, one per point in the
 |      triangulation.  The level values are chosen automatically.
 |      
 |      ::
 |      
 |          tricontour(..., Z, levels)
 |      
 |      contour up to *levels+1* automatically chosen contour levels (*levels*
 |      intervals).
 |      
 |      ::
 |      
 |          tricontour(..., Z, levels)
 |      
 |      draw contour lines at the values specified in sequence *levels*, which must
 |      be in increasing order.
 |      
 |      ::
 |      
 |          tricontour(Z, **kwargs)
 |      
 |      Use keyword arguments to control colors, linewidth, origin, cmap ... see below
 |      for more details.
 |      
 |      Parameters
 |      ----------
 |      triangulation : `.Triangulation`, optional
 |          The unstructured triangular grid.
 |      
 |          If specified, then *x*, *y*, *triangles*, and *mask* are not accepted.
 |      
 |      x, y : array-like, optional
 |          The coordinates of the values in *Z*.
 |      
 |      triangles : (ntri, 3) array-like of int, optional
 |          For each triangle, the indices of the three points that make up the
 |          triangle, ordered in an anticlockwise manner.  If not specified, the
 |          Delaunay triangulation is calculated.
 |      
 |      mask : (ntri,) array-like of bool, optional
 |          Which triangles are masked out.
 |      
 |      Z : 2D array-like
 |          The height values over which the contour is drawn.
 |      
 |      levels : int or array-like, optional
 |          Determines the number and positions of the contour lines / regions.
 |      
 |          If an int *n*, use `~matplotlib.ticker.MaxNLocator`, which tries to
 |          automatically choose no more than *n+1* "nice" contour levels between
 |          *vmin* and *vmax*.
 |      
 |          If array-like, draw contour lines at the specified levels.  The values must
 |          be in increasing order.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.tri.TriContourSet`
 |      
 |      Other Parameters
 |      ----------------
 |      colors : color string or sequence of colors, optional
 |          The colors of the levels, i.e., the contour lines.
 |      
 |          The sequence is cycled for the levels in ascending order. If the sequence
 |          is shorter than the number of levels, it's repeated.
 |      
 |          As a shortcut, single color strings may be used in place of one-element
 |          lists, i.e. ``'red'`` instead of ``['red']`` to color all levels with the
 |          same color. This shortcut does only work for color strings, not for other
 |          ways of specifying colors.
 |      
 |          By default (value *None*), the colormap specified by *cmap* will be used.
 |      
 |      alpha : float, default: 1
 |          The alpha blending value, between 0 (transparent) and 1 (opaque).
 |      
 |      cmap : str or `.Colormap`, default: :rc:`image.cmap`
 |          A `.Colormap` instance or registered colormap name. The colormap maps the
 |          level values to colors.
 |      
 |          If both *colors* and *cmap* are given, an error is raised.
 |      
 |      norm : `~matplotlib.colors.Normalize`, optional
 |          If a colormap is used, the `.Normalize` instance scales the level values to
 |          the canonical colormap range [0, 1] for mapping to colors. If not given,
 |          the default linear scaling is used.
 |      
 |      vmin, vmax : float, optional
 |          If not *None*, either or both of these values will be supplied to
 |          the `.Normalize` instance, overriding the default color scaling
 |          based on *levels*.
 |      
 |      origin : {*None*, 'upper', 'lower', 'image'}, default: None
 |          Determines the orientation and exact position of *Z* by specifying the
 |          position of ``Z[0, 0]``.  This is only relevant, if *X*, *Y* are not given.
 |      
 |          - *None*: ``Z[0, 0]`` is at X=0, Y=0 in the lower left corner.
 |          - 'lower': ``Z[0, 0]`` is at X=0.5, Y=0.5 in the lower left corner.
 |          - 'upper': ``Z[0, 0]`` is at X=N+0.5, Y=0.5 in the upper left corner.
 |          - 'image': Use the value from :rc:`image.origin`.
 |      
 |      extent : (x0, x1, y0, y1), optional
 |          If *origin* is not *None*, then *extent* is interpreted as in `.imshow`: it
 |          gives the outer pixel boundaries. In this case, the position of Z[0, 0] is
 |          the center of the pixel, not a corner. If *origin* is *None*, then
 |          (*x0*, *y0*) is the position of Z[0, 0], and (*x1*, *y1*) is the position
 |          of Z[-1, -1].
 |      
 |          This argument is ignored if *X* and *Y* are specified in the call to
 |          contour.
 |      
 |      locator : ticker.Locator subclass, optional
 |          The locator is used to determine the contour levels if they are not given
 |          explicitly via *levels*.
 |          Defaults to `~.ticker.MaxNLocator`.
 |      
 |      extend : {'neither', 'both', 'min', 'max'}, default: 'neither'
 |          Determines the ``tricontour``-coloring of values that are outside the
 |          *levels* range.
 |      
 |          If 'neither', values outside the *levels* range are not colored.  If 'min',
 |          'max' or 'both', color the values below, above or below and above the
 |          *levels* range.
 |      
 |          Values below ``min(levels)`` and above ``max(levels)`` are mapped to the
 |          under/over values of the `.Colormap`. Note that most colormaps do not have
 |          dedicated colors for these by default, so that the over and under values
 |          are the edge values of the colormap.  You may want to set these values
 |          explicitly using `.Colormap.set_under` and `.Colormap.set_over`.
 |      
 |          .. note::
 |      
 |              An existing `.TriContourSet` does not get notified if properties of its
 |              colormap are changed. Therefore, an explicit call to
 |              `.ContourSet.changed()` is needed after modifying the colormap. The
 |              explicit call can be left out, if a colorbar is assigned to the
 |              `.TriContourSet` because it internally calls `.ContourSet.changed()`.
 |      
 |      xunits, yunits : registered units, optional
 |          Override axis units by specifying an instance of a
 |          :class:`matplotlib.units.ConversionInterface`.
 |      
 |      antialiased : bool, optional
 |          Enable antialiasing, overriding the defaults.  For
 |          filled contours, the default is *True*.  For line contours,
 |          it is taken from :rc:`lines.antialiased`.
 |      
 |      linewidths : float or array-like, default: :rc:`contour.linewidth`
 |          The line width of the contour lines.
 |      
 |          If a number, all levels will be plotted with this linewidth.
 |      
 |          If a sequence, the levels in ascending order will be plotted with
 |          the linewidths in the order specified.
 |      
 |          If None, this falls back to :rc:`lines.linewidth`.
 |      
 |      linestyles : {*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional
 |          If *linestyles* is *None*, the default is 'solid' unless the lines are
 |          monochrome.  In that case, negative contours will take their linestyle
 |          from :rc:`contour.negative_linestyle` setting.
 |      
 |          *linestyles* can also be an iterable of the above strings specifying a
 |          set of linestyles to be used. If this iterable is shorter than the
 |          number of contour levels it will be repeated as necessary.
 |  
 |  tricontourf(ax, *args, **kwargs)
 |      Draw contour regions on an unstructured triangular grid.
 |      
 |      The triangulation can be specified in one of two ways; either ::
 |      
 |          tricontourf(triangulation, ...)
 |      
 |      where *triangulation* is a `.Triangulation` object, or ::
 |      
 |          tricontourf(x, y, ...)
 |          tricontourf(x, y, triangles, ...)
 |          tricontourf(x, y, triangles=triangles, ...)
 |          tricontourf(x, y, mask=mask, ...)
 |          tricontourf(x, y, triangles, mask=mask, ...)
 |      
 |      in which case a `.Triangulation` object will be created.  See that class'
 |      docstring for an explanation of these cases.
 |      
 |      The remaining arguments may be::
 |      
 |          tricontourf(..., Z)
 |      
 |      where *Z* is the array of values to contour, one per point in the
 |      triangulation.  The level values are chosen automatically.
 |      
 |      ::
 |      
 |          tricontourf(..., Z, levels)
 |      
 |      contour up to *levels+1* automatically chosen contour levels (*levels*
 |      intervals).
 |      
 |      ::
 |      
 |          tricontourf(..., Z, levels)
 |      
 |      draw contour regions at the values specified in sequence *levels*, which must
 |      be in increasing order.
 |      
 |      ::
 |      
 |          tricontourf(Z, **kwargs)
 |      
 |      Use keyword arguments to control colors, linewidth, origin, cmap ... see below
 |      for more details.
 |      
 |      Parameters
 |      ----------
 |      triangulation : `.Triangulation`, optional
 |          The unstructured triangular grid.
 |      
 |          If specified, then *x*, *y*, *triangles*, and *mask* are not accepted.
 |      
 |      x, y : array-like, optional
 |          The coordinates of the values in *Z*.
 |      
 |      triangles : (ntri, 3) array-like of int, optional
 |          For each triangle, the indices of the three points that make up the
 |          triangle, ordered in an anticlockwise manner.  If not specified, the
 |          Delaunay triangulation is calculated.
 |      
 |      mask : (ntri,) array-like of bool, optional
 |          Which triangles are masked out.
 |      
 |      Z : 2D array-like
 |          The height values over which the contour is drawn.
 |      
 |      levels : int or array-like, optional
 |          Determines the number and positions of the contour lines / regions.
 |      
 |          If an int *n*, use `~matplotlib.ticker.MaxNLocator`, which tries to
 |          automatically choose no more than *n+1* "nice" contour levels between
 |          *vmin* and *vmax*.
 |      
 |          If array-like, draw contour lines at the specified levels.  The values must
 |          be in increasing order.
 |      
 |      Returns
 |      -------
 |      `~matplotlib.tri.TriContourSet`
 |      
 |      Other Parameters
 |      ----------------
 |      colors : color string or sequence of colors, optional
 |          The colors of the levels, i.e., the contour regions.
 |      
 |          The sequence is cycled for the levels in ascending order. If the sequence
 |          is shorter than the number of levels, it's repeated.
 |      
 |          As a shortcut, single color strings may be used in place of one-element
 |          lists, i.e. ``'red'`` instead of ``['red']`` to color all levels with the
 |          same color. This shortcut does only work for color strings, not for other
 |          ways of specifying colors.
 |      
 |          By default (value *None*), the colormap specified by *cmap* will be used.
 |      
 |      alpha : float, default: 1
 |          The alpha blending value, between 0 (transparent) and 1 (opaque).
 |      
 |      cmap : str or `.Colormap`, default: :rc:`image.cmap`
 |          A `.Colormap` instance or registered colormap name. The colormap maps the
 |          level values to colors.
 |      
 |          If both *colors* and *cmap* are given, an error is raised.
 |      
 |      norm : `~matplotlib.colors.Normalize`, optional
 |          If a colormap is used, the `.Normalize` instance scales the level values to
 |          the canonical colormap range [0, 1] for mapping to colors. If not given,
 |          the default linear scaling is used.
 |      
 |      vmin, vmax : float, optional
 |          If not *None*, either or both of these values will be supplied to
 |          the `.Normalize` instance, overriding the default color scaling
 |          based on *levels*.
 |      
 |      origin : {*None*, 'upper', 'lower', 'image'}, default: None
 |          Determines the orientation and exact position of *Z* by specifying the
 |          position of ``Z[0, 0]``.  This is only relevant, if *X*, *Y* are not given.
 |      
 |          - *None*: ``Z[0, 0]`` is at X=0, Y=0 in the lower left corner.
 |          - 'lower': ``Z[0, 0]`` is at X=0.5, Y=0.5 in the lower left corner.
 |          - 'upper': ``Z[0, 0]`` is at X=N+0.5, Y=0.5 in the upper left corner.
 |          - 'image': Use the value from :rc:`image.origin`.
 |      
 |      extent : (x0, x1, y0, y1), optional
 |          If *origin* is not *None*, then *extent* is interpreted as in `.imshow`: it
 |          gives the outer pixel boundaries. In this case, the position of Z[0, 0] is
 |          the center of the pixel, not a corner. If *origin* is *None*, then
 |          (*x0*, *y0*) is the position of Z[0, 0], and (*x1*, *y1*) is the position
 |          of Z[-1, -1].
 |      
 |          This argument is ignored if *X* and *Y* are specified in the call to
 |          contour.
 |      
 |      locator : ticker.Locator subclass, optional
 |          The locator is used to determine the contour levels if they are not given
 |          explicitly via *levels*.
 |          Defaults to `~.ticker.MaxNLocator`.
 |      
 |      extend : {'neither', 'both', 'min', 'max'}, default: 'neither'
 |          Determines the ``tricontourf``-coloring of values that are outside the
 |          *levels* range.
 |      
 |          If 'neither', values outside the *levels* range are not colored.  If 'min',
 |          'max' or 'both', color the values below, above or below and above the
 |          *levels* range.
 |      
 |          Values below ``min(levels)`` and above ``max(levels)`` are mapped to the
 |          under/over values of the `.Colormap`. Note that most colormaps do not have
 |          dedicated colors for these by default, so that the over and under values
 |          are the edge values of the colormap.  You may want to set these values
 |          explicitly using `.Colormap.set_under` and `.Colormap.set_over`.
 |      
 |          .. note::
 |      
 |              An existing `.TriContourSet` does not get notified if properties of its
 |              colormap are changed. Therefore, an explicit call to
 |              `.ContourSet.changed()` is needed after modifying the colormap. The
 |              explicit call can be left out, if a colorbar is assigned to the
 |              `.TriContourSet` because it internally calls `.ContourSet.changed()`.
 |      
 |      xunits, yunits : registered units, optional
 |          Override axis units by specifying an instance of a
 |          :class:`matplotlib.units.ConversionInterface`.
 |      
 |      antialiased : bool, optional
 |          Enable antialiasing, overriding the defaults.  For
 |          filled contours, the default is *True*.  For line contours,
 |          it is taken from :rc:`lines.antialiased`.
 |      
 |      hatches : list[str], optional
 |          A list of cross hatch patterns to use on the filled areas.
 |          If None, no hatching will be added to the contour.
 |          Hatching is supported in the PostScript, PDF, SVG and Agg
 |          backends only.
 |      
 |      Notes
 |      -----
 |      `.tricontourf` fills intervals that are closed at the top; that is, for
 |      boundaries *z1* and *z2*, the filled region is::
 |      
 |          z1 < Z <= z2
 |      
 |      except for the lowest interval, which is closed on both sides (i.e. it
 |      includes the lowest value).
 |  
 |  tripcolor(ax, *args, alpha=1.0, norm=None, cmap=None, vmin=None, vmax=None, shading='flat', facecolors=None, **kwargs)
 |      Create a pseudocolor plot of an unstructured triangular grid.
 |      
 |      The triangulation can be specified in one of two ways; either::
 |      
 |        tripcolor(triangulation, ...)
 |      
 |      where triangulation is a `.Triangulation` object, or
 |      
 |      ::
 |      
 |        tripcolor(x, y, ...)
 |        tripcolor(x, y, triangles, ...)
 |        tripcolor(x, y, triangles=triangles, ...)
 |        tripcolor(x, y, mask=mask, ...)
 |        tripcolor(x, y, triangles, mask=mask, ...)
 |      
 |      in which case a Triangulation object will be created.  See `.Triangulation`
 |      for a explanation of these possibilities.
 |      
 |      The next argument must be *C*, the array of color values, either
 |      one per point in the triangulation if color values are defined at
 |      points, or one per triangle in the triangulation if color values
 |      are defined at triangles. If there are the same number of points
 |      and triangles in the triangulation it is assumed that color
 |      values are defined at points; to force the use of color values at
 |      triangles use the kwarg ``facecolors=C`` instead of just ``C``.
 |      
 |      *shading* may be 'flat' (the default) or 'gouraud'. If *shading*
 |      is 'flat' and C values are defined at points, the color values
 |      used for each triangle are from the mean C of the triangle's
 |      three points. If *shading* is 'gouraud' then color values must be
 |      defined at points.
 |      
 |      The remaining kwargs are the same as for `~.Axes.pcolor`.
 |  
 |  triplot(ax, *args, **kwargs)
 |      Draw a unstructured triangular grid as lines and/or markers.
 |      
 |      The triangulation to plot can be specified in one of two ways; either::
 |      
 |        triplot(triangulation, ...)
 |      
 |      where triangulation is a `.Triangulation` object, or
 |      
 |      ::
 |      
 |        triplot(x, y, ...)
 |        triplot(x, y, triangles, ...)
 |        triplot(x, y, triangles=triangles, ...)
 |        triplot(x, y, mask=mask, ...)
 |        triplot(x, y, triangles, mask=mask, ...)
 |      
 |      in which case a Triangulation object will be created.  See `.Triangulation`
 |      for a explanation of these possibilities.
 |      
 |      The remaining args and kwargs are the same as for `~.Axes.plot`.
 |      
 |      Returns
 |      -------
 |      lines : `~matplotlib.lines.Line2D`
 |          The drawn triangles edges.
 |      markers : `~matplotlib.lines.Line2D`
 |          The drawn marker nodes.
 |  
 |  violin(self, vpstats, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False)
 |      Drawing function for violin plots.
 |      
 |      Draw a violin plot for each column of *vpstats*. Each filled area
 |      extends to represent the entire data range, with optional lines at the
 |      mean, the median, the minimum, the maximum, and the quantiles values.
 |      
 |      Parameters
 |      ----------
 |      vpstats : list of dicts
 |        A list of dictionaries containing stats for each violin plot.
 |        Required keys are:
 |      
 |        - ``coords``: A list of scalars containing the coordinates that
 |          the violin's kernel density estimate were evaluated at.
 |      
 |        - ``vals``: A list of scalars containing the values of the
 |          kernel density estimate at each of the coordinates given
 |          in *coords*.
 |      
 |        - ``mean``: The mean value for this violin's dataset.
 |      
 |        - ``median``: The median value for this violin's dataset.
 |      
 |        - ``min``: The minimum value for this violin's dataset.
 |      
 |        - ``max``: The maximum value for this violin's dataset.
 |      
 |        Optional keys are:
 |      
 |        - ``quantiles``: A list of scalars containing the quantile values
 |          for this violin's dataset.
 |      
 |      positions : array-like, default: [1, 2, ..., n]
 |        The positions of the violins. The ticks and limits are
 |        automatically set to match the positions.
 |      
 |      vert : bool, default: True.
 |        If true, plots the violins vertically.
 |        Otherwise, plots the violins horizontally.
 |      
 |      widths : array-like, default: 0.5
 |        Either a scalar or a vector that sets the maximal width of
 |        each violin. The default is 0.5, which uses about half of the
 |        available horizontal space.
 |      
 |      showmeans : bool, default: False
 |        If true, will toggle rendering of the means.
 |      
 |      showextrema : bool, default: True
 |        If true, will toggle rendering of the extrema.
 |      
 |      showmedians : bool, default: False
 |        If true, will toggle rendering of the medians.
 |      
 |      Returns
 |      -------
 |      dict
 |        A dictionary mapping each component of the violinplot to a
 |        list of the corresponding collection instances created. The
 |        dictionary has the following keys:
 |      
 |        - ``bodies``: A list of the `~.collections.PolyCollection`
 |          instances containing the filled area of each violin.
 |      
 |        - ``cmeans``: A `~.collections.LineCollection` instance that marks
 |          the mean values of each of the violin's distribution.
 |      
 |        - ``cmins``: A `~.collections.LineCollection` instance that marks
 |          the bottom of each violin's distribution.
 |      
 |        - ``cmaxes``: A `~.collections.LineCollection` instance that marks
 |          the top of each violin's distribution.
 |      
 |        - ``cbars``: A `~.collections.LineCollection` instance that marks
 |          the centers of each violin's distribution.
 |      
 |        - ``cmedians``: A `~.collections.LineCollection` instance that
 |          marks the median values of each of the violin's distribution.
 |      
 |        - ``cquantiles``: A `~.collections.LineCollection` instance created
 |          to identify the quantiles values of each of the violin's
 |          distribution.
 |  
 |  violinplot(self, dataset, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False, quantiles=None, points=100, bw_method=None, *, data=None)
 |      Make a violin plot.
 |      
 |      Make a violin plot for each column of *dataset* or each vector in
 |      sequence *dataset*.  Each filled area extends to represent the
 |      entire data range, with optional lines at the mean, the median,
 |      the minimum, the maximum, and user-specified quantiles.
 |      
 |      Parameters
 |      ----------
 |      dataset : Array or a sequence of vectors.
 |        The input data.
 |      
 |      positions : array-like, default: [1, 2, ..., n]
 |        The positions of the violins. The ticks and limits are
 |        automatically set to match the positions.
 |      
 |      vert : bool, default: True.
 |        If true, creates a vertical violin plot.
 |        Otherwise, creates a horizontal violin plot.
 |      
 |      widths : array-like, default: 0.5
 |        Either a scalar or a vector that sets the maximal width of
 |        each violin. The default is 0.5, which uses about half of the
 |        available horizontal space.
 |      
 |      showmeans : bool, default: False
 |        If `True`, will toggle rendering of the means.
 |      
 |      showextrema : bool, default: True
 |        If `True`, will toggle rendering of the extrema.
 |      
 |      showmedians : bool, default: False
 |        If `True`, will toggle rendering of the medians.
 |      
 |      quantiles : array-like, default: None
 |        If not None, set a list of floats in interval [0, 1] for each violin,
 |        which stands for the quantiles that will be rendered for that
 |        violin.
 |      
 |      points : int, default: 100
 |        Defines the number of points to evaluate each of the
 |        gaussian kernel density estimations at.
 |      
 |      bw_method : str, scalar or callable, optional
 |        The method used to calculate the estimator bandwidth.  This can be
 |        'scott', 'silverman', a scalar constant or a callable.  If a
 |        scalar, this will be used directly as `kde.factor`.  If a
 |        callable, it should take a `GaussianKDE` instance as its only
 |        parameter and return a scalar. If None (default), 'scott' is used.
 |      
 |      Returns
 |      -------
 |      dict
 |        A dictionary mapping each component of the violinplot to a
 |        list of the corresponding collection instances created. The
 |        dictionary has the following keys:
 |      
 |        - ``bodies``: A list of the `~.collections.PolyCollection`
 |          instances containing the filled area of each violin.
 |      
 |        - ``cmeans``: A `~.collections.LineCollection` instance that marks
 |          the mean values of each of the violin's distribution.
 |      
 |        - ``cmins``: A `~.collections.LineCollection` instance that marks
 |          the bottom of each violin's distribution.
 |      
 |        - ``cmaxes``: A `~.collections.LineCollection` instance that marks
 |          the top of each violin's distribution.
 |      
 |        - ``cbars``: A `~.collections.LineCollection` instance that marks
 |          the centers of each violin's distribution.
 |      
 |        - ``cmedians``: A `~.collections.LineCollection` instance that
 |          marks the median values of each of the violin's distribution.
 |      
 |        - ``cquantiles``: A `~.collections.LineCollection` instance created
 |          to identify the quantile values of each of the violin's
 |          distribution.
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *dataset*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  vlines(self, x, ymin, ymax, colors=None, linestyles='solid', label='', *, data=None, **kwargs)
 |      Plot vertical lines at each *x* from *ymin* to *ymax*.
 |      
 |      Parameters
 |      ----------
 |      x : float or array-like
 |          x-indexes where to plot the lines.
 |      
 |      ymin, ymax : float or array-like
 |          Respective beginning and end of each line. If scalars are
 |          provided, all lines will have same length.
 |      
 |      colors : list of colors, default: :rc:`lines.color`
 |      
 |      linestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional
 |      
 |      label : str, default: ''
 |      
 |      Returns
 |      -------
 |      `~matplotlib.collections.LineCollection`
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~matplotlib.collections.LineCollection` properties.
 |      
 |      See Also
 |      --------
 |      hlines : horizontal lines
 |      axvline : vertical line across the Axes
 |      
 |      Notes
 |      -----
 |      
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *ymin*, *ymax*, *colors*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  xcorr(self, x, y, normed=True, detrend=<function detrend_none at 0x7ff197e64d30>, usevlines=True, maxlags=10, *, data=None, **kwargs)
 |      Plot the cross correlation between *x* and *y*.
 |      
 |      The correlation with lag k is defined as
 |      :math:`\sum_n x[n+k] \cdot y^*[n]`, where :math:`y^*` is the complex
 |      conjugate of :math:`y`.
 |      
 |      Parameters
 |      ----------
 |      x, y : array-like of length n
 |      
 |      detrend : callable, default: `.mlab.detrend_none` (no detrending)
 |          A detrending function applied to *x* and *y*.  It must have the
 |          signature ::
 |      
 |              detrend(x: np.ndarray) -> np.ndarray
 |      
 |      normed : bool, default: True
 |          If ``True``, input vectors are normalised to unit length.
 |      
 |      usevlines : bool, default: True
 |          Determines the plot style.
 |      
 |          If ``True``, vertical lines are plotted from 0 to the xcorr value
 |          using `.Axes.vlines`. Additionally, a horizontal line is plotted
 |          at y=0 using `.Axes.axhline`.
 |      
 |          If ``False``, markers are plotted at the xcorr values using
 |          `.Axes.plot`.
 |      
 |      maxlags : int, default: 10
 |          Number of lags to show. If None, will return all ``2 * len(x) - 1``
 |          lags.
 |      
 |      Returns
 |      -------
 |      lags : array (length ``2*maxlags+1``)
 |          The lag vector.
 |      c : array  (length ``2*maxlags+1``)
 |          The auto correlation vector.
 |      line : `.LineCollection` or `.Line2D`
 |          `.Artist` added to the Axes of the correlation:
 |      
 |          - `.LineCollection` if *usevlines* is True.
 |          - `.Line2D` if *usevlines* is False.
 |      b : `.Line2D` or None
 |          Horizontal line at 0 if *usevlines* is True
 |          None *usevlines* is False.
 |      
 |      Other Parameters
 |      ----------------
 |      linestyle : `.Line2D` property, optional
 |          The linestyle for plotting the data points.
 |          Only used if *usevlines* is ``False``.
 |      
 |      marker : str, default: 'o'
 |          The marker for plotting the data points.
 |          Only used if *usevlines* is ``False``.
 |      
 |      **kwargs
 |          Additional parameters are passed to `.Axes.vlines` and
 |          `.Axes.axhline` if *usevlines* is ``True``; otherwise they are
 |          passed to `.Axes.plot`.
 |      
 |      Notes
 |      -----
 |      The cross correlation is performed with `numpy.correlate` with
 |      ``mode = "full"``.
 |      
 |      .. note::
 |          In addition to the above described arguments, this function can take
 |          a *data* keyword argument. If such a *data* argument is given,
 |          the following arguments can also be string ``s``, which is
 |          interpreted as ``data[s]`` (unless this raises an exception):
 |          *x*, *y*.
 |      
 |          Objects passed as **data** must support item access (``data[s]``) and
 |          membership test (``s in data``).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from matplotlib.axes._base._AxesBase:
 |  
 |  __getstate__(self)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  add_artist(self, a)
 |      Add an `~.Artist` to the axes, and return the artist.
 |      
 |      Use `add_artist` only for artists for which there is no dedicated
 |      "add" method; and if necessary, use a method such as `update_datalim`
 |      to manually update the dataLim if the artist is to be included in
 |      autoscaling.
 |      
 |      If no ``transform`` has been specified when creating the artist (e.g.
 |      ``artist.get_transform() == None``) then the transform is set to
 |      ``ax.transData``.
 |  
 |  add_child_axes(self, ax)
 |      Add an `~.AxesBase` to the axes' children; return the child axes.
 |      
 |      This is the lowlevel version.  See `.axes.Axes.inset_axes`.
 |  
 |  add_collection(self, collection, autolim=True)
 |      Add a `~.Collection` to the axes' collections; return the collection.
 |  
 |  add_container(self, container)
 |      Add a `~.Container` to the axes' containers; return the container.
 |  
 |  add_image(self, image)
 |      Add an `~.AxesImage` to the axes' images; return the image.
 |  
 |  add_line(self, line)
 |      Add a `.Line2D` to the axes' lines; return the line.
 |  
 |  add_patch(self, p)
 |      Add a `~.Patch` to the axes' patches; return the patch.
 |  
 |  add_table(self, tab)
 |      Add a `~.Table` to the axes' tables; return the table.
 |  
 |  apply_aspect(self, position=None)
 |      Adjust the Axes for a specified data aspect ratio.
 |      
 |      Depending on `.get_adjustable` this will modify either the
 |      Axes box (position) or the view limits. In the former case,
 |      `~matplotlib.axes.Axes.get_anchor` will affect the position.
 |      
 |      Notes
 |      -----
 |      This is called automatically when each Axes is drawn.  You may need
 |      to call it yourself if you need to update the Axes position and/or
 |      view limits before the Figure is drawn.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.set_aspect
 |          For a description of aspect ratio handling.
 |      matplotlib.axes.Axes.set_adjustable
 |          Set how the Axes adjusts to achieve the required aspect ratio.
 |      matplotlib.axes.Axes.set_anchor
 |          Set the position in case of extra space.
 |  
 |  autoscale(self, enable=True, axis='both', tight=None)
 |      Autoscale the axis view to the data (toggle).
 |      
 |      Convenience method for simple axis view autoscaling.
 |      It turns autoscaling on or off, and then,
 |      if autoscaling for either axis is on, it performs
 |      the autoscaling on the specified axis or axes.
 |      
 |      Parameters
 |      ----------
 |      enable : bool or None, default: True
 |          True turns autoscaling on, False turns it off.
 |          None leaves the autoscaling state unchanged.
 |      axis : {'both', 'x', 'y'}, default: 'both'
 |          Which axis to operate on.
 |      tight : bool or None, default: None
 |          If True, first set the margins to zero.  Then, this argument is
 |          forwarded to `autoscale_view` (regardless of its value); see the
 |          description of its behavior there.
 |  
 |  autoscale_view(self, tight=None, scalex=True, scaley=True)
 |      Autoscale the view limits using the data limits.
 |      
 |      Parameters
 |      ----------
 |      tight : bool or None
 |          If *True*, only expand the axis limits using the margins.  Note
 |          that unlike for `autoscale`, ``tight=True`` does *not* set the
 |          margins to zero.
 |      
 |          If *False* and :rc:`axes.autolimit_mode` is 'round_numbers', then
 |          after expansion by the margins, further expand the axis limits
 |          using the axis major locator.
 |      
 |          If None (the default), reuse the value set in the previous call to
 |          `autoscale_view` (the initial value is False, but the default style
 |          sets :rc:`axes.autolimit_mode` to 'data', in which case this
 |          behaves like True).
 |      
 |      scalex : bool, default: True
 |          Whether to autoscale the x axis.
 |      
 |      scaley : bool, default: True
 |          Whether to autoscale the y axis.
 |      
 |      Notes
 |      -----
 |      The autoscaling preserves any preexisting axis direction reversal.
 |      
 |      The data limits are not updated automatically when artist data are
 |      changed after the artist has been added to an Axes instance.  In that
 |      case, use :meth:`matplotlib.axes.Axes.relim` prior to calling
 |      autoscale_view.
 |      
 |      If the views of the axes are fixed, e.g. via `set_xlim`, they will
 |      not be changed by autoscale_view().
 |      See :meth:`matplotlib.axes.Axes.autoscale` for an alternative.
 |  
 |  axis(self, *args, emit=True, **kwargs)
 |      Convenience method to get or set some axis properties.
 |      
 |      Call signatures::
 |      
 |        xmin, xmax, ymin, ymax = axis()
 |        xmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])
 |        xmin, xmax, ymin, ymax = axis(option)
 |        xmin, xmax, ymin, ymax = axis(**kwargs)
 |      
 |      Parameters
 |      ----------
 |      xmin, xmax, ymin, ymax : float, optional
 |          The axis limits to be set.  This can also be achieved using ::
 |      
 |              ax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))
 |      
 |      option : bool or str
 |          If a bool, turns axis lines and labels on or off. If a string,
 |          possible values are:
 |      
 |          ======== ==========================================================
 |          Value    Description
 |          ======== ==========================================================
 |          'on'     Turn on axis lines and labels. Same as ``True``.
 |          'off'    Turn off axis lines and labels. Same as ``False``.
 |          'equal'  Set equal scaling (i.e., make circles circular) by
 |                   changing axis limits. This is the same as
 |                   ``ax.set_aspect('equal', adjustable='datalim')``.
 |                   Explicit data limits may not be respected in this case.
 |          'scaled' Set equal scaling (i.e., make circles circular) by
 |                   changing dimensions of the plot box. This is the same as
 |                   ``ax.set_aspect('equal', adjustable='box', anchor='C')``.
 |                   Additionally, further autoscaling will be disabled.
 |          'tight'  Set limits just large enough to show all data, then
 |                   disable further autoscaling.
 |          'auto'   Automatic scaling (fill plot box with data).
 |          'image'  'scaled' with axis limits equal to data limits.
 |          'square' Square plot; similar to 'scaled', but initially forcing
 |                   ``xmax-xmin == ymax-ymin``.
 |          ======== ==========================================================
 |      
 |      emit : bool, default: True
 |          Whether observers are notified of the axis limit change.
 |          This option is passed on to `~.Axes.set_xlim` and
 |          `~.Axes.set_ylim`.
 |      
 |      Returns
 |      -------
 |      xmin, xmax, ymin, ymax : float
 |          The axis limits.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.set_xlim
 |      matplotlib.axes.Axes.set_ylim
 |  
 |  can_pan(self)
 |      Return whether this axes supports any pan/zoom button functionality.
 |  
 |  can_zoom(self)
 |      Return whether this axes supports the zoom box button functionality.
 |  
 |  cla(self)
 |      Clear the axes.
 |  
 |  clear(self)
 |      Clear the axes.
 |  
 |  contains(self, mouseevent)
 |      Test whether the artist contains the mouse event.
 |      
 |      Parameters
 |      ----------
 |      mouseevent : `matplotlib.backend_bases.MouseEvent`
 |      
 |      Returns
 |      -------
 |      contains : bool
 |          Whether any values are within the radius.
 |      details : dict
 |          An artist-specific dictionary of details of the event context,
 |          such as which points are contained in the pick radius. See the
 |          individual Artist subclasses for details.
 |  
 |  contains_point(self, point)
 |      Return whether *point* (pair of pixel coordinates) is inside the axes
 |      patch.
 |  
 |  drag_pan(self, button, key, x, y)
 |      Called when the mouse moves during a pan operation.
 |      
 |      Parameters
 |      ----------
 |      button : `.MouseButton`
 |          The pressed mouse button.
 |      key : str or None
 |          The pressed key, if any.
 |      x, y : float
 |          The mouse coordinates in display coords.
 |      
 |      Notes
 |      -----
 |      This is intended to be overridden by new projection types.
 |  
 |  draw(self, renderer=None, inframe=<deprecated parameter>)
 |      Draw the Artist (and its children) using the given renderer.
 |      
 |      This has no effect if the artist is not visible (`.Artist.get_visible`
 |      returns False).
 |      
 |      Parameters
 |      ----------
 |      renderer : `.RendererBase` subclass.
 |      
 |      Notes
 |      -----
 |      This method is overridden in the Artist subclasses.
 |  
 |  draw_artist(self, a)
 |      Efficiently redraw a single artist.
 |      
 |      This method can only be used after an initial draw of the figure,
 |      because that creates and caches the renderer needed here.
 |  
 |  end_pan(self)
 |      Called when a pan operation completes (when the mouse button is up.)
 |      
 |      Notes
 |      -----
 |      This is intended to be overridden by new projection types.
 |  
 |  format_coord(self, x, y)
 |      Return a format string formatting the *x*, *y* coordinates.
 |  
 |  format_xdata(self, x)
 |      Return *x* formatted as an x-value.
 |      
 |      This function will use the `.fmt_xdata` attribute if it is not None,
 |      else will fall back on the xaxis major formatter.
 |  
 |  format_ydata(self, y)
 |      Return *y* formatted as an y-value.
 |      
 |      This function will use the `.fmt_ydata` attribute if it is not None,
 |      else will fall back on the yaxis major formatter.
 |  
 |  get_adjustable(self)
 |      Return whether the Axes will adjust its physical dimension ('box') or
 |      its data limits ('datalim') to achieve the desired aspect ratio.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.set_adjustable
 |          Set how the Axes adjusts to achieve the required aspect ratio.
 |      matplotlib.axes.Axes.set_aspect
 |          For a description of aspect handling.
 |  
 |  get_anchor(self)
 |      Get the anchor location.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.set_anchor
 |          for a description of the anchor.
 |      matplotlib.axes.Axes.set_aspect
 |          for a description of aspect handling.
 |  
 |  get_aspect(self)
 |  
 |  get_autoscale_on(self)
 |      Get whether autoscaling is applied for both axes on plot commands
 |  
 |  get_autoscalex_on(self)
 |      Get whether autoscaling for the x-axis is applied on plot commands
 |  
 |  get_autoscaley_on(self)
 |      Get whether autoscaling for the y-axis is applied on plot commands
 |  
 |  get_axes_locator(self)
 |      Return the axes_locator.
 |  
 |  get_axisbelow(self)
 |      Get whether axis ticks and gridlines are above or below most artists.
 |      
 |      Returns
 |      -------
 |      bool or 'line'
 |      
 |      See Also
 |      --------
 |      set_axisbelow
 |  
 |  get_box_aspect(self)
 |      Return the axes box aspect, i.e. the ratio of height to width.
 |      
 |      The box aspect is ``None`` (i.e. chosen depending on the available
 |      figure space) unless explicitly specified.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.set_box_aspect
 |          for a description of box aspect.
 |      matplotlib.axes.Axes.set_aspect
 |          for a description of aspect handling.
 |  
 |  get_children(self)
 |      Return a list of the child `.Artist`\s of this `.Artist`.
 |  
 |  get_data_ratio(self)
 |      Return the aspect ratio of the scaled data.
 |      
 |      Notes
 |      -----
 |      This method is intended to be overridden by new projection types.
 |  
 |  get_default_bbox_extra_artists(self)
 |      Return a default list of artists that are used for the bounding box
 |      calculation.
 |      
 |      Artists are excluded either by not being visible or
 |      ``artist.set_in_layout(False)``.
 |  
 |  get_facecolor(self)
 |      Get the facecolor of the Axes.
 |  
 |  get_fc(self)
 |      Alias for `get_facecolor`.
 |  
 |  get_frame_on(self)
 |      Get whether the axes rectangle patch is drawn.
 |  
 |  get_images(self)
 |      Return a list of `.AxesImage`\s contained by the Axes.
 |  
 |  get_legend(self)
 |      Return the `.Legend` instance, or None if no legend is defined.
 |  
 |  get_lines(self)
 |      Return a list of lines contained by the Axes.
 |  
 |  get_navigate(self)
 |      Get whether the axes responds to navigation commands
 |  
 |  get_navigate_mode(self)
 |      Get the navigation toolbar button status: 'PAN', 'ZOOM', or None
 |  
 |  get_position(self, original=False)
 |      Get a copy of the axes rectangle as a `.Bbox`.
 |      
 |      Parameters
 |      ----------
 |      original : bool
 |          If ``True``, return the original position. Otherwise return the
 |          active position. For an explanation of the positions see
 |          `.set_position`.
 |      
 |      Returns
 |      -------
 |      `.Bbox`
 |  
 |  get_rasterization_zorder(self)
 |      Return the zorder value below which artists will be rasterized.
 |  
 |  get_renderer_cache(self)
 |  
 |  get_shared_x_axes(self)
 |      Return a reference to the shared axes Grouper object for x axes.
 |  
 |  get_shared_y_axes(self)
 |      Return a reference to the shared axes Grouper object for y axes.
 |  
 |  get_tightbbox(self, renderer, call_axes_locator=True, bbox_extra_artists=None, *, for_layout_only=False)
 |      Return the tight bounding box of the axes, including axis and their
 |      decorators (xlabel, title, etc).
 |      
 |      Artists that have ``artist.set_in_layout(False)`` are not included
 |      in the bbox.
 |      
 |      Parameters
 |      ----------
 |      renderer : `.RendererBase` subclass
 |          renderer that will be used to draw the figures (i.e.
 |          ``fig.canvas.get_renderer()``)
 |      
 |      bbox_extra_artists : list of `.Artist` or ``None``
 |          List of artists to include in the tight bounding box.  If
 |          ``None`` (default), then all artist children of the axes are
 |          included in the tight bounding box.
 |      
 |      call_axes_locator : bool, default: True
 |          If *call_axes_locator* is ``False``, it does not call the
 |          ``_axes_locator`` attribute, which is necessary to get the correct
 |          bounding box. ``call_axes_locator=False`` can be used if the
 |          caller is only interested in the relative size of the tightbbox
 |          compared to the axes bbox.
 |      
 |      for_layout_only : default: False
 |          The bounding box will *not* include the x-extent of the title and
 |          the xlabel, or the y-extent of the ylabel.
 |      
 |      Returns
 |      -------
 |      `.BboxBase`
 |          Bounding box in figure pixel coordinates.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.get_window_extent
 |      matplotlib.axis.Axis.get_tightbbox
 |      matplotlib.spines.Spine.get_window_extent
 |  
 |  get_window_extent(self, *args, **kwargs)
 |      Return the axes bounding box in display space; *args* and *kwargs*
 |      are empty.
 |      
 |      This bounding box does not include the spines, ticks, ticklables,
 |      or other labels.  For a bounding box including these elements use
 |      `~matplotlib.axes.Axes.get_tightbbox`.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.get_tightbbox
 |      matplotlib.axis.Axis.get_tightbbox
 |      matplotlib.spines.Spine.get_window_extent
 |  
 |  get_xaxis(self)
 |      Return the XAxis instance.
 |      
 |      The use of this function is discouraged. You should instead directly
 |      access the attribute ``ax.xaxis``.
 |  
 |  get_xaxis_text1_transform(self, pad_points)
 |      Returns
 |      -------
 |      transform : Transform
 |          The transform used for drawing x-axis labels, which will add
 |          *pad_points* of padding (in points) between the axes and the label.
 |          The x-direction is in data coordinates and the y-direction is in
 |          axis coordinates
 |      valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}
 |          The text vertical alignment.
 |      halign : {'center', 'left', 'right'}
 |          The text horizontal alignment.
 |      
 |      Notes
 |      -----
 |      This transformation is primarily used by the `~matplotlib.axis.Axis`
 |      class, and is meant to be overridden by new kinds of projections that
 |      may need to place axis elements in different locations.
 |  
 |  get_xaxis_text2_transform(self, pad_points)
 |      Returns
 |      -------
 |      transform : Transform
 |          The transform used for drawing secondary x-axis labels, which will
 |          add *pad_points* of padding (in points) between the axes and the
 |          label.  The x-direction is in data coordinates and the y-direction
 |          is in axis coordinates
 |      valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}
 |          The text vertical alignment.
 |      halign : {'center', 'left', 'right'}
 |          The text horizontal alignment.
 |      
 |      Notes
 |      -----
 |      This transformation is primarily used by the `~matplotlib.axis.Axis`
 |      class, and is meant to be overridden by new kinds of projections that
 |      may need to place axis elements in different locations.
 |  
 |  get_xaxis_transform(self, which='grid')
 |      Get the transformation used for drawing x-axis labels, ticks
 |      and gridlines.  The x-direction is in data coordinates and the
 |      y-direction is in axis coordinates.
 |      
 |      .. note::
 |      
 |          This transformation is primarily used by the
 |          `~matplotlib.axis.Axis` class, and is meant to be
 |          overridden by new kinds of projections that may need to
 |          place axis elements in different locations.
 |  
 |  get_xbound(self)
 |      Return the lower and upper x-axis bounds, in increasing order.
 |      
 |      See Also
 |      --------
 |      set_xbound
 |      get_xlim, set_xlim
 |      invert_xaxis, xaxis_inverted
 |  
 |  get_xgridlines(self)
 |      Return the xaxis' grid lines as a list of `.Line2D`\s.
 |  
 |  get_xlabel(self)
 |      Get the xlabel text string.
 |  
 |  get_xlim(self)
 |      Return the x-axis view limits.
 |      
 |      Returns
 |      -------
 |      left, right : (float, float)
 |          The current x-axis limits in data coordinates.
 |      
 |      See Also
 |      --------
 |      set_xlim
 |      set_xbound, get_xbound
 |      invert_xaxis, xaxis_inverted
 |      
 |      Notes
 |      -----
 |      The x-axis may be inverted, in which case the *left* value will
 |      be greater than the *right* value.
 |  
 |  get_xmajorticklabels(self)
 |      Return the xaxis' major tick labels, as a list of `~.text.Text`.
 |  
 |  get_xminorticklabels(self)
 |      Return the xaxis' minor tick labels, as a list of `~.text.Text`.
 |  
 |  get_xscale(self)
 |      Return the xaxis' scale (as a str).
 |  
 |  get_xticklabels(self, minor=False, which=None)
 |      Get the xaxis' tick labels.
 |      
 |      Parameters
 |      ----------
 |      minor : bool
 |         Whether to return the minor or the major ticklabels.
 |      
 |      which : None, ('minor', 'major', 'both')
 |         Overrides *minor*.
 |      
 |         Selects which ticklabels to return
 |      
 |      Returns
 |      -------
 |      list of `~matplotlib.text.Text`
 |      
 |      Notes
 |      -----
 |      The tick label strings are not populated until a ``draw`` method has
 |      been called.
 |      
 |      See also: `~.pyplot.draw` and `~.FigureCanvasBase.draw`.
 |  
 |  get_xticklines(self, minor=False)
 |      Return the xaxis' tick lines as a list of `.Line2D`\s.
 |  
 |  get_xticks(self, *, minor=False)
 |      Return the xaxis' tick locations in data coordinates.
 |  
 |  get_yaxis(self)
 |      Return the YAxis instance.
 |      
 |      The use of this function is discouraged. You should instead directly
 |      access the attribute ``ax.yaxis``.
 |  
 |  get_yaxis_text1_transform(self, pad_points)
 |      Returns
 |      -------
 |      transform : Transform
 |          The transform used for drawing y-axis labels, which will add
 |          *pad_points* of padding (in points) between the axes and the label.
 |          The x-direction is in axis coordinates and the y-direction is in
 |          data coordinates
 |      valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}
 |          The text vertical alignment.
 |      halign : {'center', 'left', 'right'}
 |          The text horizontal alignment.
 |      
 |      Notes
 |      -----
 |      This transformation is primarily used by the `~matplotlib.axis.Axis`
 |      class, and is meant to be overridden by new kinds of projections that
 |      may need to place axis elements in different locations.
 |  
 |  get_yaxis_text2_transform(self, pad_points)
 |      Returns
 |      -------
 |      transform : Transform
 |          The transform used for drawing secondart y-axis labels, which will
 |          add *pad_points* of padding (in points) between the axes and the
 |          label.  The x-direction is in axis coordinates and the y-direction
 |          is in data coordinates
 |      valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}
 |          The text vertical alignment.
 |      halign : {'center', 'left', 'right'}
 |          The text horizontal alignment.
 |      
 |      Notes
 |      -----
 |      This transformation is primarily used by the `~matplotlib.axis.Axis`
 |      class, and is meant to be overridden by new kinds of projections that
 |      may need to place axis elements in different locations.
 |  
 |  get_yaxis_transform(self, which='grid')
 |      Get the transformation used for drawing y-axis labels, ticks
 |      and gridlines.  The x-direction is in axis coordinates and the
 |      y-direction is in data coordinates.
 |      
 |      .. note::
 |      
 |          This transformation is primarily used by the
 |          `~matplotlib.axis.Axis` class, and is meant to be
 |          overridden by new kinds of projections that may need to
 |          place axis elements in different locations.
 |  
 |  get_ybound(self)
 |      Return the lower and upper y-axis bounds, in increasing order.
 |      
 |      See Also
 |      --------
 |      set_ybound
 |      get_ylim, set_ylim
 |      invert_yaxis, yaxis_inverted
 |  
 |  get_ygridlines(self)
 |      Return the yaxis' grid lines as a list of `.Line2D`\s.
 |  
 |  get_ylabel(self)
 |      Get the ylabel text string.
 |  
 |  get_ylim(self)
 |      Return the y-axis view limits.
 |      
 |      Returns
 |      -------
 |      bottom, top : (float, float)
 |          The current y-axis limits in data coordinates.
 |      
 |      See Also
 |      --------
 |      set_ylim
 |      set_ybound, get_ybound
 |      invert_yaxis, yaxis_inverted
 |      
 |      Notes
 |      -----
 |      The y-axis may be inverted, in which case the *bottom* value
 |      will be greater than the *top* value.
 |  
 |  get_ymajorticklabels(self)
 |      Return the yaxis' major tick labels, as a list of `~.text.Text`.
 |  
 |  get_yminorticklabels(self)
 |      Return the yaxis' minor tick labels, as a list of `~.text.Text`.
 |  
 |  get_yscale(self)
 |      Return the yaxis' scale (as a str).
 |  
 |  get_yticklabels(self, minor=False, which=None)
 |      Get the yaxis' tick labels.
 |      
 |      Parameters
 |      ----------
 |      minor : bool
 |         Whether to return the minor or the major ticklabels.
 |      
 |      which : None, ('minor', 'major', 'both')
 |         Overrides *minor*.
 |      
 |         Selects which ticklabels to return
 |      
 |      Returns
 |      -------
 |      list of `~matplotlib.text.Text`
 |      
 |      Notes
 |      -----
 |      The tick label strings are not populated until a ``draw`` method has
 |      been called.
 |      
 |      See also: `~.pyplot.draw` and `~.FigureCanvasBase.draw`.
 |  
 |  get_yticklines(self, minor=False)
 |      Return the yaxis' tick lines as a list of `.Line2D`\s.
 |  
 |  get_yticks(self, *, minor=False)
 |      Return the yaxis' tick locations in data coordinates.
 |  
 |  grid(self, b=None, which='major', axis='both', **kwargs)
 |      Configure the grid lines.
 |      
 |      Parameters
 |      ----------
 |      b : bool or None, optional
 |          Whether to show the grid lines. If any *kwargs* are supplied,
 |          it is assumed you want the grid on and *b* will be set to True.
 |      
 |          If *b* is *None* and there are no *kwargs*, this toggles the
 |          visibility of the lines.
 |      
 |      which : {'major', 'minor', 'both'}, optional
 |          The grid lines to apply the changes on.
 |      
 |      axis : {'both', 'x', 'y'}, optional
 |          The axis to apply the changes on.
 |      
 |      **kwargs : `.Line2D` properties
 |          Define the line properties of the grid, e.g.::
 |      
 |              grid(color='r', linestyle='-', linewidth=2)
 |      
 |          Valid keyword arguments are:
 |      
 |          Properties:
 |          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
 |          alpha: scalar or None
 |          animated: bool
 |          antialiased or aa: bool
 |          clip_box: `.Bbox`
 |          clip_on: bool
 |          clip_path: Patch or (Path, Transform) or None
 |          color or c: color
 |          contains: unknown
 |          dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          dashes: sequence of floats (on/off ink in points) or (None, None)
 |          data: (2, N) array or two 1D arrays
 |          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
 |          figure: `.Figure`
 |          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
 |          gid: str
 |          in_layout: bool
 |          label: object
 |          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
 |          linewidth or lw: float
 |          marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`
 |          markeredgecolor or mec: color
 |          markeredgewidth or mew: float
 |          markerfacecolor or mfc: color
 |          markerfacecoloralt or mfcalt: color
 |          markersize or ms: float
 |          markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]
 |          path_effects: `.AbstractPathEffect`
 |          picker: float or callable[[Artist, Event], tuple[bool, dict]]
 |          pickradius: float
 |          rasterized: bool
 |          sketch_params: (scale: float, length: float, randomness: float)
 |          snap: bool or None
 |          solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}
 |          solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}
 |          transform: `matplotlib.transforms.Transform`
 |          url: str
 |          visible: bool
 |          xdata: 1D array
 |          ydata: 1D array
 |          zorder: float
 |      
 |      Notes
 |      -----
 |      The axis is drawn as a unit, so the effective zorder for drawing the
 |      grid is determined by the zorder of each axis, not by the zorder of the
 |      `.Line2D` objects comprising the grid.  Therefore, to set grid zorder,
 |      use `.set_axisbelow` or, for more control, call the
 |      `~.Artist.set_zorder` method of each axis.
 |  
 |  has_data(self)
 |      Return whether any artists have been added to the axes.
 |      
 |      This should not be used to determine whether the *dataLim*
 |      need to be updated, and may not actually be useful for
 |      anything.
 |  
 |  in_axes(self, mouseevent)
 |      Return whether the given event (in display coords) is in the Axes.
 |  
 |  invert_xaxis(self)
 |      Invert the x-axis.
 |      
 |      See Also
 |      --------
 |      xaxis_inverted
 |      get_xlim, set_xlim
 |      get_xbound, set_xbound
 |  
 |  invert_yaxis(self)
 |      Invert the y-axis.
 |      
 |      See Also
 |      --------
 |      yaxis_inverted
 |      get_ylim, set_ylim
 |      get_ybound, set_ybound
 |  
 |  locator_params(self, axis='both', tight=None, **kwargs)
 |      Control behavior of major tick locators.
 |      
 |      Because the locator is involved in autoscaling, `~.Axes.autoscale_view`
 |      is called automatically after the parameters are changed.
 |      
 |      Parameters
 |      ----------
 |      axis : {'both', 'x', 'y'}, default: 'both'
 |          The axis on which to operate.
 |      
 |      tight : bool or None, optional
 |          Parameter passed to `~.Axes.autoscale_view`.
 |          Default is None, for no change.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs
 |          Remaining keyword arguments are passed to directly to the
 |          ``set_params()`` method of the locator. Supported keywords depend
 |          on the type of the locator. See for example
 |          `~.ticker.MaxNLocator.set_params` for the `.ticker.MaxNLocator`
 |          used by default for linear axes.
 |      
 |      Examples
 |      --------
 |      When plotting small subplots, one might want to reduce the maximum
 |      number of ticks and use tight bounds, for example::
 |      
 |          ax.locator_params(tight=True, nbins=4)
 |  
 |  margins(self, *margins, x=None, y=None, tight=True)
 |      Set or retrieve autoscaling margins.
 |      
 |      The padding added to each limit of the axes is the *margin*
 |      times the data interval. All input parameters must be floats
 |      within the range [0, 1]. Passing both positional and keyword
 |      arguments is invalid and will raise a TypeError. If no
 |      arguments (positional or otherwise) are provided, the current
 |      margins will remain in place and simply be returned.
 |      
 |      Specifying any margin changes only the autoscaling; for example,
 |      if *xmargin* is not None, then *xmargin* times the X data
 |      interval will be added to each end of that interval before
 |      it is used in autoscaling.
 |      
 |      Parameters
 |      ----------
 |      *margins : float, optional
 |          If a single positional argument is provided, it specifies
 |          both margins of the x-axis and y-axis limits. If two
 |          positional arguments are provided, they will be interpreted
 |          as *xmargin*, *ymargin*. If setting the margin on a single
 |          axis is desired, use the keyword arguments described below.
 |      
 |      x, y : float, optional
 |          Specific margin values for the x-axis and y-axis,
 |          respectively. These cannot be used with positional
 |          arguments, but can be used individually to alter on e.g.,
 |          only the y-axis.
 |      
 |      tight : bool or None, default: True
 |          The *tight* parameter is passed to :meth:`autoscale_view`,
 |          which is executed after a margin is changed; the default
 |          here is *True*, on the assumption that when margins are
 |          specified, no additional padding to match tick marks is
 |          usually desired.  Set *tight* to *None* will preserve
 |          the previous setting.
 |      
 |      Returns
 |      -------
 |      xmargin, ymargin : float
 |      
 |      Notes
 |      -----
 |      If a previously used Axes method such as :meth:`pcolor` has set
 |      :attr:`use_sticky_edges` to `True`, only the limits not set by
 |      the "sticky artists" will be modified. To force all of the
 |      margins to be set, set :attr:`use_sticky_edges` to `False`
 |      before calling :meth:`margins`.
 |  
 |  minorticks_off(self)
 |      Remove minor ticks from the axes.
 |  
 |  minorticks_on(self)
 |      Display minor ticks on the axes.
 |      
 |      Displaying minor ticks may reduce performance; you may turn them off
 |      using `minorticks_off()` if drawing speed is a problem.
 |  
 |  redraw_in_frame(self)
 |      Efficiently redraw Axes data, but not axis ticks, labels, etc.
 |      
 |      This method can only be used after an initial draw which caches the
 |      renderer.
 |  
 |  relim(self, visible_only=False)
 |      Recompute the data limits based on current artists.
 |      
 |      At present, `~.Collection` instances are not supported.
 |      
 |      Parameters
 |      ----------
 |      visible_only : bool, default: False
 |          Whether to exclude invisible artists.
 |  
 |  reset_position(self)
 |      Reset the active position to the original position.
 |      
 |      This resets the a possible position change due to aspect constraints.
 |      For an explanation of the positions see `.set_position`.
 |  
 |  set_adjustable(self, adjustable, share=False)
 |      Set how the Axes adjusts to achieve the required aspect ratio.
 |      
 |      Parameters
 |      ----------
 |      adjustable : {'box', 'datalim'}
 |          If 'box', change the physical dimensions of the Axes.
 |          If 'datalim', change the ``x`` or ``y`` data limits.
 |      
 |      share : bool, default: False
 |          If ``True``, apply the settings to all shared Axes.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.set_aspect
 |          For a description of aspect handling.
 |      
 |      Notes
 |      -----
 |      Shared Axes (of which twinned Axes are a special case)
 |      impose restrictions on how aspect ratios can be imposed.
 |      For twinned Axes, use 'datalim'.  For Axes that share both
 |      x and y, use 'box'.  Otherwise, either 'datalim' or 'box'
 |      may be used.  These limitations are partly a requirement
 |      to avoid over-specification, and partly a result of the
 |      particular implementation we are currently using, in
 |      which the adjustments for aspect ratios are done sequentially
 |      and independently on each Axes as it is drawn.
 |  
 |  set_anchor(self, anchor, share=False)
 |      Define the anchor location.
 |      
 |      The actual drawing area (active position) of the Axes may be smaller
 |      than the Bbox (original position) when a fixed aspect is required. The
 |      anchor defines where the drawing area will be located within the
 |      available space.
 |      
 |      Parameters
 |      ----------
 |      anchor : 2-tuple of floats or {'C', 'SW', 'S', 'SE', ...}
 |          The anchor position may be either:
 |      
 |          - a sequence (*cx*, *cy*). *cx* and *cy* may range from 0
 |            to 1, where 0 is left or bottom and 1 is right or top.
 |      
 |          - a string using cardinal directions as abbreviation:
 |      
 |            - 'C' for centered
 |            - 'S' (south) for bottom-center
 |            - 'SW' (south west) for bottom-left
 |            - etc.
 |      
 |            Here is an overview of the possible positions:
 |      
 |            +------+------+------+
 |            | 'NW' | 'N'  | 'NE' |
 |            +------+------+------+
 |            | 'W'  | 'C'  | 'E'  |
 |            +------+------+------+
 |            | 'SW' | 'S'  | 'SE' |
 |            +------+------+------+
 |      
 |      share : bool, default: False
 |          If ``True``, apply the settings to all shared Axes.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.set_aspect
 |          for a description of aspect handling.
 |  
 |  set_aspect(self, aspect, adjustable=None, anchor=None, share=False)
 |      Set the aspect of the axis scaling, i.e. the ratio of y-unit to x-unit.
 |      
 |      Parameters
 |      ----------
 |      aspect : {'auto', 'equal'} or float
 |          Possible values:
 |      
 |          - 'auto': fill the position rectangle with data.
 |          - 'equal': same as ``aspect=1``, i.e. same scaling for x and y.
 |          - *float*: A circle will be stretched such that the height
 |            is *float* times the width.
 |      
 |      adjustable : None or {'box', 'datalim'}, optional
 |          If not ``None``, this defines which parameter will be adjusted to
 |          meet the required aspect. See `.set_adjustable` for further
 |          details.
 |      
 |      anchor : None or str or (float, float), optional
 |          If not ``None``, this defines where the Axes will be drawn if there
 |          is extra space due to aspect constraints. The most common way to
 |          to specify the anchor are abbreviations of cardinal directions:
 |      
 |          =====   =====================
 |          value   description
 |          =====   =====================
 |          'C'     centered
 |          'SW'    lower left corner
 |          'S'     middle of bottom edge
 |          'SE'    lower right corner
 |          etc.
 |          =====   =====================
 |      
 |          See `~.Axes.set_anchor` for further details.
 |      
 |      share : bool, default: False
 |          If ``True``, apply the settings to all shared Axes.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.set_adjustable
 |          Set how the Axes adjusts to achieve the required aspect ratio.
 |      matplotlib.axes.Axes.set_anchor
 |          Set the position in case of extra space.
 |  
 |  set_autoscale_on(self, b)
 |      Set whether autoscaling is applied to axes on the next draw or call to
 |      `.Axes.autoscale_view`.
 |      
 |      Parameters
 |      ----------
 |      b : bool
 |  
 |  set_autoscalex_on(self, b)
 |      Set whether autoscaling for the x-axis is applied to axes on the next
 |      draw or call to `.Axes.autoscale_view`.
 |      
 |      Parameters
 |      ----------
 |      b : bool
 |  
 |  set_autoscaley_on(self, b)
 |      Set whether autoscaling for the y-axis is applied to axes on the next
 |      draw or call to `.Axes.autoscale_view`.
 |      
 |      Parameters
 |      ----------
 |      b : bool
 |  
 |  set_axes_locator(self, locator)
 |      Set the axes locator.
 |      
 |      Parameters
 |      ----------
 |      locator : Callable[[Axes, Renderer], Bbox]
 |  
 |  set_axis_off(self)
 |      Turn the x- and y-axis off.
 |      
 |      This affects the axis lines, ticks, ticklabels, grid and axis labels.
 |  
 |  set_axis_on(self)
 |      Turn the x- and y-axis on.
 |      
 |      This affects the axis lines, ticks, ticklabels, grid and axis labels.
 |  
 |  set_axisbelow(self, b)
 |      Set whether axis ticks and gridlines are above or below most artists.
 |      
 |      This controls the zorder of the ticks and gridlines. For more
 |      information on the zorder see :doc:`/gallery/misc/zorder_demo`.
 |      
 |      Parameters
 |      ----------
 |      b : bool or 'line'
 |          Possible values:
 |      
 |          - *True* (zorder = 0.5): Ticks and gridlines are below all Artists.
 |          - 'line' (zorder = 1.5): Ticks and gridlines are above patches
 |            (e.g. rectangles, with default zorder = 1) but still below lines
 |            and markers (with their default zorder = 2).
 |          - *False* (zorder = 2.5): Ticks and gridlines are above patches
 |            and lines / markers.
 |      
 |      See Also
 |      --------
 |      get_axisbelow
 |  
 |  set_box_aspect(self, aspect=None)
 |      Set the axes box aspect, i.e. the ratio of height to width.
 |      
 |      This defines the aspect of the axes in figure space and is not to be
 |      confused with the data aspect (see `~.Axes.set_aspect`).
 |      
 |      Parameters
 |      ----------
 |      aspect : float or None
 |          Changes the physical dimensions of the Axes, such that the ratio
 |          of the axes height to the axes width in physical units is equal to
 |          *aspect*. Defining a box aspect will change the *adjustable*
 |          property to 'datalim' (see `~.Axes.set_adjustable`).
 |      
 |          *None* will disable a fixed box aspect so that height and width
 |          of the axes are chosen independently.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.set_aspect
 |          for a description of aspect handling.
 |  
 |  set_facecolor(self, color)
 |      Set the facecolor of the Axes.
 |      
 |      Parameters
 |      ----------
 |      color : color
 |  
 |  set_fc(self, color)
 |      Alias for `set_facecolor`.
 |  
 |  set_figure(self, fig)
 |      Set the `.Figure` instance the artist belongs to.
 |      
 |      Parameters
 |      ----------
 |      fig : `.Figure`
 |  
 |  set_frame_on(self, b)
 |      Set whether the axes rectangle patch is drawn.
 |      
 |      Parameters
 |      ----------
 |      b : bool
 |  
 |  set_navigate(self, b)
 |      Set whether the axes responds to navigation toolbar commands
 |      
 |      Parameters
 |      ----------
 |      b : bool
 |  
 |  set_navigate_mode(self, b)
 |      Set the navigation toolbar button status;
 |      
 |      .. warning ::
 |          this is not a user-API function.
 |  
 |  set_position(self, pos, which='both')
 |      Set the axes position.
 |      
 |      Axes have two position attributes. The 'original' position is the
 |      position allocated for the Axes. The 'active' position is the
 |      position the Axes is actually drawn at. These positions are usually
 |      the same unless a fixed aspect is set to the Axes. See
 |      `.Axes.set_aspect` for details.
 |      
 |      Parameters
 |      ----------
 |      pos : [left, bottom, width, height] or `~matplotlib.transforms.Bbox`
 |          The new position of the in `.Figure` coordinates.
 |      
 |      which : {'both', 'active', 'original'}, default: 'both'
 |          Determines which position variables to change.
 |      
 |      See Also
 |      --------
 |      matplotlib.transforms.Bbox.from_bounds
 |      matplotlib.transforms.Bbox.from_extents
 |  
 |  set_prop_cycle(self, *args, **kwargs)
 |      Set the property cycle of the Axes.
 |      
 |      The property cycle controls the style properties such as color,
 |      marker and linestyle of future plot commands. The style properties
 |      of data already added to the Axes are not modified.
 |      
 |      Call signatures::
 |      
 |        set_prop_cycle(cycler)
 |        set_prop_cycle(label=values[, label2=values2[, ...]])
 |        set_prop_cycle(label, values)
 |      
 |      Form 1 sets given `~cycler.Cycler` object.
 |      
 |      Form 2 creates a `~cycler.Cycler` which cycles over one or more
 |      properties simultaneously and set it as the property cycle of the
 |      axes. If multiple properties are given, their value lists must have
 |      the same length. This is just a shortcut for explicitly creating a
 |      cycler and passing it to the function, i.e. it's short for
 |      ``set_prop_cycle(cycler(label=values label2=values2, ...))``.
 |      
 |      Form 3 creates a `~cycler.Cycler` for a single property and set it
 |      as the property cycle of the axes. This form exists for compatibility
 |      with the original `cycler.cycler` interface. Its use is discouraged
 |      in favor of the kwarg form, i.e. ``set_prop_cycle(label=values)``.
 |      
 |      Parameters
 |      ----------
 |      cycler : Cycler
 |          Set the given Cycler. *None* resets to the cycle defined by the
 |          current style.
 |      
 |      label : str
 |          The property key. Must be a valid `.Artist` property.
 |          For example, 'color' or 'linestyle'. Aliases are allowed,
 |          such as 'c' for 'color' and 'lw' for 'linewidth'.
 |      
 |      values : iterable
 |          Finite-length iterable of the property values. These values
 |          are validated and will raise a ValueError if invalid.
 |      
 |      See Also
 |      --------
 |      matplotlib.rcsetup.cycler
 |          Convenience function for creating validated cyclers for properties.
 |      cycler.cycler
 |          The original function for creating unvalidated cyclers.
 |      
 |      Examples
 |      --------
 |      Setting the property cycle for a single property:
 |      
 |      >>> ax.set_prop_cycle(color=['red', 'green', 'blue'])
 |      
 |      Setting the property cycle for simultaneously cycling over multiple
 |      properties (e.g. red circle, green plus, blue cross):
 |      
 |      >>> ax.set_prop_cycle(color=['red', 'green', 'blue'],
 |      ...                   marker=['o', '+', 'x'])
 |  
 |  set_rasterization_zorder(self, z)
 |      Set the zorder threshold for rasterization for vector graphics output.
 |      
 |      All artists with a zorder below the given value will be rasterized if
 |      they support rasterization.
 |      
 |      This setting is ignored for pixel-based output.
 |      
 |      See also :doc:`/gallery/misc/rasterization_demo`.
 |      
 |      Parameters
 |      ----------
 |      z : float or None
 |          The zorder below which artists are rasterized.
 |          If ``None`` rasterization based on zorder is deactivated.
 |  
 |  set_xbound(self, lower=None, upper=None)
 |      Set the lower and upper numerical bounds of the x-axis.
 |      
 |      This method will honor axes inversion regardless of parameter order.
 |      It will not change the autoscaling setting (`.get_autoscalex_on()`).
 |      
 |      Parameters
 |      ----------
 |      lower, upper : float or None
 |          The lower and upper bounds. If *None*, the respective axis bound
 |          is not modified.
 |      
 |      See Also
 |      --------
 |      get_xbound
 |      get_xlim, set_xlim
 |      invert_xaxis, xaxis_inverted
 |  
 |  set_xlabel(self, xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)
 |      Set the label for the x-axis.
 |      
 |      Parameters
 |      ----------
 |      xlabel : str
 |          The label text.
 |      
 |      labelpad : float, default: :rc:`axes.labelpad`
 |          Spacing in points from the axes bounding box including ticks
 |          and tick labels.  If None, the previous value is left as is.
 |      
 |      loc : {'left', 'center', 'right'}, default: :rc:`xaxis.labellocation`
 |          The label position. This is a high-level alternative for passing
 |          parameters *x* and *horizontalalignment*.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `.Text` properties
 |          `.Text` properties control the appearance of the label.
 |      
 |      See Also
 |      --------
 |      text : Documents the properties supported by `.Text`.
 |  
 |  set_xlim(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None)
 |      Set the x-axis view limits.
 |      
 |      Parameters
 |      ----------
 |      left : float, optional
 |          The left xlim in data coordinates. Passing *None* leaves the
 |          limit unchanged.
 |      
 |          The left and right xlims may also be passed as the tuple
 |          (*left*, *right*) as the first positional argument (or as
 |          the *left* keyword argument).
 |      
 |          .. ACCEPTS: (bottom: float, top: float)
 |      
 |      right : float, optional
 |          The right xlim in data coordinates. Passing *None* leaves the
 |          limit unchanged.
 |      
 |      emit : bool, default: True
 |          Whether to notify observers of limit change.
 |      
 |      auto : bool or None, default: False
 |          Whether to turn on autoscaling of the x-axis. True turns on,
 |          False turns off, None leaves unchanged.
 |      
 |      xmin, xmax : float, optional
 |          They are equivalent to left and right respectively,
 |          and it is an error to pass both *xmin* and *left* or
 |          *xmax* and *right*.
 |      
 |      Returns
 |      -------
 |      left, right : (float, float)
 |          The new x-axis limits in data coordinates.
 |      
 |      See Also
 |      --------
 |      get_xlim
 |      set_xbound, get_xbound
 |      invert_xaxis, xaxis_inverted
 |      
 |      Notes
 |      -----
 |      The *left* value may be greater than the *right* value, in which
 |      case the x-axis values will decrease from left to right.
 |      
 |      Examples
 |      --------
 |      >>> set_xlim(left, right)
 |      >>> set_xlim((left, right))
 |      >>> left, right = set_xlim(left, right)
 |      
 |      One limit may be left unchanged.
 |      
 |      >>> set_xlim(right=right_lim)
 |      
 |      Limits may be passed in reverse order to flip the direction of
 |      the x-axis. For example, suppose *x* represents the number of
 |      years before present. The x-axis limits might be set like the
 |      following so 5000 years ago is on the left of the plot and the
 |      present is on the right.
 |      
 |      >>> set_xlim(5000, 0)
 |  
 |  set_xmargin(self, m)
 |      Set padding of X data limits prior to autoscaling.
 |      
 |      *m* times the data interval will be added to each
 |      end of that interval before it is used in autoscaling.
 |      For example, if your data is in the range [0, 2], a factor of
 |      ``m = 0.1`` will result in a range [-0.2, 2.2].
 |      
 |      Negative values -0.5 < m < 0 will result in clipping of the data range.
 |      I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in
 |      a range [0.2, 1.8].
 |      
 |      Parameters
 |      ----------
 |      m : float greater than -0.5
 |  
 |  set_xscale(self, value, **kwargs)
 |      Set the x-axis scale.
 |      
 |      Parameters
 |      ----------
 |      value : {"linear", "log", "symlog", "logit", ...} or `.ScaleBase`
 |          The axis scale type to apply.
 |      
 |      **kwargs
 |          Different keyword arguments are accepted, depending on the scale.
 |          See the respective class keyword arguments:
 |      
 |          - `matplotlib.scale.LinearScale`
 |          - `matplotlib.scale.LogScale`
 |          - `matplotlib.scale.SymmetricalLogScale`
 |          - `matplotlib.scale.LogitScale`
 |          - `matplotlib.scale.FuncScale`
 |      
 |      Notes
 |      -----
 |      By default, Matplotlib supports the above mentioned scales.
 |      Additionally, custom scales may be registered using
 |      `matplotlib.scale.register_scale`. These scales can then also
 |      be used here.
 |  
 |  set_xticklabels(self, labels, *, fontdict=None, minor=False, **kwargs)
 |      Set the xaxis' labels with list of string labels.
 |      
 |      .. warning::
 |          This method should only be used after fixing the tick positions
 |          using `.Axes.set_xticks`. Otherwise, the labels may end up in
 |          unexpected positions.
 |      
 |      Parameters
 |      ----------
 |      labels : list of str
 |          The label texts.
 |      
 |      fontdict : dict, optional
 |          A dictionary controlling the appearance of the ticklabels.
 |          The default *fontdict* is::
 |      
 |             {'fontsize': rcParams['axes.titlesize'],
 |              'fontweight': rcParams['axes.titleweight'],
 |              'verticalalignment': 'baseline',
 |              'horizontalalignment': loc}
 |      
 |      minor : bool, default: False
 |          Whether to set the minor ticklabels rather than the major ones.
 |      
 |      Returns
 |      -------
 |      list of `~.Text`
 |          The labels.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~.text.Text` properties.
 |  
 |  set_xticks(self, ticks, *, minor=False)
 |      Set the xaxis' tick locations.
 |      
 |      If necessary, the view limits of the Axis are expanded so that all
 |      given ticks are visible.
 |      
 |      Parameters
 |      ----------
 |      ticks : list of floats
 |          List of tick locations.
 |      minor : bool, default: False
 |          If ``False``, set the major ticks; if ``True``, the minor ticks.
 |      
 |      Notes
 |      -----
 |      The mandatory expansion of the view limits is an intentional design
 |      choice to prevent the surprise of a non-visible tick. If you need
 |      other limits, you should set the limits explicitly after setting the
 |      ticks.
 |  
 |  set_ybound(self, lower=None, upper=None)
 |      Set the lower and upper numerical bounds of the y-axis.
 |      
 |      This method will honor axes inversion regardless of parameter order.
 |      It will not change the autoscaling setting (`.get_autoscaley_on()`).
 |      
 |      Parameters
 |      ----------
 |      lower, upper : float or None
 |          The lower and upper bounds. If *None*, the respective axis bound
 |          is not modified.
 |      
 |      See Also
 |      --------
 |      get_ybound
 |      get_ylim, set_ylim
 |      invert_yaxis, yaxis_inverted
 |  
 |  set_ylabel(self, ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)
 |      Set the label for the y-axis.
 |      
 |      Parameters
 |      ----------
 |      ylabel : str
 |          The label text.
 |      
 |      labelpad : float, default: :rc:`axes.labelpad`
 |          Spacing in points from the axes bounding box including ticks
 |          and tick labels.  If None, the previous value is left as is.
 |      
 |      loc : {'bottom', 'center', 'top'}, default: :rc:`yaxis.labellocation`
 |          The label position. This is a high-level alternative for passing
 |          parameters *y* and *horizontalalignment*.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `.Text` properties
 |          `.Text` properties control the appearance of the label.
 |      
 |      See Also
 |      --------
 |      text : Documents the properties supported by `.Text`.
 |  
 |  set_ylim(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None)
 |      Set the y-axis view limits.
 |      
 |      Parameters
 |      ----------
 |      bottom : float, optional
 |          The bottom ylim in data coordinates. Passing *None* leaves the
 |          limit unchanged.
 |      
 |          The bottom and top ylims may also be passed as the tuple
 |          (*bottom*, *top*) as the first positional argument (or as
 |          the *bottom* keyword argument).
 |      
 |          .. ACCEPTS: (bottom: float, top: float)
 |      
 |      top : float, optional
 |          The top ylim in data coordinates. Passing *None* leaves the
 |          limit unchanged.
 |      
 |      emit : bool, default: True
 |          Whether to notify observers of limit change.
 |      
 |      auto : bool or None, default: False
 |          Whether to turn on autoscaling of the y-axis. *True* turns on,
 |          *False* turns off, *None* leaves unchanged.
 |      
 |      ymin, ymax : float, optional
 |          They are equivalent to bottom and top respectively,
 |          and it is an error to pass both *ymin* and *bottom* or
 |          *ymax* and *top*.
 |      
 |      Returns
 |      -------
 |      bottom, top : (float, float)
 |          The new y-axis limits in data coordinates.
 |      
 |      See Also
 |      --------
 |      get_ylim
 |      set_ybound, get_ybound
 |      invert_yaxis, yaxis_inverted
 |      
 |      Notes
 |      -----
 |      The *bottom* value may be greater than the *top* value, in which
 |      case the y-axis values will decrease from *bottom* to *top*.
 |      
 |      Examples
 |      --------
 |      >>> set_ylim(bottom, top)
 |      >>> set_ylim((bottom, top))
 |      >>> bottom, top = set_ylim(bottom, top)
 |      
 |      One limit may be left unchanged.
 |      
 |      >>> set_ylim(top=top_lim)
 |      
 |      Limits may be passed in reverse order to flip the direction of
 |      the y-axis. For example, suppose ``y`` represents depth of the
 |      ocean in m. The y-axis limits might be set like the following
 |      so 5000 m depth is at the bottom of the plot and the surface,
 |      0 m, is at the top.
 |      
 |      >>> set_ylim(5000, 0)
 |  
 |  set_ymargin(self, m)
 |      Set padding of Y data limits prior to autoscaling.
 |      
 |      *m* times the data interval will be added to each
 |      end of that interval before it is used in autoscaling.
 |      For example, if your data is in the range [0, 2], a factor of
 |      ``m = 0.1`` will result in a range [-0.2, 2.2].
 |      
 |      Negative values -0.5 < m < 0 will result in clipping of the data range.
 |      I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in
 |      a range [0.2, 1.8].
 |      
 |      Parameters
 |      ----------
 |      m : float greater than -0.5
 |  
 |  set_yscale(self, value, **kwargs)
 |      Set the y-axis scale.
 |      
 |      Parameters
 |      ----------
 |      value : {"linear", "log", "symlog", "logit", ...} or `.ScaleBase`
 |          The axis scale type to apply.
 |      
 |      **kwargs
 |          Different keyword arguments are accepted, depending on the scale.
 |          See the respective class keyword arguments:
 |      
 |          - `matplotlib.scale.LinearScale`
 |          - `matplotlib.scale.LogScale`
 |          - `matplotlib.scale.SymmetricalLogScale`
 |          - `matplotlib.scale.LogitScale`
 |          - `matplotlib.scale.FuncScale`
 |      
 |      Notes
 |      -----
 |      By default, Matplotlib supports the above mentioned scales.
 |      Additionally, custom scales may be registered using
 |      `matplotlib.scale.register_scale`. These scales can then also
 |      be used here.
 |  
 |  set_yticklabels(self, labels, *, fontdict=None, minor=False, **kwargs)
 |      Set the yaxis' labels with list of string labels.
 |      
 |      .. warning::
 |          This method should only be used after fixing the tick positions
 |          using `.Axes.set_yticks`. Otherwise, the labels may end up in
 |          unexpected positions.
 |      
 |      Parameters
 |      ----------
 |      labels : list of str
 |          The label texts.
 |      
 |      fontdict : dict, optional
 |          A dictionary controlling the appearance of the ticklabels.
 |          The default *fontdict* is::
 |      
 |             {'fontsize': rcParams['axes.titlesize'],
 |              'fontweight': rcParams['axes.titleweight'],
 |              'verticalalignment': 'baseline',
 |              'horizontalalignment': loc}
 |      
 |      minor : bool, default: False
 |          Whether to set the minor ticklabels rather than the major ones.
 |      
 |      Returns
 |      -------
 |      list of `~.Text`
 |          The labels.
 |      
 |      Other Parameters
 |      ----------------
 |      **kwargs : `~.text.Text` properties.
 |  
 |  set_yticks(self, ticks, *, minor=False)
 |      Set the yaxis' tick locations.
 |      
 |      If necessary, the view limits of the Axis are expanded so that all
 |      given ticks are visible.
 |      
 |      Parameters
 |      ----------
 |      ticks : list of floats
 |          List of tick locations.
 |      minor : bool, default: False
 |          If ``False``, set the major ticks; if ``True``, the minor ticks.
 |      
 |      Notes
 |      -----
 |      The mandatory expansion of the view limits is an intentional design
 |      choice to prevent the surprise of a non-visible tick. If you need
 |      other limits, you should set the limits explicitly after setting the
 |      ticks.
 |  
 |  sharex(self, other)
 |      Share the x-axis with *other*.
 |      
 |      This is equivalent to passing ``sharex=other`` when constructing the
 |      axes, and cannot be used if the x-axis is already being shared with
 |      another axes.
 |  
 |  sharey(self, other)
 |      Share the y-axis with *other*.
 |      
 |      This is equivalent to passing ``sharey=other`` when constructing the
 |      axes, and cannot be used if the y-axis is already being shared with
 |      another axes.
 |  
 |  start_pan(self, x, y, button)
 |      Called when a pan operation has started.
 |      
 |      Parameters
 |      ----------
 |      x, y : float
 |          The mouse coordinates in display coords.
 |      button : `.MouseButton`
 |          The pressed mouse button.
 |      
 |      Notes
 |      -----
 |      This is intended to be overridden by new projection types.
 |  
 |  tick_params(self, axis='both', **kwargs)
 |      Change the appearance of ticks, tick labels, and gridlines.
 |      
 |      Tick properties that are not explicitly set using the keyword
 |      arguments remain unchanged unless *reset* is True.
 |      
 |      Parameters
 |      ----------
 |      axis : {'x', 'y', 'both'}, default: 'both'
 |          The axis to which the parameters are applied.
 |      which : {'major', 'minor', 'both'}, default: 'major'
 |          The group of ticks to which the parameters are applied.
 |      reset : bool, default: False
 |          Whether to reset the ticks to defaults before updating them.
 |      
 |      Other Parameters
 |      ----------------
 |      direction : {'in', 'out', 'inout'}
 |          Puts ticks inside the axes, outside the axes, or both.
 |      length : float
 |          Tick length in points.
 |      width : float
 |          Tick width in points.
 |      color : color
 |          Tick color.
 |      pad : float
 |          Distance in points between tick and label.
 |      labelsize : float or str
 |          Tick label font size in points or as a string (e.g., 'large').
 |      labelcolor : color
 |          Tick label color.
 |      colors : color
 |          Tick color and label color.
 |      zorder : float
 |          Tick and label zorder.
 |      bottom, top, left, right : bool
 |          Whether to draw the respective ticks.
 |      labelbottom, labeltop, labelleft, labelright : bool
 |          Whether to draw the respective tick labels.
 |      labelrotation : float
 |          Tick label rotation
 |      grid_color : color
 |          Gridline color.
 |      grid_alpha : float
 |          Transparency of gridlines: 0 (transparent) to 1 (opaque).
 |      grid_linewidth : float
 |          Width of gridlines in points.
 |      grid_linestyle : str
 |          Any valid `.Line2D` line style spec.
 |      
 |      Examples
 |      --------
 |      ::
 |      
 |          ax.tick_params(direction='out', length=6, width=2, colors='r',
 |                         grid_color='r', grid_alpha=0.5)
 |      
 |      This will make all major ticks be red, pointing out of the box,
 |      and with dimensions 6 points by 2 points.  Tick labels will
 |      also be red.  Gridlines will be red and translucent.
 |  
 |  ticklabel_format(self, *, axis='both', style='', scilimits=None, useOffset=None, useLocale=None, useMathText=None)
 |      Configure the `.ScalarFormatter` used by default for linear axes.
 |      
 |      If a parameter is not set, the corresponding property of the formatter
 |      is left unchanged.
 |      
 |      Parameters
 |      ----------
 |      axis : {'x', 'y', 'both'}, default: 'both'
 |          The axes to configure.  Only major ticks are affected.
 |      
 |      style : {'sci', 'scientific', 'plain'}
 |          Whether to use scientific notation.
 |          The formatter default is to use scientific notation.
 |      
 |      scilimits : pair of ints (m, n)
 |          Scientific notation is used only for numbers outside the range
 |          10\ :sup:`m` to 10\ :sup:`n` (and only if the formatter is
 |          configured to use scientific notation at all).  Use (0, 0) to
 |          include all numbers.  Use (m, m) where m != 0 to fix the order of
 |          magnitude to 10\ :sup:`m`.
 |          The formatter default is :rc:`axes.formatter.limits`.
 |      
 |      useOffset : bool or float
 |          If True, the offset is calculated as needed.
 |          If False, no offset is used.
 |          If a numeric value, it sets the offset.
 |          The formatter default is :rc:`axes.formatter.useoffset`.
 |      
 |      useLocale : bool
 |          Whether to format the number using the current locale or using the
 |          C (English) locale.  This affects e.g. the decimal separator.  The
 |          formatter default is :rc:`axes.formatter.use_locale`.
 |      
 |      useMathText : bool
 |          Render the offset and scientific notation in mathtext.
 |          The formatter default is :rc:`axes.formatter.use_mathtext`.
 |      
 |      Raises
 |      ------
 |      AttributeError
 |          If the current formatter is not a `.ScalarFormatter`.
 |  
 |  twinx(self)
 |      Create a twin Axes sharing the xaxis.
 |      
 |      Create a new Axes with an invisible x-axis and an independent
 |      y-axis positioned opposite to the original one (i.e. at right). The
 |      x-axis autoscale setting will be inherited from the original
 |      Axes.  To ensure that the tick marks of both y-axes align, see
 |      `~matplotlib.ticker.LinearLocator`.
 |      
 |      Returns
 |      -------
 |      Axes
 |          The newly created Axes instance
 |      
 |      Notes
 |      -----
 |      For those who are 'picking' artists while using twinx, pick
 |      events are only called for the artists in the top-most axes.
 |  
 |  twiny(self)
 |      Create a twin Axes sharing the yaxis.
 |      
 |      Create a new Axes with an invisible y-axis and an independent
 |      x-axis positioned opposite to the original one (i.e. at top). The
 |      y-axis autoscale setting will be inherited from the original Axes.
 |      To ensure that the tick marks of both x-axes align, see
 |      `~matplotlib.ticker.LinearLocator`.
 |      
 |      Returns
 |      -------
 |      Axes
 |          The newly created Axes instance
 |      
 |      Notes
 |      -----
 |      For those who are 'picking' artists while using twiny, pick
 |      events are only called for the artists in the top-most axes.
 |  
 |  update_datalim(self, xys, updatex=True, updatey=True)
 |      Extend the `~.Axes.dataLim` Bbox to include the given points.
 |      
 |      If no data is set currently, the Bbox will ignore its limits and set
 |      the bound to be the bounds of the xydata (*xys*). Otherwise, it will
 |      compute the bounds of the union of its current data and the data in
 |      *xys*.
 |      
 |      Parameters
 |      ----------
 |      xys : 2D array-like
 |          The points to include in the data limits Bbox. This can be either
 |          a list of (x, y) tuples or a Nx2 array.
 |      
 |      updatex, updatey : bool, default: True
 |          Whether to update the x/y limits.
 |  
 |  update_datalim_bounds(self, bounds)
 |      [*Deprecated*] Extend the `~.Axes.datalim` Bbox to include the given
 |      `~matplotlib.transforms.Bbox`.
 |      
 |      Parameters
 |      ----------
 |      bounds : `~matplotlib.transforms.Bbox`
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.3
 |  
 |  xaxis_date(self, tz=None)
 |      Set up axis ticks and labels to treat data along the xaxis as dates.
 |      
 |      Parameters
 |      ----------
 |      tz : str or `datetime.tzinfo`, default: :rc:`timezone`
 |          The timezone used to create date labels.
 |  
 |  xaxis_inverted(self)
 |      Return whether the xaxis is oriented in the "inverse" direction.
 |      
 |      The "normal" direction is increasing to the right for the x-axis and to
 |      the top for the y-axis; the "inverse" direction is increasing to the
 |      left for the x-axis and to the bottom for the y-axis.
 |  
 |  yaxis_date(self, tz=None)
 |      Set up axis ticks and labels to treat data along the yaxis as dates.
 |      
 |      Parameters
 |      ----------
 |      tz : str or `datetime.tzinfo`, default: :rc:`timezone`
 |          The timezone used to create date labels.
 |  
 |  yaxis_inverted(self)
 |      Return whether the yaxis is oriented in the "inverse" direction.
 |      
 |      The "normal" direction is increasing to the right for the x-axis and to
 |      the top for the y-axis; the "inverse" direction is increasing to the
 |      left for the x-axis and to the bottom for the y-axis.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from matplotlib.axes._base._AxesBase:
 |  
 |  viewLim
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from matplotlib.axes._base._AxesBase:
 |  
 |  use_sticky_edges
 |      When autoscaling, whether to obey all `Artist.sticky_edges`.
 |      
 |      Default is ``True``.
 |      
 |      Setting this to ``False`` ensures that the specified margins
 |      will be applied, even if the plot includes an image, for
 |      example, which would otherwise force a view limit to coincide
 |      with its data limit.
 |      
 |      The changing this property does not change the plot until
 |      `autoscale` or `autoscale_view` is called.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from matplotlib.axes._base._AxesBase:
 |  
 |  name = 'rectilinear'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from matplotlib.artist.Artist:
 |  
 |  add_callback(self, func)
 |      Add a callback function that will be called whenever one of the
 |      `.Artist`'s properties changes.
 |      
 |      Parameters
 |      ----------
 |      func : callable
 |          The callback function. It must have the signature::
 |      
 |              def func(artist: Artist) -> Any
 |      
 |          where *artist* is the calling `.Artist`. Return values may exist
 |          but are ignored.
 |      
 |      Returns
 |      -------
 |      int
 |          The observer id associated with the callback. This id can be
 |          used for removing the callback with `.remove_callback` later.
 |      
 |      See Also
 |      --------
 |      remove_callback
 |  
 |  convert_xunits(self, x)
 |      Convert *x* using the unit type of the xaxis.
 |      
 |      If the artist is not in contained in an Axes or if the xaxis does not
 |      have units, *x* itself is returned.
 |  
 |  convert_yunits(self, y)
 |      Convert *y* using the unit type of the yaxis.
 |      
 |      If the artist is not in contained in an Axes or if the yaxis does not
 |      have units, *y* itself is returned.
 |  
 |  findobj(self, match=None, include_self=True)
 |      Find artist objects.
 |      
 |      Recursively find all `.Artist` instances contained in the artist.
 |      
 |      Parameters
 |      ----------
 |      match
 |          A filter criterion for the matches. This can be
 |      
 |          - *None*: Return all objects contained in artist.
 |          - A function with signature ``def match(artist: Artist) -> bool``.
 |            The result will only contain artists for which the function
 |            returns *True*.
 |          - A class instance: e.g., `.Line2D`. The result will only contain
 |            artists of this class or its subclasses (``isinstance`` check).
 |      
 |      include_self : bool
 |          Include *self* in the list to be checked for a match.
 |      
 |      Returns
 |      -------
 |      list of `.Artist`
 |  
 |  format_cursor_data(self, data)
 |      Return a string representation of *data*.
 |      
 |      .. note::
 |          This method is intended to be overridden by artist subclasses.
 |          As an end-user of Matplotlib you will most likely not call this
 |          method yourself.
 |      
 |      The default implementation converts ints and floats and arrays of ints
 |      and floats into a comma-separated string enclosed in square brackets.
 |      
 |      See Also
 |      --------
 |      get_cursor_data
 |  
 |  get_agg_filter(self)
 |      Return filter function to be used for agg filter.
 |  
 |  get_alpha(self)
 |      Return the alpha value used for blending - not supported on all
 |      backends.
 |  
 |  get_animated(self)
 |      Return whether the artist is animated.
 |  
 |  get_clip_box(self)
 |      Return the clipbox.
 |  
 |  get_clip_on(self)
 |      Return whether the artist uses clipping.
 |  
 |  get_clip_path(self)
 |      Return the clip path.
 |  
 |  get_contains(self)
 |      [*Deprecated*] Return the custom contains function of the artist if set, or *None*.
 |      
 |      See Also
 |      --------
 |      set_contains
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.3
 |  
 |  get_cursor_data(self, event)
 |      Return the cursor data for a given event.
 |      
 |      .. note::
 |          This method is intended to be overridden by artist subclasses.
 |          As an end-user of Matplotlib you will most likely not call this
 |          method yourself.
 |      
 |      Cursor data can be used by Artists to provide additional context
 |      information for a given event. The default implementation just returns
 |      *None*.
 |      
 |      Subclasses can override the method and return arbitrary data. However,
 |      when doing so, they must ensure that `.format_cursor_data` can convert
 |      the data to a string representation.
 |      
 |      The only current use case is displaying the z-value of an `.AxesImage`
 |      in the status bar of a plot window, while moving the mouse.
 |      
 |      Parameters
 |      ----------
 |      event : `matplotlib.backend_bases.MouseEvent`
 |      
 |      See Also
 |      --------
 |      format_cursor_data
 |  
 |  get_figure(self)
 |      Return the `.Figure` instance the artist belongs to.
 |  
 |  get_gid(self)
 |      Return the group id.
 |  
 |  get_in_layout(self)
 |      Return boolean flag, ``True`` if artist is included in layout
 |      calculations.
 |      
 |      E.g. :doc:`/tutorials/intermediate/constrainedlayout_guide`,
 |      `.Figure.tight_layout()`, and
 |      ``fig.savefig(fname, bbox_inches='tight')``.
 |  
 |  get_label(self)
 |      Return the label used for this artist in the legend.
 |  
 |  get_path_effects(self)
 |  
 |  get_picker(self)
 |      Return the picking behavior of the artist.
 |      
 |      The possible values are described in `.set_picker`.
 |      
 |      See Also
 |      --------
 |      set_picker, pickable, pick
 |  
 |  get_rasterized(self)
 |      Return whether the artist is to be rasterized.
 |  
 |  get_sketch_params(self)
 |      Return the sketch parameters for the artist.
 |      
 |      Returns
 |      -------
 |      tuple or None
 |      
 |          A 3-tuple with the following elements:
 |      
 |          - *scale*: The amplitude of the wiggle perpendicular to the
 |            source line.
 |          - *length*: The length of the wiggle along the line.
 |          - *randomness*: The scale factor by which the length is
 |            shrunken or expanded.
 |      
 |          Returns *None* if no sketch parameters were set.
 |  
 |  get_snap(self)
 |      Return the snap setting.
 |      
 |      See `.set_snap` for details.
 |  
 |  get_transform(self)
 |      Return the `.Transform` instance used by this artist.
 |  
 |  get_transformed_clip_path_and_affine(self)
 |      Return the clip path with the non-affine part of its
 |      transformation applied, and the remaining affine part of its
 |      transformation.
 |  
 |  get_url(self)
 |      Return the url.
 |  
 |  get_visible(self)
 |      Return the visibility.
 |  
 |  get_zorder(self)
 |      Return the artist's zorder.
 |  
 |  have_units(self)
 |      Return whether units are set on any axis.
 |  
 |  is_transform_set(self)
 |      Return whether the Artist has an explicitly set transform.
 |      
 |      This is *True* after `.set_transform` has been called.
 |  
 |  pchanged(self)
 |      Call all of the registered callbacks.
 |      
 |      This function is triggered internally when a property is changed.
 |      
 |      See Also
 |      --------
 |      add_callback
 |      remove_callback
 |  
 |  pick(self, mouseevent)
 |      Process a pick event.
 |      
 |      Each child artist will fire a pick event if *mouseevent* is over
 |      the artist and the artist has picker set.
 |      
 |      See Also
 |      --------
 |      set_picker, get_picker, pickable
 |  
 |  pickable(self)
 |      Return whether the artist is pickable.
 |      
 |      See Also
 |      --------
 |      set_picker, get_picker, pick
 |  
 |  properties(self)
 |      Return a dictionary of all the properties of the artist.
 |  
 |  remove(self)
 |      Remove the artist from the figure if possible.
 |      
 |      The effect will not be visible until the figure is redrawn, e.g.,
 |      with `.FigureCanvasBase.draw_idle`.  Call `~.axes.Axes.relim` to
 |      update the axes limits if desired.
 |      
 |      Note: `~.axes.Axes.relim` will not see collections even if the
 |      collection was added to the axes with *autolim* = True.
 |      
 |      Note: there is no support for removing the artist's legend entry.
 |  
 |  remove_callback(self, oid)
 |      Remove a callback based on its observer id.
 |      
 |      See Also
 |      --------
 |      add_callback
 |  
 |  set(self, **kwargs)
 |      A property batch setter.  Pass *kwargs* to set properties.
 |  
 |  set_agg_filter(self, filter_func)
 |      Set the agg filter.
 |      
 |      Parameters
 |      ----------
 |      filter_func : callable
 |          A filter function, which takes a (m, n, 3) float array and a dpi
 |          value, and returns a (m, n, 3) array.
 |      
 |          .. ACCEPTS: a filter function, which takes a (m, n, 3) float array
 |              and a dpi value, and returns a (m, n, 3) array
 |  
 |  set_alpha(self, alpha)
 |      Set the alpha value used for blending - not supported on all backends.
 |      
 |      Parameters
 |      ----------
 |      alpha : scalar or None
 |          *alpha* must be within the 0-1 range, inclusive.
 |  
 |  set_animated(self, b)
 |      Set whether the artist is intended to be used in an animation.
 |      
 |      If True, the artist is excluded from regular drawing of the figure.
 |      You have to call `.Figure.draw_artist` / `.Axes.draw_artist`
 |      explicitly on the artist. This appoach is used to speed up animations
 |      using blitting.
 |      
 |      See also `matplotlib.animation` and
 |      :doc:`/tutorials/advanced/blitting`.
 |      
 |      Parameters
 |      ----------
 |      b : bool
 |  
 |  set_clip_box(self, clipbox)
 |      Set the artist's clip `.Bbox`.
 |      
 |      Parameters
 |      ----------
 |      clipbox : `.Bbox`
 |  
 |  set_clip_on(self, b)
 |      Set whether the artist uses clipping.
 |      
 |      When False artists will be visible outside of the axes which
 |      can lead to unexpected results.
 |      
 |      Parameters
 |      ----------
 |      b : bool
 |  
 |  set_clip_path(self, path, transform=None)
 |      Set the artist's clip path.
 |      
 |      Parameters
 |      ----------
 |      path : `.Patch` or `.Path` or `.TransformedPath` or None
 |          The clip path. If given a `.Path`, *transform* must be provided as
 |          well. If *None*, a previously set clip path is removed.
 |      transform : `~matplotlib.transforms.Transform`, optional
 |          Only used if *path* is a `.Path`, in which case the given `.Path`
 |          is converted to a `.TransformedPath` using *transform*.
 |      
 |      Notes
 |      -----
 |      For efficiency, if *path* is a `.Rectangle` this method will set the
 |      clipping box to the corresponding rectangle and set the clipping path
 |      to ``None``.
 |      
 |      For technical reasons (support of `~.Artist.set`), a tuple
 |      (*path*, *transform*) is also accepted as a single positional
 |      parameter.
 |      
 |      .. ACCEPTS: Patch or (Path, Transform) or None
 |  
 |  set_contains(self, picker)
 |      [*Deprecated*] Define a custom contains test for the artist.
 |      
 |      The provided callable replaces the default `.contains` method
 |      of the artist.
 |      
 |      Parameters
 |      ----------
 |      picker : callable
 |          A custom picker function to evaluate if an event is within the
 |          artist. The function must have the signature::
 |      
 |              def contains(artist: Artist, event: MouseEvent) -> bool, dict
 |      
 |          that returns:
 |      
 |          - a bool indicating if the event is within the artist
 |          - a dict of additional information. The dict should at least
 |            return the same information as the default ``contains()``
 |            implementation of the respective artist, but may provide
 |            additional information.
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 3.3
 |  
 |  set_gid(self, gid)
 |      Set the (group) id for the artist.
 |      
 |      Parameters
 |      ----------
 |      gid : str
 |  
 |  set_in_layout(self, in_layout)
 |      Set if artist is to be included in layout calculations,
 |      E.g. :doc:`/tutorials/intermediate/constrainedlayout_guide`,
 |      `.Figure.tight_layout()`, and
 |      ``fig.savefig(fname, bbox_inches='tight')``.
 |      
 |      Parameters
 |      ----------
 |      in_layout : bool
 |  
 |  set_label(self, s)
 |      Set a label that will be displayed in the legend.
 |      
 |      Parameters
 |      ----------
 |      s : object
 |          *s* will be converted to a string by calling `str`.
 |  
 |  set_path_effects(self, path_effects)
 |      Set the path effects.
 |      
 |      Parameters
 |      ----------
 |      path_effects : `.AbstractPathEffect`
 |  
 |  set_picker(self, picker)
 |      Define the picking behavior of the artist.
 |      
 |      Parameters
 |      ----------
 |      picker : None or bool or float or callable
 |          This can be one of the following:
 |      
 |          - *None*: Picking is disabled for this artist (default).
 |      
 |          - A boolean: If *True* then picking will be enabled and the
 |            artist will fire a pick event if the mouse event is over
 |            the artist.
 |      
 |          - A float: If picker is a number it is interpreted as an
 |            epsilon tolerance in points and the artist will fire
 |            off an event if its data is within epsilon of the mouse
 |            event.  For some artists like lines and patch collections,
 |            the artist may provide additional data to the pick event
 |            that is generated, e.g., the indices of the data within
 |            epsilon of the pick event
 |      
 |          - A function: If picker is callable, it is a user supplied
 |            function which determines whether the artist is hit by the
 |            mouse event::
 |      
 |              hit, props = picker(artist, mouseevent)
 |      
 |            to determine the hit test.  if the mouse event is over the
 |            artist, return *hit=True* and props is a dictionary of
 |            properties you want added to the PickEvent attributes.
 |  
 |  set_rasterized(self, rasterized)
 |      Force rasterized (bitmap) drawing for vector graphics output.
 |      
 |      Rasterized drawing is not supported by all artists. If you try to
 |      enable this on an artist that does not support it, the command has no
 |      effect and a warning will be issued.
 |      
 |      This setting is ignored for pixel-based output.
 |      
 |      See also :doc:`/gallery/misc/rasterization_demo`.
 |      
 |      Parameters
 |      ----------
 |      rasterized : bool
 |  
 |  set_sketch_params(self, scale=None, length=None, randomness=None)
 |      Set the sketch parameters.
 |      
 |      Parameters
 |      ----------
 |      scale : float, optional
 |          The amplitude of the wiggle perpendicular to the source
 |          line, in pixels.  If scale is `None`, or not provided, no
 |          sketch filter will be provided.
 |      length : float, optional
 |           The length of the wiggle along the line, in pixels
 |           (default 128.0)
 |      randomness : float, optional
 |          The scale factor by which the length is shrunken or
 |          expanded (default 16.0)
 |      
 |          .. ACCEPTS: (scale: float, length: float, randomness: float)
 |  
 |  set_snap(self, snap)
 |      Set the snapping behavior.
 |      
 |      Snapping aligns positions with the pixel grid, which results in
 |      clearer images. For example, if a black line of 1px width was
 |      defined at a position in between two pixels, the resulting image
 |      would contain the interpolated value of that line in the pixel grid,
 |      which would be a grey value on both adjacent pixel positions. In
 |      contrast, snapping will move the line to the nearest integer pixel
 |      value, so that the resulting image will really contain a 1px wide
 |      black line.
 |      
 |      Snapping is currently only supported by the Agg and MacOSX backends.
 |      
 |      Parameters
 |      ----------
 |      snap : bool or None
 |          Possible values:
 |      
 |          - *True*: Snap vertices to the nearest pixel center.
 |          - *False*: Do not modify vertex positions.
 |          - *None*: (auto) If the path contains only rectilinear line
 |            segments, round to the nearest pixel center.
 |  
 |  set_transform(self, t)
 |      Set the artist transform.
 |      
 |      Parameters
 |      ----------
 |      t : `.Transform`
 |  
 |  set_url(self, url)
 |      Set the url for the artist.
 |      
 |      Parameters
 |      ----------
 |      url : str
 |  
 |  set_visible(self, b)
 |      Set the artist's visibility.
 |      
 |      Parameters
 |      ----------
 |      b : bool
 |  
 |  set_zorder(self, level)
 |      Set the zorder for the artist.  Artists with lower zorder
 |      values are drawn first.
 |      
 |      Parameters
 |      ----------
 |      level : float
 |  
 |  update(self, props)
 |      Update this artist's properties from the dict *props*.
 |      
 |      Parameters
 |      ----------
 |      props : dict
 |  
 |  update_from(self, other)
 |      Copy properties from *other* to *self*.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from matplotlib.artist.Artist:
 |  
 |  sticky_edges
 |      ``x`` and ``y`` sticky edge lists for autoscaling.
 |      
 |      When performing autoscaling, if a data limit coincides with a value in
 |      the corresponding sticky_edges list, then no margin will be added--the
 |      view limit "sticks" to the edge. A typical use case is histograms,
 |      where one usually expects no margin on the bottom edge (0) of the
 |      histogram.
 |      
 |      This attribute cannot be assigned to; however, the ``x`` and ``y``
 |      lists can be modified in place as needed.
 |      
 |      Examples
 |      --------
 |      >>> artist.sticky_edges.x[:] = (xmin, xmax)
 |      >>> artist.sticky_edges.y[:] = (ymin, ymax)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from matplotlib.artist.Artist:
 |  
 |  axes
 |      The `~.axes.Axes` instance the artist resides in, or *None*.
 |  
 |  mouseover
 |      If this property is set to *True*, the artist will be queried for
 |      custom context information when the mouse cursor moves over it.
 |      
 |      See also :meth:`get_cursor_data`, :class:`.ToolCursorPosition` and
 |      :class:`.NavigationToolbar2`.
 |  
 |  stale
 |      Whether the artist is 'stale' and needs to be re-drawn for the output
 |      to match the internal state of the artist.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from matplotlib.artist.Artist:
 |  
 |  zorder = 0

